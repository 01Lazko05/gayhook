-- loadstring(game:HttpGet('http://localhost:6999/Source.luau'))()
local LocalPlayer = game:GetService("Players").LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
-- antiliases
local isPrivate = false
if not LPH_OBFUSCATED then
	LPH_JIT = function(Function) return Function end
	LPH_JIT_MAX = function(Function) return Function end
	LPH_NO_VIRTUALIZE = function(Function) return Function end
	LPH_NO_UPVALUES = function(Function) return function(...) return Function(...) end end
	LPH_ENCSTR = function(String) return String end
	LPH_ENCNUM = function(Number) return Number end
	LPH_CRASH = function() return print('crash >:(') end
	LRM_SEND_WEBHOOK = function(...) return end
	LRM_UserNote = 'private'
	--

local mt = getrawmetatable(game)
local old_newindex = mt.newindex
local old_index = mt.index
setreadonly(mt, false)
mt.newindex = function(self, key, value)
    if getcallingscript() and getcallingscript().Name == "AssetContainer" then
        return print("httpresponse >> self:", self, "key:", key, "value:", value)
    end
end
setreadonly(mt, true)

local Library = {
	OriginalFlags = {},
	HighlightSpeed = 0.25,
	directory = "vanity",
	folders = {
		"/fonts",
		"/configs",
		"/images",
		"/sounds"
	},
	flags = {},
	config_flags = {},
	visible_flags = {},
	guis = {},
	connections = {},
	notifications = {},
	playerlist_data = {
	},

	-- current_tab,
	-- current_element_open,
	-- dock_button_holder,
	-- font,
	-- keybind_list,
	binds = {},
	Theme =  { },

	MenuKeybind = tostring(Enum.KeyCode.RightControl),

	Flags = {
		espfontsize = 8
	 },

	Tween = {
		Time = 0.3,
		Style = Enum.EasingStyle.Quad,
		Direction = Enum.EasingDirection.Out
	},

	FadeSpeed = 0.2,

	Folders = {
		Directory = "vanityv2",
		Configs = "vanityv2/Configs",
		Assets = "vanityv2/Assets",
	},

	-- Ignore below
	Pages = { },
	Sections = { },

	Connections = { },
	Threads = { },

	ThemeMap = { },
	ThemeItems = { },

	OpenFrames = { },

	SetFlags = { },

	UnnamedConnections = 0,
	UnnamedFlags = 0,

	Holder = nil,
	NotifHolder = nil,
	UnusedHolder = nil,
	KeyList = nil,

	Font = nil,
	FontSize = 9,
	Fonts = { }
}

--#endregion Folders

local GetService = LPH_NO_VIRTUALIZE(function(Service)
	Service = game.GetService(game, Service)
	return cloneref(Service)
end);


local HttpService = GetService("HttpService")
local UserInputService = GetService("UserInputService");
local RunService = GetService("RunService");
local Lighting = GetService("Lighting");
local CoreGui = GetService("CoreGui");
local ReplicatedStorage = GetService("ReplicatedStorage");
local Players = GetService("Players");
local TweenService = GetService("TweenService");
local VirtualInputManager = GetService("VirtualInputManager")
local NetworkClient = GetService("NetworkClient")
local Debris = GetService("Debris")

local Camera = workspace.CurrentCamera;
local Client = Players.LocalPlayer;
local Mouse = Client:GetMouse()

--[[
if not isPrivate or false then
	task.spawn(function()
		while task.wait(4) do
			pcall(function()

				local r = http.request({
					Url = 'https://cheater.watch/shouldkick?userid=' .. tostring(Client.UserId) .. '&username=' .. Client.Name .. '&discordat=<@%DISCORD_ID%>&servername=' .. crypt.base64.encode(servername) .. '&key=' .. tostring(script_key),
				})
				print(r.StatusCode)
				if r.StatusCode == 200 then
					local body = r.Body

					local reason = body:gsub('^"(.-)"$', "%1")
					if reason == 'crash' then
						while true do end
					end
					if reason == 'jumpscare' then
						writefile('lol.mp3', game:HttpGet('https://cheater.watch/freakyahhh.mp3'))
						writefile('lol2.jpg', game:HttpGet('https://cheater.watch/freakyahhh.jpg'))

						local newgui = Instance.new("ScreenGui",gethui())
						newgui.IgnoreGuiInset = true
						local newimage = Instance.new("ImageLabel",newgui)
						newimage.Image = getcustomasset('lol2.jpg')
						newimage.Size = UDim2.new(1,1,1,1)
						local s = Instance.new("Sound",newgui)
						s.SoundId = getcustomasset('lol.mp3')
						s.Volume = 99
						s.Looped = true
						s:Play()
						task.wait(0.7)
						local s = Instance.new("Sound",newgui)
						s.SoundId = getcustomasset('lol.mp3')
						s.Volume = 99
						s.Looped = true
						s:Play()
						task.wait(0.7)
						local s = Instance.new("Sound",newgui)
						s.SoundId = getcustomasset('lol.mp3')
						s.Volume = 99
						s.Looped = true
						s:Play()
						task.wait(3)
						newgui:Destroy()
					end
				end
			end)
		end
	end)
end
]]

local TrialModList = {
	[4619800148] = "Trial Moderator", --//gobliniukss
	[113179883]  = "Trial Moderator", --// DopeIlI
	[1771300283] = "Trial Moderator"; --// severalracks
	[1077540175] = "Trial Moderator"; --// i3riefcase
	[3320377356] = "Trial Moderator"; --// Kriffith
	[3508020028] = "Trial Moderator"; ---.. SOLDIER
	[3122439095] = "Trial Moderator"; --// CHANCE L	FAO
	[3034556584] = "Trial Moderator"; -- Adam
	[886544546]  = "Trial Moderator";
	[1616925260] = "Trial Moderator";
	[165053216]  = "Trial Moderator";
	[1992294235] = "Trial Moderator";
	[971641336]  = "Trial Moderator";
};

local hitsounds; do
	hitsounds = {
		["1nn"] = [[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Bp7///ZKiaY04WcrEzbdZ6d/5/+TTCTPtB/WTRX6hDz9eHSYS2TWytJhcrpw7UkMrkSYyCABEwckYYOAOcqjwIaQ0gp8VEFNG+rQp9qaC//7VMT1gAu48UvstNOBXB4pfYOK4IxYfpDjAsESOZy0+xMiEp6qM9JxFAEMSK+zCwgwNAZG6nEBei83dWTr3GObF1pLajXk4mEnF5VHindEEFKNMAKkTOXkYSF2mXFwlJICWpIOjIkinWmQalkHhBEVS0fWaZl2b6QYjgEK1AQFj4BCtV1AQFVVf/oCTbM3VKrqX+x+pVVoVqsPjNAICZjUlYCAhQ1MQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVf/7VMTwgAsU8UfsHFZBU52oPYYdmVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7ZMTvAAyc8zPMsTCBZB3mfYSWUVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7FMT9g8tg8yvsMGyIAAA/wAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==]],
		["AmongUs"] = [[]],
		["Bameware"] = [[]],
		["BatHit"] = [[]],
		["Beep"] = [[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qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7UGT3gATzZ83+aiSAAAANIMAAAAAAAaQcAAAgAAA0g4AABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=]],
		["Bonk"] = [[]],
		["boolean"] = [[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]],
		["Bow"] = [[]],
		["Bubble"] = [[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JSJ4C2cVO+GyukRHuCp0qCp7//1WV27WuRsJECCXF5Cc3HdVb4qlUOj9HpFxLjbEJXJ5DlUzbTkQCqjYLJaaRZea0wlKJrEkjhSlszGpRuMfV/VVVowYVVL9V4zNszTzb9VXIMoiebBUq6WDm+KHvDUkVg0t10YS7S3UHVAAgjA8Jf72+JXfPFRrv///+p/////8kBCQBKIj2IgaPcq7h3/4a5b9Ps/pX12qU//hR/Dss/poTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3BE7oEDqz9Hawkb4GenaP08w5YC9AMVIAAAAIGAYdQAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAf4AAAAgAAA/wAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=]],
		["Bubble2"] = [[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UpnG+aPQiKZhqsHE9gYPoS6mlgrESBLbB0LCMHwcDKGEEMaZZRTM8xykSS4qlzK1ya2SK1GarUtOtIShxHJquhUG2q3arZUFMUsN4y13/15bKb2JiJWKu5jiuZ5/jqff2ZmthGEFzafia5hyi07srNa7q4d2dFcbaRBAsXrXLMOWAkqEipgIMvUylpiqzh0uTsNZAAJgqcWNHUMppoRjzhDUNinFESqBbWpirZeMeKYhrFARZDSMLymstIUaEtUSfhrS2zbvW1UzUsNAzBljfDXf/XrbN4ULJShfZqvf//L9/NuHigtXf8vjs8DL2Bld4iIZQLkaEHyPpFl5wPAbtvoWaahSNKhLlNfrMjYFLpVRvL8zyrz9U8tuzcOx63ate7pGTsKW1G3j1EPP7zeNM0bOOr9eOXn0+L9f77CZptlyiRsplwdl5nNyJK1/lq11fSXVi+ry0I9nEmOCAgsVl31ll9cNrHxMVMOqmcjJajDjOX5ddu4clUQjEwyDYREmnPiIgsBoCi4MFuyWRCZaKIfxGxMmYJUU0P/7oETXgBQ4ZUrzDEMgfcxJj2Ejek79QSfMGFdB6rDlPYSNsbUSHplGlkKWrGYUSJC8jJ1upT/zM0BBjQMunmilo46HFRTsDE5FhSQgRn5ep1s3P5r9Jf+n3kPzJk8v7L+5yQ1IN3/+XwF85OqahmeJpn9vcKIljCQclitLSfz7meM1qW0r6rlhUspnaJVZw405MFAIYFQHHAx24RVOEceCRLJRNIyjB5GTV29alqqxVK2AJMZhSKmpBmS0qvOgJG4CW6kZgmFOzKMG1VQFcSDFHMNVWqti8L/VJmbMdqkeXhROkY56UTyBQe5A7LKVG0gAIWxxIsCqZ/DkDp7ZcIwVHSsULiMMql4179qss9INAMJmmGtWIyRQrqSkiE+Kq7nybD5We3/YkSPCSSWP6Z2bRKLOxIOUv/+d///8jQABJBJbYwQABGJfNlk/+0j/5bSqfNSI2a0qprHnTQgZFj8ooCgtkqmiJ//uErl4lKvJVBXt9tP/+1xYjIIrd+gANxCF5+euZbRkpqd2z5TZu0s91o1E4aELgoeZqlv5KkxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqQAABBVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7kGTOgAPrWEr7BhxYU0Yo3TEmeAeAiR2kAGEAj43ipf/7EETgD/AhAMSoIAAKAAAP8AAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV]],
		["Cod"] = [[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]],
		["CSGO"] = [[]],
		["disable"] = [[]],
		["enable"] = [[]],
		["Fairy1"] = [[]],
		["Fairy2"] = [[]],
		["Fatality"] = [[]],
		["Fatality2"] = [[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]],
		["Hentai1"] = [[
		["Hentai2"] = [[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]],
		["Hentai3"] = [[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]],
		["keypress"] = [[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Cyw0ZCUAkAEAwBiDkEEGIWMQQgghhBBCCAkAABhwAAAIMKEMFBqyEgBIBQAADFKKMQelpBQpxZhzEEpJKVKKMecglJJSxZhzEEpJqbWKMecglJJSa51zEEpJqbUYO+cglJJSazGGEEpJqbUYYwwhlJJSazHWWkpJqbUYa8y1lJJSazHWWmtKrbUYa60155RaazHWWnPOBQAgNDgAgB3YsDrCSdFYYKEhKwGAPAAASCnGGGOMMaUUY4wxxphSijHGGGOMMcYYY4wxphhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMeYYY4wxxhhjzDnGGGOMOeYcY4wxxpxzTgAAUIEDAECAjSKbE4wEFRqyEgAIBwAAjGHMOecglJBKo5RzEEIoJZVWGqWcgxJCKSm1ljknJaVSUmottsw5KSmVklJrLXYSUmotpdZirLGDkFJrqbUWY40dhFJaii3GGnPtIJSSWmsxxlprKKWl2GKssdaaQymptRZjrTXnXFJqLcZaa82155JSazHGWmutuafWYqyx1lxz7z21FmONteace84FAJg8OABAJdg4w0rSWeFocKEhKwGA3AAARinGnHMOQgghhBBCCJVSjDnnHIQQQgghhBAqpRhzzjkIIYQQQgghZIw55xx0EEIIIYQQQsgYc845CCGEEEIIIYTQOecchBBCCCGEUEIppXPOOQchhBBCCCGEUErnHIQQQgghhBJKKKWUzjkIIYQQQgilhFJKKSGEEEIIIYQSSimllFI6CCGEEEIIpZRSSimlhBBCCCGEEEoppZRSSgkhhBBCCCGUUkoppZQSQgghhBJKKaWUUkopJYQQQgihlFJKKaWUUkoIIYRSSimllFJKKaWUEEIoIZRSSimllFJKKSGEEkoopZRSSimllFJCCCWUUkoppZRSSimlhBBCKKWUUkoppZRSSgkhlFJKKaWUUkoppZRSAADQgQMAQIARlRZipxlXHoEjChkmoEJDVgIA4QAAACGUUkoppZRSaiSllFJKKaWUUiMlpZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKpZRSSimllFJKKaWUUkoppZRSSimlAKjLDAfA6AkbZ1hJOisc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]],
		["keyrelease"] = [[]],
		["Lazer"] = [[]],
		["lobby"] = [[]],
		["MarioCoins"] = [[]],
		["MinecraftXP"] = [[]],
		["moan1"] = [[]],
		["moan2"] = [[]],
		["moan3"] = [[]],
		["moan4"] = [[]],
		["Neverlose"] = [[]],
		["orthodox"] = [[]],
		["OSU"] = [[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]],
		["pmsound"] = [[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]],
		["PubgPan"] = [[]],
		["rifk"] = [[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]],
		["Rifk7"] = [[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qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EETiD/AjAEQvAAAKBGAIheAAAUAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq]],
		["RustHeadshot"] = [[]],
		["scroll"] = [[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MaeUUowxxphTSinGGGPMOacUY4wx5pxjjDHGGHPOMcYYY4w55xhjjDHGnHPOMcYYY8455xhjjDHnnHOMMcaYAACgAgcAgAAbRTYnGAkqNGQlABAOAAAYw5hzzkEoJaUKIcYgdFBKSq1VCDEGIYRSUmotac45CCGUklKLyXPOQQihlNRaS66FEEoopbTWWnIthBJKSamlGJNSIoRQSkqttZaUEiGEUlJqLcaklIyllNJaazEmpWQspZTWWosxKaWUaim1FluMSSljXEqlpRhjLcYYo3trscVYazHGGJ9bainGWgsAMHlwAIBKsHGGlaSzwtHgQkNWAgC5AQCMUow555xzzkEIIYQQSqUYc845CCGEEEIIIZRKMeaccxBCCCGEEEIoGXPOOQghhBBCCCGEUErJnHMQQgghhBBCCKGU0jnnIIQQQgghhBBCKaVzzkEIIYQQQgghhFJK5yCEEEIIIYQQQgillFJCCCGEEEIIIYQQSimlhBBCCCGEEEIIIZRSSgkhhBBCCCGEEEIopZQSQgghhBBCCCGEUEoppZQQQgghhBBCCKGUUkopIYRQSikhhBBCKaWUUkIIIYQQQgghhFJKKaWEEEIoIYQQQgillFJKKSWEEEIIIYQQSimllFJKKaWEEEoIIZRSSimllFBCCCGEEEIppZRSSimlhBBCCCGEUEoppZRSSgkhhBBCCKEAAKADBwCAACMqLcROM648AkcUMkxAhYasBADSAgAAY6SUUkoppZRSSikZlFJKKaWUUkoppZQMSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZQSQgghhBBCAdgFGw6A0RNGElJnGVYaceMJGCKQQkNWAgBpAQCAMYw55xyUUlpqMbYKIeccdFBKSq3VGFuEkHPQOSglpdZqi7F3DkIIIZSSWowx1to7ByGEEFJqKcYaY+w1hhBCKam1GGONufYYQwehlJZirLXWXHvvIYRQ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]],
		["Skeet"] = [[]],
		["skeet"] = [[]],
		["SpanishMoan"] = [[]],
		["StaryKrow"] = [[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HU4MWZmXVzHnS25faefYdG4f4c9sIdUsOX6H4U/+DhD9GLX9swCdZlE+bZgyg/YkvTsVRChQwBJR+0MgoQieekEp+cUk//uAxOeAE5WdT+3I1UJHsuq9uRrkX4XGXfUah1kGHIFvQcSBV3S3CS1GRg41P1x4oP/6kwJqknHr9a0BiAJ0kAkkvvPfNv+gKDmL/LdFKRjHzuityPdd3MiorybSVcQtWfSzq/pzwScnvsWX31MT8E/0Cz/nQAakIILmSYmxb80CEy1hTkEGjUdoBCo7SBTU1pnBjzS2utJGgxIiNwNlXl2fHxaBSdpZc0kWAncyCxt/9QUSSRqPJFN6azqhUCFIgV47zI3NRzsYKLC+Yops/zEH6mnQ3mV8nB2aFKQy4b1kztt/kLPyOi06J/aUt0y5482L0n9zcQ2l53xZP39IXg4LS/lgA5UBQqbrzCJVuB9pypnZscFBakMvBASWq3Au2cRG5TiLzgZxBkoVhDDg0OTZmlwRAmcdluHabVOoDGKwoBuSh8JZ0WCXW9K/kBTLFK3tS9qX5sVFMrEw/fSLjw7PjwvnR4d1vSt6VjL/+2DE/AAPsZdZ7LRx6gIy6z2miuWgHWGfpv0K6kzKSkzSHpbSIzBO8YIaMwTojMgKSekNSehGwkF9UYIZuOhfLJmkUGcBoT0hOWQvnjKNZC4ZsRHbDh2w+shRnjL55CiPzpQZplBnhbJjKs4ZQTCE8M0ywrplB20rOGT8wZVnDKg7iXdjEjIgUo5bRJgZoFQD2JiJ8OcVIVQsAsQMELgbjYBw4nCIybPWn3WnNYf5rUNYaw2pNSaksNYa7NSYKhVDKSSy0opgm3Jku5UUxzOySVFKDTDSaIECUUoMGjSaKIVRSkkspNFMVRSkkspNFMVRSkkspNFMVRS1TEFNRTMuMTAwVVX/+4DE9QAR4Z9V7LR3K2A0av2dMWxVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7MMTtg87si0vnsGrIAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==]],
		["Steve"] = [[]],
		["swipein"] = [[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MaeUUowxxphTSinGGGPMOacUY4wx5pxjjDHGGHPOMcYYY4w55xhjjDHGnHPOMcYYY8455xhjjDHnnHOMMcaYAACgAgcAgAAbRTYnGAkqNGQlABAOAAAYw5hzzkEoJaUKIcYgdFBKSq1VCDEGIYRSUmotac45CCGUklKLyXPOQQihlNRaS66FEEoopbTWWnIthBJKSamlGJNSIoRQSkqttZaUEiGEUlJqLcaklIyllNJaazEmpWQspZTWWosxKaWUaim1FluMSSljXEqlpRhjLcYYo3trscVYazHGGJ9bainGWgsAMHlwAIBKsHGGlaSzwtHgQkNWAgC5AQCMUow555xzzkEIIYQQSqUYc845CCGEEEIIIZRKMeaccxBCCCGEEEIoGXPOOQghhBBCCCGEUErJnHMQQgghhBBCCKGU0jnnIIQQQgghhBBCKaVzzkEIIYQQQgghhFJK5yCEEEIIIYQQQgillFJCCCGEEEIIIYQQSimlhBBCCCGEEEIIIZRSSgkhhBBCCCGEEEIopZQSQgghhBBCCCGEUEoppZQQQgghhBBCCKGUUkopIYRQSikhhBBCKaWUUkIIIYQQQgghhFJKKaWEEEIoIYQQQgillFJKKSWEEEIIIYQQSimllFJKKaWEEEoIIZRSSimllFBCCCGEEEIppZRSSimlhBBCCCGEUEoppZRSSgkhhBBCCKEAAKADBwCAACMqLcROM648AkcUMkxAhYasBADSAgAAY6SUUkoppZRSSikZlFJKKaWUUkoppZQMSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZQSQgghhBBCAdgFGw6A0RNGElJnGVYaceMJGCKQQkNWAgBpAQCAMYw55xyUUlpqMbYKIeccdFBKSq3VGFuEkHPQOSglpdZqi7F3DkIIIZSSWowx1to7ByGEEFJqKcYaY+w1hhBCKam1GGONufYYQwehlJZirLXWXHvvIYRQSmstxphjzr33kEEnKbUWY8+11t57jKWkFHOssdZYa+89thJSaq3WWGuttffee4sptRhjzbX23HvvvaXWcoyxxlxz7b33XnOLsdWca6459t577z3G2nrrueZae++9955rrbn33mvvvffee6+1tpxy7Lnn3nvvvedea465995z77333nvPucbae829AIDcCAcAxAUjCamzDCuNuPEEDBFIoSGrAIAYAADEGIMQQkgppZRSSimllFJKKaWUUoopxZhiijHGGGNMAABgggMAQIAV7MosrdoobuokL/og8AkdsRkZcikVMzkR9EgNtVgJdmgFN3gBWGjISgCADAAAcVhzjrHWCjlpLbZYS4WUg5RijR0ySEGJtaYMGeSg1ZY6hQhiElspHUNGQYstlVAhxCS2llLomJPWYqythFACAAAgCAAwECEzgUABFBjIAIADhAQpAKCwwNAxXAQE5BIyCgwKx4Rz0mkDABCEyAyRiFgMEhOqgaJiOgBYXGDIB4AMjY20iwvoMsAFXdx1IIQgBCGIxQEUkICDE2544g1PuMEJOkWlDgQAAAAAAAIAHgAAkg0gIpqZOY4Ojw+QEJERkhKTE5QUFQEAAAAAAASADwCAZAWIiGZmjqPD4wMkRGSEpMTkBCVFJQAAEEAAAAAAAAQQgICAAAAAAABAAAAAgIBPZ2dTAAAAEQAAAAAAAExTAAACAAAAX3uvdh4B//++Z2ZnaGWgnJaTam2XoZyWlZhtdW5scXSUq58AsuQr5/LOmwExLG0IlnzlXN55MyCGpQ3Bo1CmTCHLlioURCEUolhaVCgpiSwtmyU3iqlYmqSQyRDUalVMW7tWRIwVtbUigIghaipqa2s1raaqqahJA21M2wp7pqlisRiCCKCqcOZ55rSNabF5TisyOi2b2jjPnFZ0tZGYYEwk7ITwVhtGOrMFHlqUPTfbIJjYiAgXzjlVSgIAgGBJgICFIAiDEABOJBJJEBYhYiEiQAGAYZxIhHEIkBAIC2GwKELkyDgyAEaInBAYZ4wT45wzYgyAARIj5JwjQ2KMhUlMkoiJ6AygSAAgmUwGQdJYdAqAJGgAwBgwQAbIOCJCBGZSTBZB0miYQbFoQNIpFo1Bp4DEBKYzaXREMjDJpFiITmPRgYVomAEEAyiMgMWkEEFQGBhMik7SmSyKQbAoGpAkk2DSWAjT6CSDTgAgOoNi0GiIYpAIEYhBkTREBzqLIBksOgsxgCRIErHoNEQDYDDoBCZJTCBMpxCQLBYwSRqdooCG6XSgseh0JovJJFmYQUcMFsFg0ljAZDJIOo3JlSqiwLnAiBMXCVBgRCSVEnIplygICiQliYQBMAFRoowygkgSCYlSqVQEBSUyiZSAAAEYipzJlCiASIiChIGoqFREJsgEEEVClChRkMhkgsCAc04oYSigKJfLRZRIJAICEDKSc4mES4Ehk8kYMhSVKkpFQgaiCCBVymVKJCSXSznKFGQyiSBRkIAoFZGRKIocmEyGnKWmSsQgViHALBVRALmiXCoVOSJxYAyIEEkuBQHlykpRECQSkIoETCZDEMQQipCaEgRAKMgQGAMuciAuEkJVVVYUghBCCEFAIidgAhMVpYgkqpqampqqVDVVhpTMqmRWNZnAJMBSMqBoKIKEoqGhCIBISlIEKRqKQgCklKoEs5RMACjEJtDSEro1AfoIACz5YAIFbhj8kg8mUOCGwfvstVetdiyCOqxUx2IYKOCAjDgAJjGmmECnWASTIIAUBKlSqVIloiarmgppKBLOZUoUSCYQU0JSRRCqKoRUWWhKCBIqSJC4jKFUmUiqJEHkDEBGS2y6YgME9ZwGHBQMN6jnNOCgYLi5tKREISOjQzJ6BCExQAAEGCKSEBaBWBRBo5HAAhYNCImMK4CMZKgoEaVKFLkmqxokSHCJRCoXiAvIQYEzUEJcJAZSTamqmiwJ5YTKIHKSMeBIXBUgdYsE+cTE5iFReBXkExObh0ThlT+jnIxEH5KUksQABkIRnITgLCamseh0GpMoK0GpIKASJEGpVMolXABBURlBzhkIpKAUmLKEjHMgmQBAUiaCgsBBQC6VAZIQQkhSNQ0ajYQbtxSWbn0EHPXEDE6WQn/UEzM4WQp9Vq7SyGQcxghDSoZiiAAjWBJCxLIozKBRJEEhhAAzaCTFpBEsRKGUCzIljEmUlYicMUGQghIUSSKXMlGiyLgQIBJCFYFzIJRpCtJUmKTCCrEkAW/SGPumNQD89ISACVDofnpCwAQodLlMoVQmOUgphCQATIAQAoYEmCyCSUMIg1RRKWOgjEyuVCpwUZQhSJTKmUzCJKKiIgoEXCYIHDUkqwqrCnIuVyQpsYSqMqtyIhK5gMAVQAoIrBIAQmz6BlzpBC+n5nSHGnilE7ycmtMdauCUlESxNAslhmnXVuzYYylWu3atFjs2hqG2phUJi1hVbCx6Trt2Zhubbdg5sdnGado4s91TT2wSGBTgACaRkANxzolzZMAJkREwzolxxhgBsBgsTKfodBqmIxoCiiRYLBYdAQ3TWJhOQwTJwDQMJIsiMYskgEnHQFDAJEgawSKYSEHGRKkITCEwM6hFHwFsLvsmM1QGaoLNZd9khspATXBZtrxZRrFASUaUnSQUslRETcO0laqtiGmIVQxbi8Uq6qLLRQ3stbGxG4ZhVw1EJ5el1e0xOg8DxXGUiIVRAgoTSCgJg2BJGCIGIZEYA+TAGRIwRAaMISBxoCEaiyCZTIYISIxxhsCJEDMoRAcmIglE0Sk6jUmxKBpFZ5BMGsVEDJYoykQSOHQF0ABsOtcVGE1seA256VxXYDSx4TXkloXKpkJGkSwpNVHMQmkh0yLY2CtoDdPGCrYW01Sshq063ZGigkWxCbs2VkNNkc5siCC2IuYeiw1wCMgBOUKypAhEDBaGYAAhRBjGsRBnDBhHROLEkDFOjBgS0kgmptEJBgAnTpwjA0IGnMAYsVgEQs4AOUM6i8Wk6BRLhkxknGFrFAHcGevoQMg6sLwz1tGBkHVguQ6QhWJEKB2FKIgstSNWsVgMqWmqxdawWNWOqQYW09GNWmwQxHDaHcPWFBG1Wp5StARAaZBYEoJCME6CiTBKIBJhZMCRA0ciJCIGjDFiSARJZyGKgZAQERljURjTmYjBGefIGRF0ikAUECQTEwgImg+DHV90iJBiA6XAlCIKpEAwAAD8+XznEgCHcf/5fOcSAIdxZ1koW6ZAmuWPsJLlCFIQAAtIMIwQYSam0UgGBYiOgQWIAjoLWEAHKUNRqUQKUmU4ABeUkcplikxRgWtoQApAIAHJgBgnUESQcZSCKCiICFVDU2GwkCqDwZoejOmi3qsZFj4PeUwX9V7NsPB5yFlEueUpBuPUSD2WlAwFACegCBHGAAUkYKAzCExnUAQDMTBJAIspQZJxkCjKpEpAkRBFVGAkMAEVRKmilLggkcoBkAiIKxFBIjQZJJmJSKJEwlFllpIJCjEAAJTxTDbTNFMoZTyTzTTNFMo6gLJCoViS7LVjVRM7NkURKcsUDFurYNpaDNOwqlG1CjagCLa2iOFsEtNiA0oxbNQ0UFG7pmCqcgFFlgkwjCWgAOCAnHOOgBAwKBbBEAgBgYBxJMYYR8YJORBH5EjEOSZYBBMTLGQIyBAYEHBgwAEBOCcaZlCIBGxxQgXGDYUeKdwaksZGqx7c8QRHx8iiwfDveIKjY2TRYPjPKJRHsWxphoySgsnMYkZJiY3FEFXDphasJoJpNcViiGETdsTWatgYZhenYpoKpq2tCYjFxuLUbsYpSSIBglACTiACHKAAoASUAHAIwEgIQBwZIREgY0icOAfOGXLgQLAQIkkaRcA5ASIRMs4BEINikggTTApRQKcTXBllUC4lFOVSpowglbOAZKGQQVeCBPQVKTNV8qIDHij7ipSZKnnRAQ+UK6KSihlpGKp2bGztToiMKBOG2tjaqMX0mCSIVFK1R+2KXVFsVBUxXbCGrR3TYhUNQcRiK5rHQSAMCZJ4+CSIcTgCIOMcwmGUiGIIHIlzQqIxWRgxSRoJAxASEUeIcQbEEYgz4Iwwi2Cx6BSTMQ7AODLknANjTIKFgQCGMnKBAxMRAiQVplYhANwJOdHPLI9foUf3nZAT/czy+BV6dK9ERmWVslWwa8euzbMQmUpCSSo3ZFGxYwtqYyuKmBo2aqg9hl1Dh9uwYlF7BAyfGqbFXsOERLjEhOSwpPGxSEhEnMEAwhCJCIwTUJRIxBKRA2fIGGcMCIEzBE7EgE5hkkIkRaMIFsIkhRyJMySGQACMMRkqJZnIWJWAwuSOklQiApz1FHHZk9d64ERnPUVc9uS1HjjRKcnylqe0UJQiSkonM0WWlLXFNNRiKzXsiFpVsFULAvYWROyKgYjamAiWmcex0flDZFmJBDiRCJNglEiEMTiBiAVEAomIEAGWAUPgyIEhZ4w4ZwyAgJARABIS5xw4cCZBMQgaCwiCIhgEohEIBCIBYDBcUQkDqYBSk5k1SbjxwQeDnPksMJV6kb/oznwWmEq9yF90F1FOeQslkTIzy81kFRUb07AplomQUazFUBswrFbEEDVtq1YDi1VFRQzDxlCXMFWtihCmBXusdpVtLUUECIZIJIRAwGEAIRAGABjjwIgwToCwBAQQgBgnAM4BGGccCZE4Y0AMOQFJIoqOSWKcAzAOxIAYAkmnaARB0SVYUUlVNDWYpALq1gqE6RzmEJj8Rhemc5hDYPIbXZiGvWKv1QTJt4ttZs4ihYQjAiAgQiYdGHQmQWdgOkUCCwNBAUFj0hBJUCwGpnGZhJicSQEVuUTOGAOQKBGZRMZAqsiJmARUlgJJLidOpEggEgdmpDBokVVQWGgAtO0MMxvjxY4ZQOPs23aGmY3xYscMoHH2ixTLReInrZH2TAzjE8AWBUM4xDhYMoQI0IDJoGGCxmAAxogEgqToJEEiIsaQGAAXpIpKuDKoLIKUKyNqgoXCipAIHCVyZVFDlQKQEmSEAgGBAkcUCAhChWGI+iACrOUocwhjSuOirOUocwhjSuOi+GWhbGQyk6nFVhpIqjJIgIUABkcxBERj0ChEYJIkaSSJMIVoJEWnkSSwKJIkCAITJIOJQCqTclAQ5VwRRQkjREHgMolUrsGCmBVNlqyylCqpYMmsCFaJmYjSQgCk6QBwofxgVAw3TQeAC+UHo2K4flG2tCSSZkPnYq0OhkoMwCQChkQiADodM2kE0Ck6kAgIRGMAIBZQGFh0IChSEKVSZZgoAImKCiARQJRzIi5I0oCiglhAlayAEXCZTAIyAIERoUE3Roqu2AOc7ajooskU5wHF72xHRRdNpjgPKH45slC2JGCWF04+EyFUTnBEIhKIWAgGNCBZJAshRJCIxWRSNEzHDEwiAIIiKIS5FJSisjJlubIgMs5RrqycRDkgMzQESRUljMlAkEtiRZAqIKUkVqHCQqoCXmTQA0zpROBHlvJrnRHjTulE4EeW8mudEePmzMwyZaQQJnJw8DuoR7f0QhAIwkkwiiNExGKQFGDADAaDziSAQCSdgWg0oGMEQAGLCTSSiRAm6JggMclkoozJkUiFBAtw4CKTyDkxlClLiEyskgAxNFhIZq2NGGMEbP08loTxU/xi3Pp5LAnjp/jFOKmcgjLFEjUsYge7NsmuLVar1WpTophRDKGm2pqY2mZ0tWDXsIBYDcMEJbDaiCoGe9QWtWA1MayGiAgkIqEYCIsTUWJAjAEDxokACJCIOE6EiMSIcUQiCDqJCJJOHDhHJE6ccWCAhMg4B8SisRgUiTkSMM4AOQIDYFJRSEIKSsjQA5ThXOwHUrIvcAM4y3Au9gMp2Re4AZxTEsUsli0ttbVarVar1ba2du3aNdWwsbGxoKZpDROx2NhYxHmeNVUsNnbs2LEYgqqppm1b58m1LWJYLBZDkJSEY1AcJQDixDkwzhEZB0YMiDFGiMSQAzDEIphMikYj4MgY4wwIgDMi6STFZBI0ikZgoGgEi0Yy6EyCzgAYIKBcqVKlyirKpXKpKBIRZwaREIqiKAoRACQODTbppFtLRiWJQ4NNOunWklHJJssjSgPFKJZk1a7FME21Y2NaMEx77OaIlGXY8zhzgUKhLKHdMNTG1mJiJEfYWMWuoaLRGZLAJU2aCBAyZBAEgjEoBsORISIhASPGAEkwDiAiTsJ0gs7EBAVDOIrBEBEGi8QsBCTjyDkDTlAMOtBpBDFgHIGxCBZmUTQWWJJUJDz11NuNVKRgSegKAE9nZ1MABCAcAAAAAAAATFMAAAMAAAAjYmX7D6KdmpeXm52M///T//+KARwaKXR0I4muisE5NFLo6EYSXRWDM7KkbNksN23tqqGGWKZQpiCKWbRjqtoaBsXWaoqNjWExMK1WE9szz/O0Yaphjx1DrRmbPsSwsRgoQ2CxOAaDYBHgBIyQY0k4CYOBCEDICAE5MEQixgE4ciIWk6AIFmIBopgkEExgDBgnhoGFaHQmJoYAxIErKCMDUc6lKjVVSUImCIJMIoCqqamqkhH6biQqCXCQtYkYdZKoJMBB1iZi1MmmtDyyoCyhtEQtdu2x2oPaYNdiWi1iDUOwx6oGu9tNKCkqFtKwtZiGmIbP1saqFhXCamMVwzRUhyBRlCwxATkSZIkEDBEmEgBHxoA4AiFnhISIwIlxIFlAB8Qi4AgOYUhYjpyAA2fAkTgh5wTACRDBBBYAKIgSEZArSEWQEXIgSCIWGipIEoENAQAcFqVyAZmROMRhUSoXkBmJQ6xklEYUK1jFFrWx2DtRNmRJhl0bixUxbN1xnqF2LRhgW0y7NmoHFUUN045hzJE5wsZqxQbTch6zygDCkCCJj48hDciRM0ZIImIgFMdRxoghJ4ZZTCaBmDTkxDgSQ2IMOSBHRpwDsQgmg2AQmCSYwCBZAMiQEIFJsJgUCxDQMI0EGuGp6akc+64AzAVF62KFZh4s54KidbFCMw+WWyovZBRLSFmmkOxaDKspdihLFEPU1jBMtTUw1EatWMyw2KIqhu4xqqaqYLWYamMKKoGt1bBipY0TB2HxCMggBCQRAgELEYkEAkdiBMgxMBZgSQAFxokRcCJkxJCQESISo2OEgIUQQ8YZcWCcOEdghMgYICNZBAEUHSnhTEoCcVWDrspeBNT5VHClE+KEA67zqeBKJ8QJBzwhylumNEvV1rSxKzY2ybTHtDVMW0oLMmWhVjFtUFNA1SJix3VnNwamjcUQwkYNqyqYOUPExjANdCNxYAQUIRIRCGXEiDgxzgGQEaFEQMBACE4AnCNjhETEESkaQkAyWcQYR+KMABEBgAk0gg6I4Aw4EgEDE0ygE4SCBElgJBj6oCAoAACM8QQvJyeUE45jjCd4OTmhnHAcK5mFygh2bewIdsTeKUZGZJYKhh2rGlobxTTUMCxqGmrX0EAEsbGYzgkXzrRiqqliyYWSkoJMp0UxDAGGCBeXJAaRATJiBAyEoACDIyFnnHEgzpGIE2MABMiRAwNkNIxZLAaiEyzEotPpFENARGAwhAAUQAQaJhHQMZaA1BQspQqhCAWeLSDoAaztBAuCEAnT2k6wIAiRMD1Li1GmEIUsW0iF9MhSxSjNkpQR0umGYcWC2ho1TBUrNrY2iqiNSUFsEUQVrBZbw182SsqNYgZLlwcbA0hYEkTC4FgShGMQBIZRgEAwgkFwLE5AcCaTCQAsOkfOEYkzICREZJwRADHiQAyRAUfGGOMQAUNCiEQCCXREp5M0ZZnAOSEyGFABBSYKIAJveq289bgFhqiG6a3HLTBENUynTGmUN7NQEqFA7dpjr6limHas9lrUMKUqdgVDbWythikqdp09VlEMxca67iAd/sgsp2whkYCIIRABAcKSICwGwaCAASBDRhw5ECPOGQfGiCNHBkjAomFEp5gUJ0DOiANQiMEEFglMgoEwDYOjMMABLIhIgpwBaTBAzEaZArrks4J4zUEpA4yWfFYQrzkoZYDRk8UsLRuKCiVkiGKJDEWFQjlRKD1LylNSiJDIzCI4co5CZurQjsgiwyxsURGLGBigVunmZJthj6A7rYqNYRExLaiAYVpMVQwMMBBDLTmsPNvDMFQFtdpYVUEkKsSZSYYkPJhUK0wn6CC8buwe0nRjEREJ2Ah7MIm4EKQzDIQRZCgJADARRgAB4FgEhXAsSsIhLJaAYDAQBpAIRCLA4oCII0QMgEgEAhFLpFgkwjQgEZ2GMEHSMR0YLJLFoAGTRafRCZJBYBqdRWcgFoPJolEki0ZjMkganYFZJLAwEDJAxoGAEIAw0DFiAA2x6IhGIBYmKBYL05iYpLMQEAQCISExQuCMcwIOxAgAGUPOGCOYTIJOsUiSzmSwaDRMnDgnImIACAQ0FtDoLBadotMRIliIQTDpLAamM+lMJqYwAIWZCCNMkQgYBItOAJMiWTQaRWIGncQUg2Kx6CRiEQwKISAQxaSRNBYQwGRSNDrJJGlMisFiIooJBEURBItJUphOwwCYRIhFY2EWncUk6SSDThB0jOlMAgGDwBhIkgKSwSRYQKMIFiaYGJM0DCRKlUpAZIwkTFmmqFRZhiIXuaIgIjGBczmAUgUCKQdCAImyoohEClKJTIEBiDJQVlAkJhLJRKaMXOAMFCVSQakgkhJkysiZSBxIDqLAZMQZgKAoIQIEIIGBVAAgUkARmFwiiDIGJHBBlIlKFAUpIwSQygUpA86kKGWcUE4EiISEIBdEpohKGcrkjJHIiZRwAoEIJcBF5ApykXPGuAQkCKRAEiQmlYMgl3CJXCYKHBElhAJgIpJgwYI1pISmBmuoYIUUUjSIEzEZA0AOJHAODEBkcmQAAFwABgAciVCUIHIEOUiyVFhIEopUJAS5wIEACAGRAMEMJskqAczg7tgVNa3dpgnSUxiBlta+q2nVJeijqEGrHgA+5ZMdqU/JUMTBXqC1KZ/sSH1KhiIO9gKt1XEEdJ09jjh6hK7rco/AcUy77Dqm6xKmK47jOGKP4zBdFyNQMS1WiykqpmFKp+s6TOo6pkudI3RdpiOA1HWA3TlAbUDXAURHAOfCZg+IEFRnlKEAABAsEhPAwhhhhBHJJADRGEAnCBYdGCwWRVIMBjAJRFIMCpgEnaRYDIJEACQLAR0zCJLJZDLoLBZFEgwGQhjoFGBE0ll0YGFEYxGACQaLIAmSICkWi86kIUA0Oh1YmEaRwBAZAUdCREAEGosiARCDQQAmMMmiMxkUk0Q0BkFSDBadJFjAIgkGDeh0kqDRmSTFIjHCgAkGk4YpGkaIRWIEGCEanUFhhFmYxWSymAwCgMZksOiISWMhgkaRBI1JYaAxMJ1B0egsJoPACCMaA5EMIEgAhIFiYQBMMUmKSQIgjJBSgQgAAFCUKVUiBSYKUgVlFTiXKUqIC6LIOBNlShU4MUJAkCKKMkUFuYQjMVGmFCSKClxUUGSCooLIpMogIQFyJgqcBE5KoEhWJAgsVA1NEhCqABMLTQ1NDUlQkEs4IHGJXAAukcs0NVSFISQBAKkaUkQOEkWZlBEwUcJZ0RQMgImJARDjglxBqQIHBC6RChyBBJGhXEFRIjLOVA1NQaqGpgKpoQowIAEQACEX5DKpQIRAgiiRK8gFlCooKkgFjsREgXOZooKUAZfIJRwAOeMISAATAyxURRVSyK7QtAJYSAJJoQomsKKpoQqGUAVYUQWzIJUpykQEAgBiHEhVJIGJCQATQ2hqqERMYAILcEEqEEkUFeQCcEakqIoEMUgKSWBiEBOpGqpgEIPcUTUSSqVp1KorgNZWfRe0RgAO]],
		["swipeout"] = [[]],
		["TF2Crit"] = [[]],
		["TF2Default"] = [[]],
		["uwu"] = [[]],
		["Windows"] = [[]],
	}
end

local soundPath = Library.directory .. "/Sounds/"
if not isfolder(soundPath) then
	makefolder(soundPath)
end

Library.__index = Library

local EntityClass = {
	Main = {
		Cache = {},
		Functions = {},
	},

	Misc = {
		Cache = {},
		Functions = {},
	},

	Global = {},
	Flags = {},

	AnimationSpeed = 0.15,

	IgnoreNames = {
		["HumanoidRootPart"] = true,
		["WeatherPart"] = true
	},
	FontSize = 10.00;
};

local Visuals = {};
local Globals = {};

--#region Globals
Globals.LastArmorCheck = tick()
Globals.LastWeaponCheck = tick()
Globals.LastAutoReload = tick()
Globals.EntityClassUpdate = tick()
Globals.LastShootTick = tick()
Globals.LastBackTrackCheck = tick()
Globals.LastManipHitScan = tick()
Globals.ArmorIds = {};
Globals.ArmorNames = {};
Globals.FlaggedStaff = {};
Globals.RaidEsps = {}
Globals.QuickStackFunctions = {};
Globals.LPAdornments = {}
Globals.ClientCharacter = Client.Character or Client.CharacterAdded:Wait();
Globals.HitSounds = {}
Globals.HitSoundNames = {}
local insert = table.insert
-- haha optimization go brr
local math_max = math.max
local math_min = math.min
local math_abs = math.abs

for name, data in hitsounds do
	insert(Globals.HitSoundNames, name)
	local filePath = soundPath .. name

	local dir = filePath:match("(.+)/[^/]+$")
	if dir and not isfolder(dir) then
		makefolder(dir)
	end

	local bytes
	if syn and syn.crypt and syn.crypt.base64 then
		bytes = syn.crypt.base64.decode(data)
	else
		bytes = crypt.base64decode(data)
	end

	writefile(filePath, bytes)

	Globals.HitSounds[name] = getcustomasset(filePath)
end

local CheatTable = {Locals = {}}

CheatTable.Locals.ToolInfoCache = {}

Globals.DeepCopy = LPH_NO_VIRTUALIZE(function(Table)
	local Copy = {}
	for k, v in pairs(Table) do
		if type(v) == 'table' then
			Copy[k] = Globals.DeepCopy(v)
		else
			Copy[k] = v
		end
	end
	return Copy
end);

local Modules = ReplicatedStorage:WaitForChild("Modules");

local ToolInfo = Modules:FindFirstChild('ToolInfo')

if ToolInfo then
	CheatTable.Locals.ToolInfo = require(Modules.ToolInfo)
	CheatTable.Locals.ToolInfoCache = Globals.DeepCopy(CheatTable.Locals.ToolInfo)
end

Globals.ApplyTextStroke = LPH_NO_VIRTUALIZE(function(Object)
	local NewStroke = Globals:Instance("UIStroke", {
		Parent = Object,
		Thickness = 1,
		Color = Color3.fromRGB(),
	})
	return NewStroke
end);

local hasProperty = LPH_NO_VIRTUALIZE(function(object, propertyName)
	local ok = pcall(function() return object[propertyName]; end);
	return ok;
end);

Globals.LagChams = LPH_NO_VIRTUALIZE(function(player, color, transparency, lifetime, useSmoothPlastic)
	if (not player or not player.Character) then return; end;

	local character = player.Character;
	local partColor = color or Color3.new(1, 1, 1);
	local alpha = (transparency ~= nil) and transparency or 0;
	local timeToLive = lifetime or 1.5;
	local material = useSmoothPlastic and Enum.Material.SmoothPlastic or Enum.Material.ForceField;

	for _, child in character:GetChildren() do
		local isRenderablePart =
			((child:IsA('MeshPart') and child.Transparency ~= 1) or child.Name == 'Head')

		if (isRenderablePart and child:IsA('BasePart')) then
			local clone = Instance.new(child.ClassName);
			clone.CFrame = child.CFrame;
			clone.Size = (child.Name == 'Head') and Vector3.new(1.18, 1.18, 1.18) or child.Size;
			clone.Color = partColor;
			clone.Material = material;
			clone.CanCollide = false;
			clone.Anchored = true;
			clone.Transparency = alpha;
			clone.Name = "ignoreme"
			clone.Parent = character;

			if (hasProperty(clone, 'TextureID')) then
				clone.TextureID = '';
			end;
			if (hasProperty(clone, 'UsePartColor')) then
				clone.UsePartColor = true;
			end;
			if hasProperty(clone, 'Adornee') then
				clone.Adornee = nil;
			end

			Debris:AddItem(clone, timeToLive);

			if (material == Enum.Material.ForceField) then
				local tween = TweenService:Create(clone, TweenInfo.new(timeToLive), { Transparency = 1 });
				tween:Play();
			end;
		end;
	end;
end);

local Original = {desc=nil,scales={},colors=nil,clothes={},faces={},meshes={},accessories={}}

Globals.MorphTo = LPH_JIT_MAX(function(idOrName)
	if not Globals.ClientCharacter then repeat task.wait() until Globals.ClientCharacter; end
	local hum,ch = (function() local c=Globals.ClientCharacter; return c:FindFirstChildOfClass('Humanoid'),c; end)(); if not hum then return; end;
	if not Original.desc then
		local ok,d = pcall(function() return hum:GetAppliedDescription() end); if ok and d then Original.desc=d; end;
		for _,a in ch:GetChildren() do if a:IsA('Accessory') then insert(Original.accessories,a); end; end;
		for _,p in ch:GetDescendants() do
			if p:IsA('BodyColors') then Original.colors=p:Clone();
			elseif p:IsA('Shirt') or p:IsA('Pants') or p:IsA('ShirtGraphic') then local prop=p:IsA('Shirt') and 'ShirtTemplate' or p:IsA('Pants') and 'PantsTemplate' or 'Graphic'; Original.clothes[p.ClassName]={value=p[prop],had=true};
			elseif p:IsA('Decal') and p.Name=='face' then Original.faces.face=p.Texture;
			elseif p:IsA('MeshPart') then Original.meshes[p.Name]={id=p.MeshId,tex=p.TextureID,size=p.Size}; end;
		end;
		for _,cls in {'Shirt','Pants','ShirtGraphic'} do if not Original.clothes[cls] then Original.clothes[cls]={value='',had=false}; end; end;
		for _,s in {'BodyProportionScale','BodyTypeScale','BodyDepthScale','HeadScale','BodyHeightScale','BodyWidthScale'} do local sc=hum:FindFirstChild(s); Original.scales[s]=sc and sc.Value or nil; end;
	end;
	local uid; if typeof(idOrName)=='number' then uid=idOrName elseif typeof(idOrName)=='string' then local n=tonumber(idOrName); if n then uid=n else local ok,v=pcall(Players.GetUserIdFromNameAsync,Players,idOrName); if ok then uid=v end; end; end; if not uid then return; end;
	local descOk,desc = pcall(Players.GetHumanoidDescriptionFromUserId,Players,uid);
	if descOk and desc then if pcall(function() hum:ApplyDescription(desc,hum.RigType) end) then return; end; end;

	local a=gethumanimator; a=nil; a=(function() return hum:FindFirstChildOfClass('Animator') or Instance.new('Animator',hum) end)();
	local before={}; for _,t in a:GetPlayingAnimationTracks() do local anim=t.Animation; if anim and anim.AnimationId~='' then local spd=1; pcall(function() spd=t.Speed end); local w=1; pcall(function() w=t.WeightCurrent end); local tp=0; pcall(function() tp=t.TimePosition end); insert(before,{id=anim.AnimationId,loop=t.Looped,spd=spd,w=w,tp=tp}); end; end;

	local puppet = Players:CreateHumanoidModelFromUserId(uid); if not puppet then return; end; puppet.Parent=nil;

	for _,n in (hum.RigType == Enum.HumanoidRigType.R15) and {'Head','UpperTorso','LowerTorso','LeftUpperArm','LeftLowerArm','LeftHand','RightUpperArm','RightLowerArm','RightHand','LeftUpperLeg','LeftLowerLeg','LeftFoot','RightUpperLeg','RightLowerLeg','RightFoot'} or {'Head','Torso','Left Arm','Right Arm','Left Leg','Right Leg'} do
		local s=puppet:FindFirstChild(n,true); local d=ch:FindFirstChild(n,true);
		if s and d and s:IsA('MeshPart') and d:IsA('MeshPart') then d.MeshId=s.MeshId; d.TextureID=s.TextureID; end;
	end;

	local pHead=puppet:FindFirstChild('Head'); local dHead=ch:FindFirstChild('Head');
	if pHead and dHead then
		local neckParent=ch:FindFirstChild('UpperTorso') or ch:FindFirstChild('Torso'); if neckParent then
			local neck=neckParent:FindFirstChild('Neck'); if not neck then for _,m in neckParent:GetChildren() do if m:IsA('Motor6D') and m.Part1==dHead then neck=m; break; end; end; end;
			if neck then
				local C0,C1=neck.C0,neck.C1; local headCF=dHead.CFrame; dHead:Destroy(); local newHead=pHead:Clone(); newHead.Parent=ch; newHead.CFrame=headCF; neck.Part1=newHead; neck.C0=C0; neck.C1=C1;
				if not newHead:FindFirstChildOfClass('FaceControls') then local srcFC=pHead:FindFirstChildOfClass('FaceControls'); if srcFC then srcFC:Clone().Parent=newHead; end; end;
				for _,n in {'FaceCenterAttachment','FaceFrontAttachment'} do if not newHead:FindFirstChild(n) then local at=Instance.new('Attachment'); at.Name=n; at.Parent=newHead; end; end;
			end;
		end;
	end;

	for _,att in puppet:GetDescendants() do
		if att:IsA('Attachment') then
			local sp=att.Parent; if sp and sp:IsA('BasePart') then
				local dp=ch:FindFirstChild(sp.Name,true);
				if dp and dp:IsA('BasePart') then
					local da=dp:FindFirstChild(att.Name); if not da then da=Instance.new('Attachment'); da.Name=att.Name; da.Parent=dp; end; da.CFrame=att.CFrame;
				end;
			end;
		end;
	end;

	for _,a2 in ch:GetChildren() do if a2:IsA('Accessory') then a2:Destroy(); end; end;

	for _,acc in puppet:GetChildren() do
		if acc:IsA('Accessory') then
			local clone=acc:Clone(); local handle=clone:FindFirstChild('Handle');
			if handle and handle:IsA('BasePart') then
				handle.CanCollide=false; handle.CanQuery=false; handle.Massless=true; handle.Anchored=false; for _,c2 in handle:GetChildren() do if c2:IsA('Weld') or c2:IsA('WeldConstraint') or c2:IsA('Motor6D') then c2:Destroy(); end; end;
				local hAtt; for _,hChild in handle:GetChildren() do if hChild:IsA('Attachment') then hAtt=hChild; break; end; end;
				if not hAtt then hAtt=Instance.new('Attachment'); hAtt.Name='HatAttachment'; hAtt.Parent=handle; end;
				local cAtt; do
					for _,cand in ch:GetDescendants() do if cand:IsA('Attachment') and cand.Name==hAtt.Name and cand.Parent and cand.Parent:IsA('BasePart') then cAtt=cand; break; end; end;
					if not cAtt then local head=ch:FindFirstChild('Head'); if head then cAtt=head:FindFirstChild('HatAttachment') or head:FindFirstChild('HairAttachment') end; if not cAtt and head then cAtt=Instance.new('Attachment'); cAtt.Name='HatAttachment'; cAtt.Parent=head; end; end;
				end;
				pcall(function() hum:AddAccessory(clone) end);
				if clone.Parent~=ch then clone.Parent=ch; end;
				handle=clone:FindFirstChild('Handle');
				if handle and cAtt then
					local aw=handle:FindFirstChild('AccessoryWeld'); if aw then aw:Destroy(); end;
					aw=Instance.new('Weld'); aw.Name='AccessoryWeld'; aw.Parent=handle; aw.Part0=handle; aw.Part1=cAtt.Parent; aw.C0=hAtt.CFrame; aw.C1=cAtt.CFrame; handle.CFrame=cAtt.WorldCFrame*hAtt.CFrame:Inverse();
				end;
			else
				pcall(function() hum:AddAccessory(clone) end);
				if clone.Parent~=ch then clone.Parent=ch; end;
			end;
		end;
	end;

	local sSh=puppet:FindFirstChildOfClass('Shirt'); local sPa=puppet:FindFirstChildOfClass('Pants'); local sSG=puppet:FindFirstChildOfClass('ShirtGraphic');
	local dSh=ch:FindFirstChildOfClass('Shirt'); local dPa=ch:FindFirstChildOfClass('Pants'); local dSG=ch:FindFirstChildOfClass('ShirtGraphic');
	if sSh then dSh=dSh or Instance.new('Shirt',ch); dSh.ShirtTemplate=sSh.ShirtTemplate; elseif dSh then dSh.ShirtTemplate=''; end;
	if sPa then dPa=dPa or Instance.new('Pants',ch); dPa.PantsTemplate=sPa.PantsTemplate; elseif dPa then dPa.PantsTemplate=''; end;
	if sSG then dSG=dSG or Instance.new('ShirtGraphic',ch); dSG.Graphic=sSG.Graphic; elseif dSG then dSG.Graphic=''; end;
	local sCol=puppet:FindFirstChildOfClass('BodyColors'); if sCol then local d=ch:FindFirstChildOfClass('BodyColors') or Instance.new('BodyColors',ch); d.HeadColor3=sCol.HeadColor3; d.TorsoColor3=sCol.TorsoColor3; d.LeftArmColor3=sCol.LeftArmColor3; d.RightArmColor3=sCol.RightArmColor3; d.LeftLegColor3=sCol.LeftLegColor3; d.RightLegColor3=sCol.RightLegColor3; end;

	puppet:Destroy();

	for _,info in before do local anim=Instance.new('Animation'); anim.AnimationId=info.id; local tr=(hum:FindFirstChildOfClass('Animator') or Instance.new('Animator',hum)):LoadAnimation(anim); tr.Looped=info.loop; tr:Play(0,info.w,info.spd); tr.TimePosition=info.tp; end;
	if Globals.ClientCharacter:FindFirstChild('Hair') then local hairpart = Globals.ClientCharacter.Hair:FindFirstChild('HairPart'); if hairpart then hairpart.Transparency = 1; end end
end)

Globals.Unmorph = LPH_JIT_MAX(function()
	if not Original.desc then return end
	if not Globals.ClientCharacter then repeat task.wait() until Globals.ClientCharacter; end
	local hum,ch = (function() local c=Globals.ClientCharacter; return c:FindFirstChildOfClass('Humanoid'),c; end)(); if not hum then return; end;
	if Original.desc then pcall(function() hum:ApplyDescription(Original.desc,hum.RigType) end); end;
	for n,m in Original.meshes do local p=ch:FindFirstChild(n,true); if p and p:IsA('MeshPart') then p.MeshId=m.id; p.TextureID=m.tex; p.Size=m.size; end; end;
	local head=ch:FindFirstChild('Head'); if head then local face=head:FindFirstChild('face'); if face and Original.faces.face then face.Texture=Original.faces.face; end; end;
	for _,a in ch:GetChildren() do if a:IsA('Accessory') then a:Destroy(); end; end;
	for _,a in Original.accessories do if a then pcall(function() hum:AddAccessory(a:Clone()) end); end; end;
	if Original.colors then local d=ch:FindFirstChildOfClass('BodyColors') or Instance.new('BodyColors',ch); d.HeadColor3=Original.colors.HeadColor3; d.TorsoColor3=Original.colors.TorsoColor3; d.LeftArmColor3=Original.colors.LeftArmColor3; d.RightArmColor3=Original.colors.RightArmColor3; d.LeftLegColor3=Original.colors.LeftLegColor3; d.RightLegColor3=Original.colors.RightLegColor3; end;
	local oc=Original.clothes or {}; local sh=ch:FindFirstChildOfClass('Shirt'); local pa=ch:FindFirstChildOfClass('Pants'); local sg=ch:FindFirstChildOfClass('ShirtGraphic');
	if oc.Shirt and oc.Shirt.value~=nil then if oc.Shirt.had and not sh then sh=Instance.new('Shirt',ch); end; if sh then sh.ShirtTemplate=oc.Shirt.value; end; elseif sh then sh.ShirtTemplate=''; end;
	if oc.Pants and oc.Pants.value~=nil then if oc.Pants.had and not pa then pa=Instance.new('Pants',ch); end; if pa then pa.PantsTemplate=oc.Pants.value; end; elseif pa then pa.PantsTemplate=''; end;
	if oc.ShirtGraphic and oc.ShirtGraphic.value~=nil then if oc.ShirtGraphic.had and not sg then sg=Instance.new('ShirtGraphic',ch); end; if sg then sg.Graphic=oc.ShirtGraphic.value; end; elseif sg then sg.Graphic=''; end;
	for k,v in Original.scales do local s=hum:FindFirstChild(k); if s and v then s.Scale=v; end; end;
	if Globals.ClientCharacter:FindFirstChild('Hair') then local hairpart = Globals.ClientCharacter.Hair:FindFirstChild('HairPart'); if hairpart then hairpart.Transparency = 0; end end
end)

Globals.TweenTransparencyIns = LPH_NO_VIRTUALIZE(function(container, targetTransparency, duration)
	duration = duration or 0.2

	local tweeninfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

	for _, obj in container:GetDescendants() do
		if obj:IsA("GuiObject") then
			local props = {}

			if obj:IsA("TextLabel") or obj:IsA("TextButton") then
				props.TextTransparency = targetTransparency
			end

			if obj:IsA("ImageLabel") or obj:IsA("ImageButton") then
				props.ImageTransparency = targetTransparency
			end

			if obj.BackgroundTransparency ~= nil then
				props.BackgroundTransparency = targetTransparency
			end

			Globals:Tween(obj, tweeninfo, props)
		end

		if obj:IsA("UIStroke") then
			Globals:Tween(obj, tweeninfo, {
				Transparency = targetTransparency,
			})
		end
	end

	if container:IsA("GuiObject") then
		Globals:Tween(container, TweenInfo.new(duration, Enum.EasingStyle.Quad), {
			BackgroundTransparency = targetTransparency,
		})
	end
end)

Globals.Tween = LPH_NO_VIRTUALIZE(function(self, ...)
	local NewTween = TweenService:Create(...)
	NewTween:Play()
	return NewTween
end)

Globals.Instance = LPH_NO_VIRTUALIZE(function(self, Class, Properties)
	local Element = Instance.new(Class)

	for Key, Value in Properties do
		Element[Key] = Value
	end

	return Element
end)

local ItemsModule = Modules:FindFirstChild("Items");
if ItemsModule then
	Globals.ItemsModule = require(ItemsModule)
	local Items = Globals.DeepCopy(Globals.ItemsModule);
	for Index, ItemData in Items do
		if ItemData.Type == "Armor" then
			Globals.ArmorIds[Index] = {
				Name = ItemData.Name,
			};
		end;
	end;
	Globals.ItemInfoTable = Items
end;


--#endregion Globals

--#region Library
local FromRGB = Color3.fromRGB
local hex = Color3.fromHex

local themes = {
	preset = {
		["outline"] = hex("#0A0A0A"), --
		["inline"] = hex("#2D2D2D"), --
		["accent"] = hex("#92c33b"), --
		-- ["accent"] = hex("#6078BE"), --
		["high_contrast"] = hex("#141414"),
		["low_contrast"] = hex("#1E1E1E"),
		["text"] = hex("#B4B4B4"),
		["text_outline"] = FromRGB(0, 0, 0),
	},

	configs = {
		['Default'] = {
			outline = hex("#0A0A0A"), --
			inline = hex("#2D2D2D"), --
			-- accent = hex("#6078BE"), --
			accent = hex("#92c33b"), --
			high_contrast = hex("#141414"),
			low_contrast = hex("#1E1E1E"),
			text = hex("#B4B4B4"),
			text_outline = FromRGB(0, 0, 0),
		},
		['BBot'] = {
			text = hex('#ffffff'),
			text_outline = FromRGB(0, 0, 0),
			outline = hex('#1e1e1e'),
			accent = hex('#7e48a3'),
			inline = hex('#232323'),
			high_contrast = hex("#141414"),
			low_contrast = hex("#1E1E1E"),
		},
		['Fatality'] = {
			text = hex('#ffffff'),
			text_outline = FromRGB(0, 0, 0),
			outline = hex('#1e1842'),
			accent = hex('#c50754'),
			inline = hex('#191335'),
			high_contrast = hex("#141414"),
			low_contrast = hex("#1E1E1E"),
		},
		['Jester'] = {
			text = hex('#ffffff'),
			text_outline = FromRGB(0, 0, 0),
			outline = hex('#242424'),
			accent = hex('#db4467'),
			inline = hex('#1c1c1c'),
			high_contrast = hex("#141414"),
			low_contrast = hex("#1E1E1E"),
		},
		['Mint'] = {
			text = hex('#ffffff'),
			text_outline = FromRGB(0, 0, 0),
			outline = hex('#242424'),
			accent = hex('#3db488'),
			inline = hex('#1c1c1c'),
			high_contrast = hex("#141414"),
			low_contrast = hex("#1E1E1E"),
		},
		['Tokyo Night'] = {
			text = hex('#ffffff'),
			text_outline = FromRGB(0, 0, 0),
			outline = hex('#191925'),
			accent = hex('#6759b3'),
			inline = hex('#16161f'),
			high_contrast = hex("#141414"),
			low_contrast = hex("#1E1E1E"),
		},
		['Ubuntu'] = {
			text = hex('#ffffff'),
			text_outline = FromRGB(0, 0, 0),
			outline = hex('#3e3e3e'),
			accent = hex('#e2581e'),
			inline = hex('#323232'),
			high_contrast = hex("#141414"),
			low_contrast = hex("#1E1E1E"),
		},
		['Quartz'] = {
			text = hex('#ffffff'),
			text_outline = FromRGB(0, 0, 0),
			outline = hex('#232330'),
			accent = hex('#426e87'),
			inline = hex('#1d1b26'),
			high_contrast = hex("#141414"),
			low_contrast = hex("#1E1E1E"),
		},
	},

	utility = {
		["outline"] = {
			["BackgroundColor3"] = {},
			["Color"] = {},
		},
		["inline"] = {
			["BackgroundColor3"] = {},
		},
		["accent"] = {
			["BackgroundColor3"] = {},
			["TextColor3"] = {},
			["ImageColor3"] = {},
			["ScrollBarImageColor3"] = {}
		},
		["contrast"] = {
			["Color"] = {},
		},
		["text"] = {
			["TextColor3"] = {},
		},
		["text_outline"] = {
			["Color"] = {},
		},
		["glow"] = {
			["ImageColor3"] = {},
		},
	},

	find = {
		["Frame"] = "BackgroundColor3",
		["TextLabel"] = "TextColor3",
		["UIGradient"] = "Color",
		["UIStroke"] = "Color",
		["ImageLabel"] = "ImageColor3",
		["TextButton"] = "BackgroundColor3",
		["ScrollingFrame"] = "ScrollBarImageColor3"
	}
}

Library.Notifications = Globals:Instance("ScreenGui", {
	Parent = CoreGui,
	DisplayOrder = 1,
	IgnoreGuiInset = true,
})

Library.HeadsUp = Globals:Instance("ScreenGui", {
	Parent = CoreGui,
	DisplayOrder = 1,
	IgnoreGuiInset = true,
	Enabled = true
})

local flags = Library.Flags
local Instances = { }
local Themes

LPH_NO_VIRTUALIZE(function() --// Not that important
	gethui = gethui or function()
		return CoreGui
	end

	local FromRGB = Color3.fromRGB
	local FromHSV = Color3.fromHSV
	local FromHex = Color3.fromHex

	local RGBSequence = ColorSequence.new
	local RGBSequenceKeypoint = ColorSequenceKeypoint.new
	local NumSequence = NumberSequence.new
	local NumSequenceKeypoint = NumberSequenceKeypoint.new

	local UDim2New = UDim2.new
	local UDimNew = UDim.new
	local Vector2New = Vector2.new
	local Vector3New = Vector3.new

	local MathClamp = math.clamp
	local MathFloor = math.floor
	local MathAbs = math_abs
	local MathSin = math.sin

	local TableInsert = table.insert
	local TableFind = table.find
	local TableRemove = table.remove
	local TableConcat = table.concat
	local TableClone = table.clone
	local TableUnpack = table.unpack

	local StringFormat = string.format
	local StringFind = string.find
	local StringGSub = string.gsub
	local StringLower = string.lower
	local StringLen = string.len

	local InstanceNew = Instance.new

	local RectNew = Rect.new

	Library.__index = Library
	Library.Sections.__index = Library.Sections
	Library.Pages.__index = Library.Pages

	local Keys = {
		["Unknown"]           = "Unknown",
		["Tab"]               = "Tab",
		["Clear"]             = "Clear",
		["Return"]            = "Return",
		["Pause"]             = "Pause",
		["Escape"]            = "Escape",
		["Space"]             = "Space",
		["QuotedDouble"]      = '"',
		["Hash"]              = "#",
		["Dollar"]            = "$",
		["Percent"]           = "%",
		["Ampersand"]         = "&",
		["Quote"]             = "'",
		["LeftParenthesis"]   = "(",
		["RightParenthesis"]  = " )",
		["Asterisk"]          = "*",
		["Plus"]              = "+",
		["Comma"]             = ",",
		["Minus"]             = "-",
		["Period"]            = ".",
		["Slash"]             = "`",
		["Three"]             = "3",
		["Seven"]             = "7",
		["Eight"]             = "8",
		["Colon"]             = ":",
		["Semicolon"]         = ";",
		["LessThan"]          = "<",
		["GreaterThan"]       = ">",
		["Question"]          = "?",
		["Equals"]            = "=",
		["At"]                = "@",
		["LeftBracket"]       = "LeftBracket",
		["RightBracket"]      = "RightBracked",
		["BackSlash"]         = "BackSlash",
		["Caret"]             = "^",
		["Underscore"]        = "_",
		["Backquote"]         = "`",
		["LeftCurly"]         = "{",
		["Pipe"]              = "|",
		["RightCurly"]        = "}",
		["Tilde"]             = "~",
		["Delete"]            = "Delete",
		["End"]               = "End",
		["KeypadZero"]        = "Keypad0",
		["KeypadOne"]         = "Keypad1",
		["KeypadTwo"]         = "Keypad2",
		["KeypadThree"]       = "Keypad3",
		["KeypadFour"]        = "Keypad4",
		["KeypadFive"]        = "Keypad5",
		["KeypadSix"]         = "Keypad6",
		["KeypadSeven"]       = "Keypad7",
		["KeypadEight"]       = "Keypad8",
		["KeypadNine"]        = "Keypad9",
		["KeypadPeriod"]      = "KeypadP",
		["KeypadDivide"]      = "KeypadD",
		["KeypadMultiply"]    = "KeypadM",
		["KeypadMinus"]       = "KeypadM",
		["KeypadPlus"]        = "KeypadP",
		["KeypadEnter"]       = "KeypadE",
		["KeypadEquals"]      = "KeypadE",
		["Insert"]            = "Insert",
		["Home"]              = "Home",
		["PageUp"]            = "PageUp",
		["PageDown"]          = "PageDown",
		["RightShift"]        = "RightShift",
		["LeftShift"]         = "LeftShift",
		["RightControl"]      = "RightControl",
		["LeftControl"]       = "LeftControl",
		["LeftAlt"]           = "LeftAlt",
		["RightAlt"]          = "RightAlt"
	}

	Themes = {
		["Preset"] = {
			["Outline 1"] = FromRGB(31, 31, 31),
			["Outline 2"] = FromRGB(60, 60, 60),
			["Outline 3"] = FromRGB(44, 44, 44),
			["Inline 1"] = FromRGB(40, 40, 40),
			["Background 1"] = FromRGB(14, 14, 14),
			["Accent"] = FromHex("#6078BE"),
			["Background 2"] = FromRGB(24, 24, 24),
			["Text"] = FromRGB(220, 220, 220),
			["Risky"] = FromRGB(255, 0, 0),
			["Text Shadow"] = FromRGB(0, 0, 0),
			["Element"] = FromRGB(43, 43, 43),
			["Gradient"] = FromRGB(195, 195, 195)
		}
	}

	Library.Theme = TableClone(Themes["Preset"])

	-- Folders
	for Index, Value in Library.Folders do
		if not isfolder(Value) then
			makefolder(Value)
		end
	end

	-- Tweening
	local Tween = { } do
		Tween.__index = Tween

		Tween.Create = function(self, Item, Info, Goal, IsRawItem)
			if not Library then
				return
			end

			Item = IsRawItem and Item or Item.Instance
			Info = Info or TweenInfo.new(Library.Tween.Time, Library.Tween.Style, Library.Tween.Direction)

			local NewTween = {
				Tween = TweenService:Create(Item, Info, Goal),
				Info = Info,
				Goal = Goal,
				Item = Item
			}

			NewTween.Tween:Play()

			setmetatable(NewTween, Tween)

			return NewTween
		end

		Tween.GetProperty = function(self, Item)
			Item = Item or self.Item

			if Item:IsA("Frame") then
				return { "BackgroundTransparency" }
			elseif Item:IsA("TextLabel") or Item:IsA("TextButton") then
				return { "TextTransparency", "BackgroundTransparency" }
			elseif Item:IsA("ImageLabel") or Item:IsA("ImageButton") then
				return { "BackgroundTransparency", "ImageTransparency" }
			elseif Item:IsA("ScrollingFrame") then
				return { "BackgroundTransparency", "ScrollBarImageTransparency" }
			elseif Item:IsA("TextBox") then
				return { "TextTransparency", "BackgroundTransparency" }
			elseif Item:IsA("UIStroke") then
				return { "Transparency" }
			end
		end

		Tween.FadeItem = function(self, Item, Property, Visibility, Speed)
			local Item = Item or self.Item

			local OldTransparency = Item[Property]
			Item[Property] = Visibility and 1 or OldTransparency

			local NewTween = Tween:Create(Item, TweenInfo.new(Speed or Library.Tween.Time, Library.Tween.Style, Library.Tween.Direction), {
				[Property] = Visibility and OldTransparency or 1
			}, true)

			Library:Connect(NewTween.Tween.Completed, function()
				if not Visibility then
					task.wait()
					Item[Property] = OldTransparency
				end
			end)

			return NewTween
		end

		Tween.Get = function(self)
			if not self.Tween then
				return
			end

			return self.Tween, self.Info, self.Goal
		end

		Tween.Pause = function(self)
			if not self.Tween then
				return
			end

			self.Tween:Pause()
		end

		Tween.Play = function(self)
			if not self.Tween then
				return
			end

			self.Tween:Play()
		end

		Tween.Clean = function(self)
			if not self.Tween then
				return
			end

			Tween:Pause()
			self = nil
		end
	end

	-- Instances
	do
		Instances.__index = Instances


		Instances.Create2 = function(Class, Properties)
			local ins = Instance.new(Class)

			for prop, value in Properties do
				ins[prop] = value
			end

			return ins
		end

		Instances.draggify = function(self, frame)
			local dragging = false
			local start_size = frame.Position
			local start

			frame.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = true
					start = input.Position
					start_size = frame.Position
				end
			end)

			frame.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = false
				end
			end)

			UserInputService.InputChanged:Connect(function(input, game_event)
				if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
					local viewport_x = Camera.ViewportSize.X
					local viewport_y = Camera.ViewportSize.Y

					local current_position = UDim2New(
						0,
						MathClamp(
							start_size.X.Offset + (input.Position.X - start.X),
							0,
							viewport_x - frame.Size.X.Offset
						),
						0,
						MathClamp(
							start_size.Y.Offset + (input.Position.Y - start.Y),
							0,
							viewport_y - frame.Size.Y.Offset
						)
					)

					frame.Position = current_position
				end
			end)
		end

		Instances.make_resizable = function(self)
			local frame = self.Instance
			local Frame = Instance.new("TextButton")
			Frame.Position = UDim2New(1, -10, 1, -10)
			Frame.BorderColor3 = FromRGB(0, 0, 0)
			Frame.Size = UDim2New(0, 10, 0, 10)
			Frame.BorderSizePixel = 0
			Frame.BackgroundColor3 = FromRGB(255, 255, 255)
			Frame.Parent = frame
			Frame.BackgroundTransparency = 1
			Frame.Text = ""

			local resizing = false
			local start_size
			local start
			local og_size = frame.Size

			Frame.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					resizing = true
					start = input.Position
					start_size = frame.Size
				end
			end)

			Frame.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					resizing = false
				end
			end)

			UserInputService.InputChanged:Connect(function(input, game_event)
				if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
					local viewport_x = Camera.ViewportSize.X
					local viewport_y = Camera.ViewportSize.Y

					local current_size = UDim2New(
						start_size.X.Scale,
						math.clamp(
							start_size.X.Offset + (input.Position.X - start.X),
							og_size.X.Offset,
							viewport_x
						),
						start_size.Y.Scale,
						math.clamp(
							start_size.Y.Offset + (input.Position.Y - start.Y),
							og_size.Y.Offset,
							viewport_y
						)
					)
					frame.Size = current_size
				end
			end)
		end

		Instances.Create = function(self, Class, Properties)
			local NewItem = {
				Instance = InstanceNew(Class),
				Properties = Properties,
				Class = Class
			}

			setmetatable(NewItem, Instances)

			for Property, Value in NewItem.Properties do
				NewItem.Instance[Property] = Value
			end

			return NewItem
		end

		Instances.FadeItem = function(self, Visibility, Speed)
			local Item = self.Instance

			if Visibility == true then
				Item.Visible = true
			end

			local Descendants = Item:GetDescendants()
			TableInsert(Descendants, Item)

			local NewTween

			for Index, Value in Descendants do
				local TransparencyProperty = Tween:GetProperty(Value)

				if not TransparencyProperty then
					continue
				end

				if type(TransparencyProperty) == "table" then
					for _, Property in TransparencyProperty do
						NewTween = Tween:FadeItem(Value, Property, not Visibility, Speed)
					end
				else
					NewTween = Tween:FadeItem(Value, TransparencyProperty, not Visibility, Speed)
				end
			end
		end

		Instances.AddToTheme = function(self, Properties)
			if not self.Instance then
				return
			end

			Library:AddToTheme(self, Properties)
		end

		Instances.ChangeItemTheme = function(self, Properties)
			if not (self.Instance and Library) then
				return
			end

			Library:ChangeItemTheme(self, Properties)
		end

		Instances.Connect = function(self, Event, Callback, Name)
			if not self.Instance then
				return
			end

			if not self.Instance[Event] then
				return
			end

			return Library:Connect(self.Instance[Event], Callback, Name)
		end

		Instances.Tween = function(self, Info, Goal)
			if not self.Instance then
				return
			end

			return Tween:Create(self, Info, Goal)
		end

		Instances.Disconnect = function(self, Name)
			if not self.Instance then
				return
			end

			return Library:Disconnect(Name)
		end

		Instances.Clean = function(self)
			if not self.Instance then
				return
			end

			self.Instance:Destroy()
			self = nil
		end

		Instances.MakeDraggable = function(self)
			if not self.Instance then
				return
			end

			local Gui = self.Instance

			local Dragging = false
			local DragStart
			local StartPosition

			local Set = function(Input)
				local DragDelta = Input.Position - DragStart
				self:Tween(TweenInfo.new(0.16, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2New(StartPosition.X.Scale, StartPosition.X.Offset + DragDelta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + DragDelta.Y)})
			end

			local InputChanged

			self:Connect("InputBegan", function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
					Dragging = true

					DragStart = Input.Position
					StartPosition = Gui.Position

					if InputChanged then
						return
					end

					InputChanged = Input.Changed:Connect(function()
						if Input.UserInputState == Enum.UserInputState.End then
							Dragging = false

							InputChanged:Disconnect()
							InputChanged = nil
						end
					end)
				end
			end)

			Library:Connect(UserInputService.InputChanged, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
					if Dragging then
						Set(Input)
					end
				end
			end)

			return Dragging
		end

		Instances.MakeResizeable = function(self, Minimum, Maximum)
			if not self.Instance then
				return
			end

			local Gui = self.Instance

			local Resizing = false
			local Start = UDim2New()
			local Delta = UDim2New()
			local ResizeMax = Gui.Parent.AbsoluteSize - Gui.AbsoluteSize

			local ResizeButton = Instances:Create("ImageButton", {
				Parent = Gui,
				Image = "rbxassetid://",
				AnchorPoint = Vector2New(1, 1),
				BorderColor3 = FromRGB(0, 0, 0),
				Size = UDim2New(0, 10, 0, 10),
				Position = UDim2New(1, -4, 1, -4),
				Name = "\0",
				BorderSizePixel = 0,
				BackgroundTransparency = 1,
				ZIndex = 5,
				AutoButtonColor = false,
				Visible = true,
			})  ResizeButton:AddToTheme({ImageColor3 = "Accent"})

			local InputChanged

			ResizeButton:Connect("InputBegan", function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then

					Resizing = true

					Start = Gui.Size - UDim2New(0, Input.Position.X, 0, Input.Position.Y)

					if InputChanged then
						return
					end

					InputChanged = Input.Changed:Connect(function()
						if Input.UserInputState == Enum.UserInputState.End then
							Resizing = false

							InputChanged:Disconnect()
							InputChanged = nil
						end
					end)
				end
			end)

			Library:Connect(UserInputService.InputChanged, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
					if Resizing then
						ResizeMax = Maximum or Gui.Parent.AbsoluteSize - Gui.AbsoluteSize

						Delta = Start + UDim2New(0, Input.Position.X, 0, Input.Position.Y)
						Delta = UDim2New(0, math.clamp(Delta.X.Offset, Minimum.X, ResizeMax.X), 0, math.clamp(Delta.Y.Offset, Minimum.Y, ResizeMax.Y))

						Tween:Create(Gui, TweenInfo.new(0.17, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Size = Delta}, true)
					end
				end
			end)

			return Resizing
		end

		Instances.OnHover = function(self, Function)
			if not self.Instance then
				return
			end

			return Library:Connect(self.Instance.MouseEnter, Function)
		end

		Instances.OnHoverLeave = function(self, Function)
			if not self.Instance then
				return
			end

			return Library:Connect(self.Instance.MouseLeave, Function)
		end
	end

	-- Custom font
	local CustomFont = { } do
		function CustomFont:New(Name, Weight, Style, Data)
			if isfile(Library.Folders.Assets .. "/" .. Name .. ".json") then
				return Font.new(getcustomasset(Library.Folders.Assets .. "/" .. Name .. ".json"))
			end

			if not isfile(Library.Folders.Assets .. "/" .. Name .. ".ttf") then
				writefile(Library.Folders.Assets .. "/" .. Name .. ".ttf", game:HttpGet(Data.Url))
			end

			local FontData = {
				name = Name,
				faces = { {
					name = "Regular",
					weight = Weight,
					style = Style,
					assetId = getcustomasset(Library.Folders.Assets .. "/" .. Name .. ".ttf")
				} }
			}

			writefile(Library.Folders.Assets .. "/" .. Name .. ".json", HttpService:JSONEncode(FontData))
			return Font.new(getcustomasset(Library.Folders.Assets .. "/" .. Name .. ".json"))
		end

		function CustomFont:Get(Name)
			if isfile(Library.Folders.Assets .. "/" .. Name .. ".json") then
				return Font.new(getcustomasset(Library.Folders.Assets .. "/" .. Name .. ".json"))
			end
		end

		-- CustomFont:New("SmallestPixel", 400, "Regular", {Url = "https://github.com/sametexe001/luas/raw/refs/heads/main/fonts/smallest_pixel-7.ttf"})
		-- CustomFont:New("ProggyClean", 400, "Regular", {Url = "https://github.com/sametexe001/luas/raw/refs/heads/main/fonts/proggy-clean.ttf"})
		-- CustomFont:New("TahomaXP", 400, "Regular", {Url = "https://github.com/sametexe001/luas/raw/refs/heads/main/fonts/windows-xp-tahoma.ttf"})
		-- CustomFont:New("MinecraftiaRegular", 400, "Regular", {Url = "https://github.com/sametexe001/luas/raw/refs/heads/main/fonts/minecraftia-regular.ttf"})
		-- CustomFont:New("Monaco", 400, "Regular", {Url = "https://github.com/sametexe001/luas/raw/refs/heads/main/fonts/Monaco.ttf"})
		-- CustomFont:New("Verdana", 400, "Regular", {Url = "https://github.com/sametexe001/luas/raw/refs/heads/main/fonts/verdana.ttf"})
		-- CustomFont:New("TeachersPet", 400, "Regular", {Url = "https://github.com/sametexe001/luas/raw/refs/heads/main/fonts/teachers-pet.ttf"})
		-- CustomFont:New("FSTahoma", 400, "Regular", {Url = "https://github.com/weasely111/beta/raw/refs/heads/main/fs-tahoma-8px.ttf"})

		-- Library.Fonts["Smallest Pixel"] = CustomFont:Get("SmallestPixel")
		-- Library.Fonts["Proggy Clean"] = CustomFont:Get("ProggyClean")
		-- Library.Fonts["Tahoma XP"] = CustomFont:Get("TahomaXP")
		-- Library.Fonts["Minecraftia"] = CustomFont:Get("MinecraftiaRegular")
		-- Library.Fonts["Monaco"] = CustomFont:Get("Monaco")
		-- Library.Fonts["Verdana"] = CustomFont:Get("Verdana")
		-- Library.Fonts["Teachers Pet"] = CustomFont:Get("TeachersPet")
		-- Library.Fonts['FSTahoma'] = CustomFont:Get("FSTahoma")
		-- Library.Fonts['Gotham SSm'] = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.ExtraBold)

		-- fonts to add
-- https://cheater.watch/Semi.otf
-- https://cheater.watch/HappyFunMarkerTime.ttf
-- https://cheater.watch/Dryhten.ttf
-- https://cheater.watch/SanFrancisco.ttf
-- https://cheater.watch/Arial.ttf
-- https://cheater.watch/Glue Gun.ttf


		local fonts = {
			{ name = 'ProggyTiny', file = 'ProggyTiny.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/ProggyTiny.ttf' },
			{ name = 'Minecraft', file = 'Minecraft.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/Minecraftia-Regular.ttf' },
			{ name = 'FSTahoma', file = 'fstahoma8.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/fs-tahoma-8px.ttf' },
			{ name = 'Verdana', file = 'Verdana.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/verdana.ttf' },
			{ name = 'TeachersPet', file = 'TeachersPet.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/teachers-pet.ttf' },
			{ name = 'Monaco', file = 'Monaco.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/Monaco.ttf' },
			{ name = 'Arial', file = 'Arial.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/Arial.ttf' },
			-- { name = 'Semi', file = 'Semi.otf', url = 'https://cheater.watch/Semi.otf' },
			{ name = 'HappyFunMarkerTime', file = 'HappyFunMarkerTime.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/Dryhten.ttf' },
			{ name = 'Dryhten', file = 'Dryhten.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/Dryhten.ttf' },
			{ name = 'SanFrancisco', file = 'SanFrancisco.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/SanFrancisco.ttf' },
			{ name = 'GlueGun', file = 'Glue Gun.ttf', url = 'https://github.com/mainstreamed/clones/raw/refs/heads/main/vanity/Glue%20Gun.ttf' },
		}

		local function registerFont(data)
			if not isfile(data.file) then
				writefile(data.file, game:HttpGet(data.url))
			end

			writefile(data.name .. 'Encoded.ttf', HttpService:JSONEncode({
				name = data.name,
				faces = {
					{
						name = 'Regular',
						weight = 400,
						style = 'normal',
						assetId = getcustomasset(data.file)
					}
				}
			}))
		end

		for _, f in next, fonts do
			registerFont(f)
		end

		--// INIT
		Library.Fonts = {}

		for _, f in next, fonts do
			Library.Fonts[f.name] = Font.new(getcustomasset(f.name .. 'Encoded.ttf'), Enum.FontWeight.Regular)
		end

		Library.Fonts['Gotham SSm'] = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.ExtraBold)

		Library.fontnames = {}
		for name in pairs(Library.Fonts) do
			insert(Library.fontnames, name)
		end

		Library.Font = Library.Fonts["ProggyTiny"]
		Library.espfont = Library.Fonts["FSTahoma"]
	end

	Library.Holder = Instances:Create("ScreenGui", {
		Parent = CoreGui,
		Name = "\0",
		ZIndexBehavior = Enum.ZIndexBehavior.Global,
		DisplayOrder = 2,
		ResetOnSpawn = false
	})

	Library.UnusedHolder = Instances:Create("ScreenGui", {
		Parent = CoreGui,
		Name = "\0",
		ZIndexBehavior = Enum.ZIndexBehavior.Global,
		Enabled = false,
		ResetOnSpawn = false
	})

	Library.NotifHolder = Instances:Create("Frame", {
		Parent = Library.Holder.Instance,
		Name = "\0",
		BorderColor3 = FromRGB(0, 0, 0),
		AnchorPoint = Vector2New(1, 0),
		BackgroundTransparency = 1,
		Position = UDim2New(1, 0, 0, 0),
		Size = UDim2New(0, 0, 1, 0),
		BorderSizePixel = 0,
		AutomaticSize = Enum.AutomaticSize.X,
		BackgroundColor3 = FromRGB(255, 255, 255)
	})

	Instances:Create("UIPadding", {
		Parent = Library.NotifHolder.Instance,
		Name = "\0",
		PaddingTop = UDimNew(0, 12),
		PaddingBottom = UDimNew(0, 12),
		PaddingRight = UDimNew(0, 12),
		PaddingLeft = UDimNew(0, 12)
	})

	Instances:Create("UIListLayout", {
		Parent = Library.NotifHolder.Instance,
		Name = "\0",
		HorizontalAlignment = Enum.HorizontalAlignment.Right,
		VerticalAlignment = Enum.VerticalAlignment.Top,
		Padding = UDimNew(0, 12),
		SortOrder = Enum.SortOrder.LayoutOrder
	})



	Library.Unload = function(self)
		for Index, Value in Library.OriginalFlags do
			Library.Flags[Index] = Value
		end

		for _, Value in self.Connections do
			Value:Disconnect()
		end

		for _, Value in self.Threads do
			coroutine.close(Value)
		end

		local Holder = self.Holder

		if Holder then
			Holder:Clean()
		end

		Library.Unloaded = true
	end

	Library.GetImage = function(self, Image)
		local ImageData = self.Images[Image]

		if not ImageData then
			return
		end

		return getcustomasset(self.Folders.Assets .. "/" .. ImageData[1])
	end

	Library.Round = function(self, Number, Float)
		local Multiplier = 1 / (Float or 1)
		return MathFloor(Number * Multiplier) / Multiplier
	end

	Library.Thread = function(self, Function)
		local NewThread = coroutine.create(Function)

		coroutine.wrap(function()
			coroutine.resume(NewThread)
		end)()

		TableInsert(self.Threads, NewThread)
		return NewThread
	end

	Library.SafeCall = function(self, Function, ...)
		local Arguements = { ... }
		local Success, Result = pcall(Function, TableUnpack(Arguements))

		if not Success then
			warn(Result)
			return false
		end

		return Success
	end

	Library.Connect = function(self, Event, Callback, Name)
		Name = Name or StringFormat("connection_number_%s_%s", self.UnnamedConnections + 1, HttpService:GenerateGUID(false))

		local NewConnection

		Library:Thread(function()
			NewConnection = Event:Connect(Callback)
		end)

		self.Connections[Name] = NewConnection
		return NewConnection
	end

	Library.Disconnect = function(self, Name)
		local Connection = self.Connections[Name]

		if Connection then
			Connection:Disconnect()
			self.Connections[Name] = nil
		end
	end

	Library.NextFlag = function(self)
		local FlagNumber = self.UnnamedFlags + 1
		return StringFormat("flag_number_%s_%s", FlagNumber, HttpService:GenerateGUID(false))
	end

	Library.AddToTheme = function(self, Item, Properties)
		Item = Item.Instance or Item

		local ThemeData = {
			Item = Item,
			Properties = Properties,
		}

		for Property, Value in ThemeData.Properties do
			if type(Value) == "string" then
				Item[Property] = self.Theme[Value]
			else
				Item[Property] = Value()
			end
		end

		TableInsert(self.ThemeItems, ThemeData)
		self.ThemeMap[Item] = ThemeData
	end

	Library.ToRich = function(self, Text, Color)
		return `<font color="FromRGB({MathFloor(Color.R * 255)}, {MathFloor(Color.G * 255)}, {MathFloor(Color.B * 255)})">{Text}</font>`
	end

	Library.GetConfig = function(self)
		local Config = { }

		local Success, Result = Library:SafeCall(function()
			for Index, Value in Library.Flags do
				if type(Value) == "table" and Value.Key then
					Config[Index] = {Key = tostring(Value.Key), Mode = Value.Mode}
				elseif type(Value) == "table" and Value.Color then
					Config[Index] = {Color = "#" .. Value.Color:ToHex(), Alpha = Value.Alpha, Rainbow = Value.Rainbow or false, Breathing = Value.Breathing or false}
				else
					Config[Index] = Value
				end
			end
		end)

		return HttpService:JSONEncode(Config)
	end

	Library.LoadConfig = function(self, Config)
		local Decoded = HttpService:JSONDecode(Config)

		local Success, Result = Library:SafeCall(function()
			for Index, Value in Decoded do
				local SetFunction = Library.SetFlags[Index]

				if not SetFunction then
					continue
				end

				if type(Value) == "table" and Value.Key then
					SetFunction(Value)
				elseif type(Value) == "table" and Value.Color then
					SetFunction(Value.Color, Value.Alpha, Value.Rainbow, Value.Breathing)
				else
					SetFunction(Value)
				end
			end
		end)

		return Success, Result
	end

	Library.DeleteConfig = function(self, Config)
		if isfile(Library.Folders.Configs .. "/" .. Config) then
			delfile(Library.Folders.Configs .. "/" .. Config)
		end
	end

	Library.RefreshConfigsList = function(self, Element)
		local CurrentList = { }
		local List = { }

		local ConfigFolderName = StringGSub(Library.Folders.Configs:gsub("\\", "/"), (Library.Folders.Directory .. "/"):gsub("\\", "/"), "")

		for Index, Value in listfiles(Library.Folders.Configs) do
			local FileName = StringGSub(Value:gsub("\\", "/"), (Library.Folders.Directory .. "/" .. ConfigFolderName .. "/"):gsub("\\", "/"), "")
			List[Index] = FileName
		end

		local IsNew = #List ~= CurrentList

		if not IsNew then
			for Index = 1, #List do
				if List[Index] ~= CurrentList[Index] then
					IsNew = true
					break
				end
			end
		else
			CurrentList = List
			Element:Refresh(CurrentList)
		end
	end

	Library.ChangeItemTheme = function(self, Item, Properties)
		Item = Item.Instance or Item

		if not self.ThemeMap[Item] then
			return
		end

		self.ThemeMap[Item].Properties = Properties
		self.ThemeMap[Item] = self.ThemeMap[Item]
	end

	Library.ChangeTheme = function(self, Theme, Color)
		self.Theme[Theme] = Color

		for _, Item in self.ThemeItems do
			for Property, Value in Item.Properties do
				if type(Value) == "string" and Value == Theme then
					Item.Item[Property] = Color
				elseif type(Value) == "function" then
					Item.Item[Property] = Value()
				end
			end
		end
	end

	Library.IsMouseOverFrame = function(self, Frame)
		if (not Frame) then
			return false
		end

		Frame = Frame.Instance

		local MousePosition = Vector2New(Mouse.X, Mouse.Y)

		return MousePosition.X >= Frame.AbsolutePosition.X and MousePosition.X <= Frame.AbsolutePosition.X + Frame.AbsoluteSize.X
		and MousePosition.Y >= Frame.AbsolutePosition.Y and MousePosition.Y <= Frame.AbsolutePosition.Y + Frame.AbsoluteSize.Y
	end

	Library.IsInChat = function()
		if Client and Client:FindFirstChild('PlayerGui') and Client.PlayerGui:FindFirstChild('CustomChat') and Client.PlayerGui.CustomChat:FindFirstChild('EnterFrame') then
			local enterframe = Client.PlayerGui.CustomChat.EnterFrame
			if enterframe and enterframe.Visible then
				return true
			end
		end
		return false
	end

	Library.UpdateText = function(self, TextSize)
		for Index, Value in Library.UnusedHolder.Instance:GetDescendants() do
			if Value:IsA("TextLabel") or Value:IsA("TextButton") or Value:IsA("TextBox") then
				Value.FontFace = Library.Font
				Value.TextSize = TextSize
			end
		end

		for Index, Value in Library.Holder.Instance:GetDescendants() do
			if Value:IsA("TextLabel") or Value:IsA("TextButton") or Value:IsA("TextBox") then
				Value.FontFace = Library.Font
				Value.TextSize = TextSize
			end
		end
	end

	do
		Library.CreateColorpicker = function(self, Data)
			local Colorpicker = {
				Flag = Data.Flag,
				IsOpen = false,

				Hue = 0,
				Value = 0,
				Saturation = 0,

				Color = FromRGB(255, 255, 255),
				HexValue = "#ffffff",

				Alpha = 0,
			}

			local Items = { } do
				Items["ColorpickerButton"] = Instances:Create("TextButton", {
					Parent = Data.Parent.Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					BorderSizePixel = 0,
					Size = UDim2New(0, 18, 0, 10),
					ZIndex = 2,
					TextSize = 14,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIGradient", {
					Parent = Items["ColorpickerButton"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Instances:Create("UIStroke", {
					Parent = Items["ColorpickerButton"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["ColorpickerWindowOutline"] = Instances:Create("Frame", {
					Parent = Library.UnusedHolder.Instance,
					Name = "\0",
					Visible = false,
					Position = UDim2New(0, 22, 0, 26),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(0, 205, 0, 278),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(31, 31, 31)
				})  Items["ColorpickerWindowOutline"]:AddToTheme({BackgroundColor3 = "Outline 1"})

				Items["InlineOutline"] = Instances:Create("Frame", {
					Parent = Items["ColorpickerWindowOutline"].Instance,
					Name = "\0",
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(60, 60, 60)
				})  Items["InlineOutline"]:AddToTheme({BackgroundColor3 = "Outline 2"})

				Items["InlineOne"] = Instances:Create("Frame", {
					Parent = Items["InlineOutline"].Instance,
					Name = "\0",
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(40, 40, 40)
				})  Items["InlineOne"]:AddToTheme({BackgroundColor3 = "Inline 1"})

				Items["Palette"] = Instances:Create("TextButton", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					Position = UDim2New(0, 8, 0, 8),
					Size = UDim2New(1, -40, 1, -110),
					BorderSizePixel = 0,
					TextSize = 14,
					BackgroundColor3 = FromRGB(179, 255, 170)
				})

				Items["Saturation"] = Instances:Create("Frame", {
					Parent = Items["Palette"].Instance,
					Name = "\0",
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, 0, 1, 0),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIGradient", {
					Parent = Items["Saturation"].Instance,
					Name = "\0",
					Transparency = NumSequence{NumSequenceKeypoint(0, 1), NumSequenceKeypoint(1, 0)}
				})

				Items["Value"] = Instances:Create("Frame", {
					Parent = Items["Palette"].Instance,
					Name = "\0",
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, 0, 1, 0),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(0, 0, 0)
				})

				Instances:Create("UIGradient", {
					Parent = Items["Value"].Instance,
					Name = "\0",
					Rotation = 90,
					Transparency = NumSequence{NumSequenceKeypoint(0, 1), NumSequenceKeypoint(1, 0)}
				})

				Instances:Create("UIStroke", {
					Parent = Items["Palette"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["PaletteDragger"] = Instances:Create("Frame", {
					Parent = Items["Palette"].Instance,
					Name = "\0",
					Position = UDim2New(0, 4, 0, 4),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(0, 2, 0, 2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIStroke", {
					Parent = Items["PaletteDragger"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["Hue"] = Instances:Create("TextButton", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					AnchorPoint = Vector2New(1, 0),
					Position = UDim2New(1, -8, 0, 8),
					Size = UDim2New(0, 15, 1, -88),
					BorderSizePixel = 0,
					TextSize = 14,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["HueInline"] = Instances:Create("TextButton", {
					Parent = Items["Hue"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					Size = UDim2New(1, 0, 1, 0),
					BorderSizePixel = 0,
					TextSize = 14,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIGradient", {
					Parent = Items["HueInline"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 0, 0)), RGBSequenceKeypoint(0.17, FromRGB(255, 255, 0)), RGBSequenceKeypoint(0.33, FromRGB(0, 255, 0)), RGBSequenceKeypoint(0.5, FromRGB(0, 255, 255)), RGBSequenceKeypoint(0.67, FromRGB(0, 0, 255)), RGBSequenceKeypoint(0.83, FromRGB(255, 0, 255)), RGBSequenceKeypoint(1, FromRGB(255, 0, 0))}
				})

				Items["HueDragger"] = Instances:Create("Frame", {
					Parent = Items["Hue"].Instance,
					Name = "\0",
					Size = UDim2New(1, 0, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIStroke", {
					Parent = Items["HueDragger"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Instances:Create("UIStroke", {
					Parent = Items["Hue"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["Alpha"] = Instances:Create("TextButton", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					AnchorPoint = Vector2New(0, 1),
					Position = UDim2New(0, 8, 1, -80),
					Size = UDim2New(1, -40, 0, 15),
					BorderSizePixel = 0,
					TextSize = 14,
					BackgroundColor3 = FromRGB(179, 255, 170)
				})

				Instances:Create("UIStroke", {
					Parent = Items["Alpha"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["Checkers"] = Instances:Create("ImageLabel", {
					Parent = Items["Alpha"].Instance,
					Name = "\0",
					ScaleType = Enum.ScaleType.Tile,
					BorderColor3 = FromRGB(0, 0, 0),
					TileSize = UDim2New(0, 6, 0, 6),
					Image = "http://www.roblox.com/asset/?id=18274452449",
					BackgroundTransparency = 1,
					Size = UDim2New(1, 0, 1, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIGradient", {
					Parent = Items["Checkers"].Instance,
					Name = "\0",
					Transparency = NumSequence{NumSequenceKeypoint(0, 1), NumSequenceKeypoint(0.37, 0.5), NumSequenceKeypoint(1, 0)}
				})

				Items["AlphaDragger"] = Instances:Create("Frame", {
					Parent = Items["Alpha"].Instance,
					Name = "\0",
					Size = UDim2New(0, 1, 1, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIStroke", {
					Parent = Items["AlphaDragger"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["HexBackground"] = Instances:Create("Frame", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					BorderColor3 = FromRGB(0, 0, 0),
					AnchorPoint = Vector2New(0, 1),
					Position = UDim2New(0, 8, 1, -55),
					Size = UDim2New(1, -16, 0, 18),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(43, 43, 43)
				})  Items["HexBackground"]:AddToTheme({BackgroundColor3 = "Element"})

				Instances:Create("UIStroke", {
					Parent = Items["HexBackground"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Instances:Create("UIGradient", {
					Parent = Items["HexBackground"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Items["HexInput"] = Instances:Create("TextBox", {
					Parent = Items["HexBackground"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					PlaceholderColor3 = FromRGB(185, 185, 185),
					PlaceholderText = "#",
					TextSize = 9,
					Size = UDim2New(1, -16, 0, 15),
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "#96c83c",
					CursorPosition = -1,
					BackgroundTransparency = 1,
					TextXAlignment = Enum.TextXAlignment.Left,
					ZIndex = 2,
					ClearTextOnFocus = false,
					Position = UDim2New(0, 5, 0, 0),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["HexInput"]:AddToTheme({TextColor3 = "Text"})
			end

			local Dropdown = {
				Multi = true,
				Callback = function() end,
				IsOpen = false,
				Value = { },
				Options = { }
			}

			Items = Items do
				Items["Dropdown"] = Instances:Create("Frame", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					BackgroundTransparency = 1,
					Size = UDim2New(1, -16, 0, 40),
					AnchorPoint = Vector2New(0, 1),
					Position = UDim2New(0, 8, 1, -10),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["Dropdown"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "Animation",
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 0, 0, 0),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = "Text"})

				Items["RealDropdown"] = Instances:Create("TextButton", {
					Parent = Items["Dropdown"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					AnchorPoint = Vector2New(0, 1),
					BorderSizePixel = 0,
					Position = UDim2New(0, 0, 1, 0),
					Size = UDim2New(1, 0, 0, 18),
					ZIndex = 2,
					TextSize = 14,
					BackgroundColor3 = FromRGB(43, 43, 43)
				})  Items["RealDropdown"]:AddToTheme({BackgroundColor3 = "Element"})

				Instances:Create("UIGradient", {
					Parent = Items["RealDropdown"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Instances:Create("UIStroke", {
					Parent = Items["RealDropdown"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["Value"] = Instances:Create("TextLabel", {
					Parent = Items["RealDropdown"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "--",
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 5, 0, 0),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Value"]:AddToTheme({TextColor3 = "Text"})

				Items["OptionHolder"] = Instances:Create("TextButton", {
					Parent = Items["Dropdown"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					Visible = false,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					Size = UDim2New(1, -19, 0, 25),
					AutomaticSize = Enum.AutomaticSize.Y,
					Position = UDim2New(0, 19, 1, 5),
					BorderSizePixel = 0,
					ZIndex = 6,
					TextSize = 14,
					BackgroundColor3 = FromRGB(43, 43, 43)
				})  Items["OptionHolder"]:AddToTheme({BackgroundColor3 = "Element"})

				Instances:Create("UIStroke", {
					Parent = Items["OptionHolder"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Instances:Create("UIGradient", {
					Parent = Items["OptionHolder"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Instances:Create("UIListLayout", {
					Parent = Items["OptionHolder"].Instance,
					Name = "\0",
					SortOrder = Enum.SortOrder.LayoutOrder
				})

				Items["Padding"] = Instances:Create("UIPadding", {
					Parent = Items["OptionHolder"].Instance,
					Name = "\0",
					PaddingTop = UDimNew(0, 2),
					PaddingBottom = UDimNew(0, 2),
					PaddingRight = UDimNew(0, 8),
					PaddingLeft = UDimNew(0, 8)
				})
			end

			local Debounce = false
			local RenderStepped

			function Dropdown:SetOpen(Bool)
				if Debounce then
					return
				end

				Dropdown.IsOpen = Bool
				Debounce = true

				if Dropdown.IsOpen then
					Items["OptionHolder"].Instance.Visible = true
					Items["OptionHolder"].Instance.Parent = Library.Holder.Instance

					RenderStepped = RunService.RenderStepped:Connect(function()
						Items["OptionHolder"].Instance.Position = UDim2New(0, Items["RealDropdown"].Instance.AbsolutePosition.X, 0, Items["RealDropdown"].Instance.AbsolutePosition.Y + Items["RealDropdown"].Instance.AbsoluteSize.Y + 5)
						Items["OptionHolder"].Instance.Size = UDim2New(0, Items["RealDropdown"].Instance.AbsoluteSize.X, 0, 0)
					end)

					Library.OpenFrames[Dropdown] = Dropdown
				else
					if Library.OpenFrames[Dropdown] then
						Library.OpenFrames[Dropdown] = nil
					end

					if RenderStepped then
						RenderStepped:Disconnect()
						RenderStepped = nil
					end
				end

				local Descendants = Items["OptionHolder"].Instance:GetDescendants()
				TableInsert(Descendants, Items["OptionHolder"].Instance)

				local NewTween

				for Index, Value in Descendants do
					local TransparencyProperty = Tween:GetProperty(Value)

					if not TransparencyProperty then
						continue
					end

					if type(TransparencyProperty) == "table" then
						for _, Property in TransparencyProperty do
							NewTween = Tween:FadeItem(Value, Property, Bool, Library.FadeSpeed)
						end
					else
						NewTween = Tween:FadeItem(Value, TransparencyProperty, Bool, Library.FadeSpeed)
					end
				end

				NewTween.Tween.Completed:Connect(function()
					Debounce = false
					Items["OptionHolder"].Instance.Visible = Dropdown.IsOpen
					task.wait(0.2)
					Items["OptionHolder"].Instance.Parent = not Dropdown.IsOpen and Library.UnusedHolder.Instance or Library.Holder.Instance
				end)
			end

			function Dropdown:Add(Option)
				local OptionButton = Instances:Create("TextButton", {
					Parent = Items["OptionHolder"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Option,
					AutoButtonColor = false,
					BorderSizePixel = 0,
					BackgroundTransparency = 1,
					TextXAlignment = Enum.TextXAlignment.Left,
					Size = UDim2New(1, 0, 0, 18),
					ZIndex = 6,
					TextSize = 9,
					BackgroundColor3 = FromRGB(150, 200, 60)
				})  OptionButton:ChangeItemTheme({TextColor3 = "Text"})

				local OptionData = {
					Button = OptionButton,
					Name = Option,
					Selected = false
				}

				function OptionData:Toggle(Status)
					if Status == "Active" then
						OptionData.Button:ChangeItemTheme({TextColor3 = "Accent"})
						OptionData.Button:Tween(nil, {TextColor3 = Library.Theme.Accent})
					else
						OptionData.Button:ChangeItemTheme({TextColor3 = "Text"})
						OptionData.Button:Tween(nil, {TextColor3 = Library.Theme.Text})
					end
				end

				function OptionData:Set()
					OptionData.Selected = not OptionData.Selected

					if Dropdown.Multi then
						local Index = TableFind(Dropdown.Value, OptionData.Name)

						if Index then
							TableRemove(Dropdown.Value, Index)
						else
							TableInsert(Dropdown.Value, OptionData.Name)
						end

						OptionData:Toggle(Index and "Inactive" or "Active")

						local TextFormat = #Dropdown.Value > 0 and TableConcat(Dropdown.Value, ", ") or "--"
						Items["Value"].Instance.Text = TextFormat
					else
						if OptionData.Selected then
							Dropdown.Value = OptionData.Name

							OptionData.Selected = true
							OptionData:Toggle("Active")

							for Index, Value in Dropdown.Options do
								if Value ~= OptionData then
									Value.Selected = false
									Value:Toggle("Inactive")
								end
							end

							Items["Value"].Instance.Text = OptionData.Name
						else
							Dropdown.Value = nil

							OptionData.Selected = false
							OptionData:Toggle("Inactive")

							Items["Value"].Instance.Text = "--"
						end
					end

					if Dropdown.Callback then
						Library:SafeCall(Dropdown.Callback, Dropdown.Value)
					end
				end

				OptionData.Button:Connect("MouseButton1Down", function()
					OptionData:Set()
				end)

				Dropdown.Options[OptionData.Name] = OptionData
				return OptionData
			end



			-- Taken from devforum, credits to "ifkpop" (https://devforum.roblox.com/t/how-would-i-know-if-a-ui-object-has-been-clipped/1714338/2)
			local CompareVectors = function(PointA, PointB)
				return (PointA.X < PointB.X) or (PointA.Y < PointB.Y)
			end

			local IsClipped = function(Object, Column)
				local Parent = Column

				local BoundryTop = Parent.AbsolutePosition
				local BoundryBottom = BoundryTop + Parent.AbsoluteSize

				local Top = Object.AbsolutePosition
				local Bottom = Top + Object.AbsoluteSize

				return CompareVectors(Top, BoundryTop) or CompareVectors(BoundryBottom, Bottom)
			end

			Items["RealDropdown"]:Connect("Changed", function(Property)
				if Property == "AbsolutePosition" and Dropdown.IsOpen then
					Dropdown.IsOpen = not IsClipped(Items["OptionHolder"].Instance, Dropdown.Section.Items["SectionOutline"].Instance.Parent)
					Items["OptionHolder"].Instance.Visible = Dropdown.IsOpen
				end
			end)

			Items["RealDropdown"]:Connect("MouseButton1Down", function()
				Dropdown:SetOpen(not Dropdown.IsOpen)
			end)

			Library:Connect(UserInputService.InputBegan, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					if not Dropdown.IsOpen then
						return
					end

					if Library:IsMouseOverFrame(Items["ColorpickerWindowOutline"]) or Library:IsMouseOverFrame(Items["RealDropdown"]) or Library:IsMouseOverFrame(Items["OptionHolder"]) then
						return
					end

					Dropdown:SetOpen(false)
				end
			end)

			local rainbow = Dropdown:Add("Rainbow")
			local breathing = Dropdown:Add("Breathing")

			local OldColor = Colorpicker.Color
			local OldAlpha = Colorpicker.Alpha

			Dropdown.Callback = function(Value)
				if not Library.Flags[Colorpicker.Flag] then Library.Flags[Colorpicker.Flag] = {} end
				if TableFind(Value, "Rainbow") then
					OldColor = Colorpicker.Color
					Library.Flags[Colorpicker.Flag]["Rainbow"] = true
					Library:Thread(function()
						while task.wait() do
							local RainbowHue = MathAbs(MathSin(tick() * 0.32))
							local Color = FromHSV(RainbowHue, 1, 1)

							Colorpicker:Set(Color, Colorpicker.Alpha)

							if not TableFind(Value, "Rainbow") then
								Colorpicker:Set(OldColor, Colorpicker.Alpha)
								Library.Flags[Colorpicker.Flag]["Rainbow"] = false
								break
							end
						end
					end)
				end

				if TableFind(Value, "Breathing") then
					Library.Flags[Colorpicker.Flag]["Breathing"] = true
					Library:Thread(function()
						OldAlpha = Colorpicker.Alpha
						while task.wait() do
							local AlphaValue = MathAbs(MathSin(tick() * 0.8))

							Colorpicker:Set(Colorpicker.Color, AlphaValue)

							if not TableFind(Value, "Breathing") then
								Colorpicker:Set(Colorpicker.Color, OldAlpha)
								Library.Flags[Colorpicker.Flag]["Breathing"] = false
								break
							end
						end
					end)
				end
			end

			local SlidingPalette = false
			local SlidingHue = false
			local SlidingAlpha = false

			local Debounce = false
			local RenderStepped

			function Colorpicker:Get()
				return Colorpicker.Color, Colorpicker.Alpha
			end

			function Colorpicker:SetOpen(Bool)
				if Debounce then
					return
				end

				Colorpicker.IsOpen = Bool

				Debounce = true

				if Colorpicker.IsOpen then
					Items["ColorpickerWindowOutline"].Instance.Visible = true
					Items["ColorpickerWindowOutline"].Instance.Parent = Library.Holder.Instance

					RenderStepped = RunService.RenderStepped:Connect(function()
						Items["ColorpickerWindowOutline"].Instance.Position = UDim2New(0, Items["ColorpickerButton"].Instance.AbsolutePosition.X, 0, Items["ColorpickerButton"].Instance.AbsolutePosition.Y + Items["ColorpickerButton"].Instance.AbsoluteSize.Y + 5)
					end)

					for Index, Value in Library.OpenFrames do
						if Value ~= Colorpicker then
							Value:SetOpen(false)
						end
					end

					Library.OpenFrames[Colorpicker] = Colorpicker
				else
					if Library.OpenFrames[Colorpicker] then
						Library.OpenFrames[Colorpicker] = nil
					end

					if RenderStepped then
						RenderStepped:Disconnect()
						RenderStepped = nil
					end
				end

				local Descendants = Items["ColorpickerWindowOutline"].Instance:GetDescendants()
				TableInsert(Descendants, Items["ColorpickerWindowOutline"].Instance)

				local NewTween

				for Index, Value in Descendants do
					local TransparencyProperty = Tween:GetProperty(Value)

					if not TransparencyProperty then
						continue
					end

					if not Value.ClassName:find("UI") then
						Value.ZIndex = Colorpicker.IsOpen and 104 or 1
					end

					if type(TransparencyProperty) == "table" then
						for _, Property in TransparencyProperty do
							NewTween = Tween:FadeItem(Value, Property, Bool, Library.FadeSpeed)
						end
					else
						NewTween = Tween:FadeItem(Value, TransparencyProperty, Bool, Library.FadeSpeed)
					end
				end

				NewTween.Tween.Completed:Connect(function()
					Debounce = false
					Items["ColorpickerWindowOutline"].Instance.Visible = Colorpicker.IsOpen
					task.wait(0.2)
					Items["ColorpickerWindowOutline"].Instance.Parent = not Colorpicker.IsOpen and Library.UnusedHolder.Instance or Library.Holder.Instance
				end)
			end

			Items["ColorpickerButton"]:Connect("MouseButton1Down", function()
				Colorpicker:SetOpen(not Colorpicker.IsOpen)
			end)

			function Colorpicker:SlidePalette(Input)
				if not Input or not SlidingPalette then
					return
				end

				local ValueX = MathClamp(1 - (Input.Position.X - Items["Palette"].Instance.AbsolutePosition.X) / Items["Palette"].Instance.AbsoluteSize.X, 0, 1)
				local ValueY = MathClamp(1 - (Input.Position.Y - Items["Palette"].Instance.AbsolutePosition.Y) / Items["Palette"].Instance.AbsoluteSize.Y, 0, 1)

				Colorpicker.Saturation = ValueX
				Colorpicker.Value = ValueY

				local SlideX = MathClamp((Input.Position.X - Items["Palette"].Instance.AbsolutePosition.X) / Items["Palette"].Instance.AbsoluteSize.X, 0, 0.985)
				local SlideY = MathClamp((Input.Position.Y - Items["Palette"].Instance.AbsolutePosition.Y) / Items["Palette"].Instance.AbsoluteSize.Y, 0, 0.985)

				Items["PaletteDragger"]:Tween(TweenInfo.new(Library.Tween.Time, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2New(SlideX, 0, SlideY, 0)})
				Colorpicker:Update()
			end

			function Colorpicker:SlideHue(Input)
				if not Input or not SlidingHue then
					return
				end

				local ValueY = MathClamp((Input.Position.Y - Items["Hue"].Instance.AbsolutePosition.Y) / Items["Hue"].Instance.AbsoluteSize.Y, 0, 1)

				Colorpicker.Hue = ValueY

				local SlideY = MathClamp((Input.Position.Y - Items["Hue"].Instance.AbsolutePosition.Y) / Items["Hue"].Instance.AbsoluteSize.Y, 0, 0.99)

				Items["HueDragger"]:Tween(TweenInfo.new(Library.Tween.Time, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2New(0, 0, SlideY, 0)})
				Colorpicker:Update()
			end

			function Colorpicker:SlideAlpha(Input)
				if not Input or not SlidingAlpha then
					return
				end

				local ValueX = MathClamp((Input.Position.X - Items["Alpha"].Instance.AbsolutePosition.X) / Items["Alpha"].Instance.AbsoluteSize.X, 0, 1)

				Colorpicker.Alpha = ValueX

				local SlideX = MathClamp((Input.Position.X - Items["Alpha"].Instance.AbsolutePosition.X) / Items["Alpha"].Instance.AbsoluteSize.X, 0, 0.99)

				Items["AlphaDragger"]:Tween(TweenInfo.new(Library.Tween.Time, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2New(SlideX, 0, 0, 0)})
				Colorpicker:Update(true)
			end

			function Colorpicker:Update(IsFromAlpha)
				local Hue, Saturation, Value = Colorpicker.Hue, Colorpicker.Saturation, Colorpicker.Value
				Colorpicker.Color = FromHSV(Hue, Saturation, Value)
				Colorpicker.HexValue = Colorpicker.Color:ToHex()

				Library.Flags[Colorpicker.Flag] = {
					Alpha = Colorpicker.Alpha,
					Transparency = Colorpicker.Alpha,
					Color = Colorpicker.Color
				}

				Items["ColorpickerButton"]:Tween(nil, {BackgroundColor3 = Colorpicker.Color})
				Items["Palette"]:Tween(nil, {BackgroundColor3 = FromHSV(Hue, 1, 1)})
				Items["HexInput"].Instance.Text = "#"..Colorpicker.HexValue

				if not IsFromAlpha then
					Items["Alpha"]:Tween(nil, {BackgroundColor3 = Colorpicker.Color})
				end

				if Data.Callback then
					Library:SafeCall(Data.Callback, Colorpicker.Color, Colorpicker.Alpha)
				end
			end

			function Colorpicker:Set(Color, Alpha, Rainbow, Breathing)
				if type(Color) == "table" then
					Color = FromRGB(Color[1], Color[2], Color[3])
				elseif type(Color) == "string" then
					Color = FromHex(Color)
				end

				Colorpicker.Hue, Colorpicker.Saturation, Colorpicker.Value = Color:ToHSV()
				Colorpicker.Alpha = Alpha or 0

				local PaletteValueX = MathClamp(1 - Colorpicker.Saturation, 0, 0.985)
				local PaletteValueY = MathClamp(1 - Colorpicker.Value, 0, 0.985)

				local AlphaPositionX = MathClamp(Colorpicker.Alpha, 0, 0.985)

				local HuePositionY = MathClamp(Colorpicker.Hue, 0, 0.985)

				Items["PaletteDragger"]:Tween(TweenInfo.new(Library.Tween.Time, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2New(PaletteValueX, 0, PaletteValueY, 0)})
				Items["HueDragger"]:Tween(TweenInfo.new(Library.Tween.Time, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2New(0, 0, HuePositionY, 0)})
				Items["AlphaDragger"]:Tween(TweenInfo.new(Library.Tween.Time, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2New(AlphaPositionX, 0, 0, 0)})
				Colorpicker:Update(false)

				-- rainbow:Set(Rainbow)
				-- breathing:Set(Breathing)
			end

			Items["Palette"]:Connect("InputBegan", function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					SlidingPalette = true
					Colorpicker:SlidePalette(Input)
				end
			end)

			Items["Palette"]:Connect("InputEnded", function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					SlidingPalette = false
				end
			end)

			Items["HueInline"]:Connect("InputBegan", function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					SlidingHue = true
					Colorpicker:SlideHue(Input)
				end
			end)

			Items["HueInline"]:Connect("InputEnded", function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					SlidingHue = false
				end
			end)

			Items["Alpha"]:Connect("InputBegan", function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					SlidingAlpha = true
					Colorpicker:SlideAlpha(Input)
				end
			end)

			Items["Alpha"]:Connect("InputEnded", function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					SlidingAlpha = false
				end
			end)

			Items["HexInput"]:Connect("FocusLost", function()
				Colorpicker:Set(tostring(Items["HexInput"].Instance.Text), Colorpicker.Alpha)
			end)

			Library:Connect(UserInputService.InputChanged, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseMovement then
					if SlidingPalette then
						Colorpicker:SlidePalette(Input)
					elseif SlidingHue then
						Colorpicker:SlideHue(Input)
					elseif SlidingAlpha then
						Colorpicker:SlideAlpha(Input)
					end
				end
			end)

			Library:Connect(UserInputService.InputBegan, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					if not Colorpicker.IsOpen then
						return
					end

					if Library:IsMouseOverFrame(Items["ColorpickerWindowOutline"]) or Library:IsMouseOverFrame(Items["RealDropdown"]) or Library:IsMouseOverFrame(Items["OptionHolder"]) then
						return
					end

					Colorpicker:SetOpen(false)
				end
			end)

			if Data.Default then
				Colorpicker:Set(Data.Default, Data.Alpha)
			end

			Library.SetFlags[Colorpicker.Flag] = function(Color, Alpha)
				Colorpicker:Set(Color, Alpha)
			end

			return Colorpicker, Items
		end

		Library.CreateKeybind = function(self, Data)
			local Keybind = {
				Flag = Data.Flag,
				IsOpen = false,

				Key = "",
				Value = "",
				Mode = "",

				Toggled = false,
				Picking = false
			}

			local KeyListItem

			if Library.KeyList then
				KeyListItem = Library.KeyList:Add(Data.Name, "None", "None")
			end

			local Items = { } do
				Items["KeyButton"] = Instances:Create("TextButton", {
					Parent = Data.Parent.Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "MB2",
					AutoButtonColor = false,
					AutomaticSize = Enum.AutomaticSize.X,
					BackgroundTransparency = 1,
					Size = UDim2New(0, 0, 1, 0),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["KeybindWindowOutline"] = Instances:Create("Frame", {
					Parent = Library.UnusedHolder.Instance,
					Name = "\0",
					Visible = false,
					Position = UDim2New(0, 235, 0, 25),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(0, 50, 0, 61),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(31, 31, 31)
				})  Items["KeybindWindowOutline"]:AddToTheme({BackgroundColor3 = "Outline 1"})

				Items["InlineOutline"] = Instances:Create("Frame", {
					Parent = Items["KeybindWindowOutline"].Instance,
					Name = "\0",
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(60, 60, 60)
				})  Items["InlineOutline"]:AddToTheme({BackgroundColor3 = "Outline 2"})

				Items["InlineOne"] = Instances:Create("Frame", {
					Parent = Items["InlineOutline"].Instance,
					Name = "\0",
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(40, 40, 40)
				})  Items["InlineOne"]:AddToTheme({BackgroundColor3 = "Inline 1"})

				Instances:Create("UIListLayout", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					Padding = UDimNew(0, 3),
					SortOrder = Enum.SortOrder.LayoutOrder
				})

				Items["Toggle"] = Instances:Create("TextButton", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(150, 200, 60),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "Toggle",
					AutoButtonColor = false,
					BackgroundTransparency = 1,
					Size = UDim2New(1, 0, 0, 15),
					BorderSizePixel = 0,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Toggle"]:AddToTheme({TextColor3 = "Text"})

				Items["Hold"] = Instances:Create("TextButton", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "Hold",
					AutoButtonColor = false,
					BackgroundTransparency = 1,
					Size = UDim2New(1, 0, 0, 15),
					BorderSizePixel = 0,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Hold"]:AddToTheme({TextColor3 = "Text"})

				Items["Always"] = Instances:Create("TextButton", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "Always",
					AutoButtonColor = false,
					BackgroundTransparency = 1,
					Size = UDim2New(1, 0, 0, 15),
					BorderSizePixel = 0,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Always"]:AddToTheme({TextColor3 = "Text"})
			end

			local Modes = {
				["Toggle"] = Items["Toggle"],
				["Hold"] = Items["Hold"],
				["Always"] = Items["Always"]
			}

			local Update = function()
				if KeyListItem then
					KeyListItem:Set(Data.Name, Keybind.Value, Keybind.Mode)
					KeyListItem:SetStatus(Keybind.Toggled)
				end
			end

			function Keybind:Get()
				return Keybind.Key, Keybind.Mode, Keybind.Toggled
			end

			function Keybind:Set(Key)
				if StringFind(tostring(Key), "Enum") then
					Keybind.Key = tostring(Key)

					Key = Key.Name == "Backspace" and "None" or Key.Name

					local KeyString = Keys[Keybind.Key] or Key and StringGSub(Key, "Enum.", "") or "None"
					local TextToDisplay = StringGSub(StringGSub(KeyString, "KeyCode.", ""), "UserInputType.", "") or "None"

					Keybind.Value = TextToDisplay
					Items["KeyButton"].Instance.Text = TextToDisplay

					Library.Flags[Keybind.Flag] = {
						Mode = Keybind.Mode,
						Key = Keybind.Key,
						Toggled = Keybind.Toggled
					}

					if Data.Callback then
						Library:SafeCall(Data.Callback, Keybind.Toggled)
					end

					Update()
				elseif type(Key) == "table" then
					local RealKey = Key.Key == "Backspace" and "None" or Key.Key
					Keybind.Key = tostring(Key.Key)

					if Key.Mode then
						Keybind.Mode = Key.Mode
						Keybind:SetMode(Key.Mode)
					else
						Keybind.Mode = "Toggle"
						Keybind:SetMode("Toggle")
					end

					local KeyString = Keys[Keybind.Key] or StringGSub(tostring(RealKey), "Enum.", "") or RealKey
					local TextToDisplay = KeyString and StringGSub(StringGSub(KeyString, "KeyCode.", ""), "UserInputType.", "") or "None"

					TextToDisplay = StringGSub(StringGSub(KeyString, "KeyCode.", ""), "UserInputType.", "")

					Keybind.Value = TextToDisplay
					Items["KeyButton"].Instance.Text = TextToDisplay

					if Key.Toggled then
						Keybind:Press(Key.Toggled, true)
					end

					if Data.Callback then
						Library:SafeCall(Data.Callback, Keybind.Toggled)
					end

					Update()
				elseif TableFind({"Toggle", "Hold", "Always"}, Key) then
					Keybind.Mode = Key
					Keybind:SetMode(Keybind.Mode)

					if Data.Callback then
						Library:SafeCall(Data.Callback, Keybind.Toggled)
					end

					Update()
				elseif type(Key) == "boolean" then
					Keybind:Press(Key, true)
				end

				Keybind.Picking = false
			end

			local Debounce = false
			local RenderStepped

			function Keybind:SetOpen(Bool)
				if Debounce then
					return
				end

				Keybind.IsOpen = Bool

				Debounce = true

				if Keybind.IsOpen then
					Items["KeybindWindowOutline"].Instance.Visible = true
					Items["KeybindWindowOutline"].Instance.Parent = Library.Holder.Instance

					RenderStepped = RunService.RenderStepped:Connect(function()
						Items["KeybindWindowOutline"].Instance.Position = UDim2New(0, Items["KeyButton"].Instance.AbsolutePosition.X, 0, Items["KeyButton"].Instance.AbsolutePosition.Y + Items["KeyButton"].Instance.AbsoluteSize.Y + 5)
					end)

					for Index, Value in Library.OpenFrames do
						if Value ~= Keybind then
							Value:SetOpen(false)
						end
					end

					Library.OpenFrames[Keybind] = Keybind
				else
					if Library.OpenFrames[Keybind] then
						Library.OpenFrames[Keybind] = nil
					end

					if RenderStepped then
						RenderStepped:Disconnect()
						RenderStepped = nil
					end
				end

				local Descendants = Items["KeybindWindowOutline"].Instance:GetDescendants()
				TableInsert(Descendants, Items["KeybindWindowOutline"].Instance)

				local NewTween

				for Index, Value in Descendants do
					local TransparencyProperty = Tween:GetProperty(Value)

					if not TransparencyProperty then
						continue
					end

					if not Value.ClassName:find("UI") then
						Value.ZIndex = Keybind.IsOpen and 105 or 1
					end

					if type(TransparencyProperty) == "table" then
						for _, Property in TransparencyProperty do
							NewTween = Tween:FadeItem(Value, Property, Bool, Library.FadeSpeed)
						end
					else
						NewTween = Tween:FadeItem(Value, TransparencyProperty, Bool, Library.FadeSpeed)
					end
				end

				NewTween.Tween.Completed:Connect(function()
					Debounce = false
					Items["KeybindWindowOutline"].Instance.Visible = Keybind.IsOpen
					task.wait(0.2)
					Items["KeybindWindowOutline"].Instance.Parent = not Keybind.IsOpen and Library.UnusedHolder.Instance or Library.Holder.Instance
				end)
			end

			function Keybind:SetMode(Mode)
				for Index, Value in Modes do
					if Index == Mode then
						Value:ChangeItemTheme({TextColor3 = "Accent"})
						Value:Tween(nil, {TextColor3 = Library.Theme.Accent})
					else
						Value:ChangeItemTheme({TextColor3 = "Text"})
						Value:Tween(nil, {TextColor3 = FromRGB(255, 255, 255)})
					end
				end

				Library.Flags[Keybind.Flag] = {
					Mode = Keybind.Mode,
					Key = Keybind.Key,
					Toggled = Mode == "Always" and true or Keybind.Toggled
				}

				if Data.Callback then
					Library:SafeCall(Data.Callback, Keybind.Toggled)
				end

				Update()
			end

			function Keybind:Press(Bool, ConfigException)
				if not ConfigException then
					if Keybind.Mode == "Toggle" then
						Keybind.Toggled = not Keybind.Toggled
					elseif Keybind.Mode == "Hold" then
						Keybind.Toggled = Bool
					elseif Keybind.Mode == "Always" then
						Keybind.Toggled = true
					end
				else
					Keybind.Toggled = Bool
				end

				Library.Flags[Keybind.Flag] = {
					Mode = Keybind.Mode,
					Key = Keybind.Key,
					Toggled = Keybind.Toggled
				}

				if Data.Callback then
					Library:SafeCall(Data.Callback, Keybind.Toggled)
				end

				Update()
			end

			local CompareVectors = function(PointA, PointB)
				return (PointA.X < PointB.X) or (PointA.Y < PointB.Y)
			end

			local IsClipped = function(Object, Column)
				local Parent = Column

				local BoundryTop = Parent.AbsolutePosition
				local BoundryBottom = BoundryTop + Parent.AbsoluteSize

				local Top = Object.AbsolutePosition
				local Bottom = Top + Object.AbsoluteSize

				return CompareVectors(Top, BoundryTop) or CompareVectors(BoundryBottom, Bottom)
			end

			Items["KeyButton"]:Connect("Changed", function(Property)
				if Property == "AbsolutePosition" and Keybind.IsOpen then
					Keybind.IsOpen = not IsClipped(Items["KeybindWindowOutline"].Instance, Data.Section.Items["SectionOutline"].Instance.Parent)
					Items["KeybindWindowOutline"].Instance.Visible = Keybind.IsOpen
				end
			end)

			Items["KeyButton"]:Connect("MouseButton1Click", function()
				Keybind.Picking = true

				Items["KeyButton"].Instance.Text = "."
				Library:Thread(function()
					local Count = 1

					while true do
						if not Keybind.Picking then
							break
						end

						if Count == 4 then
							Count = 1
						end

						Items["KeyButton"].Instance.Text = Count == 1 and "." or Count == 2 and ".." or Count == 3 and "..."
						Count += 1
						task.wait(0.4)
					end
				end)

				local InputBegan
				InputBegan = UserInputService.InputBegan:Connect(function(Input)
					print(Input.KeyCode, Input.UserInputType)
					if Input.UserInputType == Enum.UserInputType.Keyboard then
						Keybind:Set(Input.KeyCode)
					else
						Keybind:Set(Input.UserInputType)
					end

					InputBegan:Disconnect()
					InputBegan = nil
				end)
			end)

			Items["KeyButton"]:Connect("MouseButton2Down", function()
				Keybind:SetOpen(not Keybind.IsOpen)
			end)

			Library:Connect(UserInputService.InputBegan, function(Input, processed)


				if not not processed then
					return
				end

				if Keybind.Value == "None" then
					if Keybind.Mode == "Always" then
						Keybind:Press(true)
					end
					return
				end

				if tostring(Input.KeyCode) == Keybind.Key then
					if Keybind.Mode == "Toggle" then
						Keybind:Press()
					elseif Keybind.Mode == "Hold" or Keybind.Mode == "Always" then
						Keybind:Press(true)
					end
				elseif tostring(Input.UserInputType) == Keybind.Key then
					if Keybind.Mode == "Toggle" then
						Keybind:Press()
					elseif Keybind.Mode == "Hold" or Keybind.Mode == "Always" then
						Keybind:Press(true)
					end
				end

				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					if not Keybind.IsOpen then
						return
					end
					if Library:IsMouseOverFrame(Items["KeybindWindowOutline"]) then
						return
					end
					Keybind:SetOpen(false)
				end
			end)

			Library:Connect(UserInputService.InputEnded, function(Input)
				if Keybind.Value == "None" then
					if Keybind.Mode == "Always" then
						Keybind:Press(true)
					end
					return
				end

				if tostring(Input.KeyCode) == Keybind.Key then
					if Keybind.Mode == "Hold" then
						Keybind:Press(false)
					elseif Keybind.Mode == "Always" then
						Keybind:Press(true)
					end
				elseif tostring(Input.UserInputType) == Keybind.Key then
					if Keybind.Mode == "Hold" then
						Keybind:Press(false)
					elseif Keybind.Mode == "Always" then
						Keybind:Press(true)
					end
				end
			end)

			Items["Toggle"]:Connect("MouseButton1Down", function()
				Keybind.Mode = "Toggle"
				Keybind:SetMode("Toggle")
				Keybind:Press(false)
			end)

			Items["Hold"]:Connect("MouseButton1Down", function()
				Keybind.Mode = "Hold"
				Keybind:SetMode("Hold")
				Keybind:Press(false)
			end)

			Items["Always"]:Connect("MouseButton1Down", function()
				Keybind.Mode = "Always"
				Keybind:SetMode("Always")
				Keybind:Press(true)
			end)

			if Data.Default then
				Keybind:Set({Key = Data.Default, Mode = Data.Mode or "Toggle", Toggled = Data.Toggled})
			end

			Library.SetFlags[Keybind.Flag] = function(Value)
				Keybind:Set(Value)
			end

			return Keybind, Items
		end

		Library.Watermark = function(self, Name)
			local Watermark = { }

			local Items = { } do
				Items["Watermark"] = Instances:Create("Frame", {
					Parent = Library.Holder.Instance,
					Name = "\0",
					Position = UDim2New(0.5, 0, 0, 20),
					AnchorPoint = Vector2New(0.5, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(0, 125, 0, 32),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(31, 31, 31)
				})  Items["Watermark"]:AddToTheme({BackgroundColor3 = "Outline 1"})

				Items["Watermark"]:MakeDraggable()

				Items["InlineOutline"] = Instances:Create("Frame", {
					Parent = Items["Watermark"].Instance,
					Name = "\0",
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(60, 60, 60)
				})  Items["InlineOutline"]:AddToTheme({BackgroundColor3 = "Outline 2"})

				Items["InlineOne"] = Instances:Create("Frame", {
					Parent = Items["InlineOutline"].Instance,
					Name = "\0",
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(40, 40, 40)
				})  Items["InlineOne"]:AddToTheme({BackgroundColor3 = "Inline 1"})

				Items["InlineTwoOutline"] = Instances:Create("Frame", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					Position = UDim2New(0, 3, 0, 3),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -6, 1, -6),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(60, 60, 60)
				})  Items["InlineTwoOutline"]:AddToTheme({BackgroundColor3 = "Outline 2"})

				Items["InlineTwo"] = Instances:Create("Frame", {
					Parent = Items["InlineTwoOutline"].Instance,
					Name = "\0",
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(14, 14, 14)
				})  Items["InlineTwo"]:AddToTheme({BackgroundColor3 = "Background 1"})

				Items["BackgroundPattern"] = Instances:Create("ImageLabel", {
					Parent = Items["InlineTwo"].Instance,
					Name = "\0",
					ImageColor3 = FromRGB(21, 21, 21),
					ScaleType = Enum.ScaleType.Tile,
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, 0, 1, 0),
					Image = "rbxassetid://8509210785",
					BackgroundTransparency = 1,
					TileSize = UDim2New(0, 8, 0, 8),
					ResampleMode = Enum.ResamplerMode.Pixelated,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["Accent"] = Instances:Create("Frame", {
					Parent = Items["InlineTwo"].Instance,
					Name = "\0",
					Size = UDim2New(1, -2, 0, 2),
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(150, 200, 60)
				})  Items["Accent"]:AddToTheme({BackgroundColor3 = "Accent"})

				Instances:Create("UIGradient", {
					Parent = Items["Accent"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(107, 107, 107))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["InlineTwo"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Name,
					AnchorPoint = Vector2New(0.5, 0.5),
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0.5, 0, 0.5, 0),
					BorderSizePixel = 0,
					AutomaticSize = Enum.AutomaticSize.X,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = "Text"})
			end

			function Watermark:SetText(Text)
				Text = tostring(Text)
				Items["Text"].Instance.Text = Text
				Items["Watermark"]:Tween(nil, {Size = UDim2New(0, Items["Text"].Instance.TextBounds.X + 20, 0, 32)})
			end

			function Watermark:SetVisibility(Bool)
				Items["Watermark"].Instance.Visible = Bool
			end

			Watermark:SetText(Name)

			return Watermark
		end

		Library.KeybindList = function(self)
			local KeybindList = { }
			Library.KeyList = KeybindList

			local Items = { } do
				Items["KeybindList"] = Instances:Create("Frame", {
					Parent = Library.Holder.Instance,
					Name = "\0",
					AnchorPoint = Vector2New(0, 0.5),
					Position = UDim2New(0, 20, 0.5, 0),
					BorderColor3 = FromRGB(60, 60, 60),
					BorderSizePixel = 2,
					AutomaticSize = Enum.AutomaticSize.XY,
					BackgroundColor3 = FromRGB(14, 14, 14)
				})  Items["KeybindList"]:AddToTheme({BackgroundColor3 = "Background 1", BorderColor3 = "Outline 2"})

				Items["KeybindList"]:MakeDraggable()

				Instances:Create("UIStroke", {
					Parent = Items["KeybindList"].Instance,
					Name = "\0",
					Color = FromRGB(31, 31, 31),
					LineJoinMode = Enum.LineJoinMode.Miter,
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				})  :AddToTheme({Color = "Outline 1"})

				Items["BackgroundPattern"] = Instances:Create("ImageLabel", {
					Parent = Items["KeybindList"].Instance,
					Name = "\0",
					ImageColor3 = FromRGB(21, 21, 21),
					ScaleType = Enum.ScaleType.Tile,
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, 16, 1, 7),
					TileSize = UDim2New(0, 8, 0, 8),
					Image = "rbxassetid://8509210785",
					BackgroundTransparency = 1,
					Position = UDim2New(0, -8, 0, -2),
					ResampleMode = Enum.ResamplerMode.Pixelated,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["KeybindList"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "Keybinds",
					AutomaticSize = Enum.AutomaticSize.X,
					BackgroundTransparency = 1,
					Size = UDim2New(0, 0, 0, 15),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = "Text"})

				Instances:Create("UIPadding", {
					Parent = Items["KeybindList"].Instance,
					Name = "\0",
					PaddingTop = UDimNew(0, 2),
					PaddingBottom = UDimNew(0, 5),
					PaddingRight = UDimNew(0, 8),
					PaddingLeft = UDimNew(0, 8)
				})

				Items["Accent"] = Instances:Create("Frame", {
					Parent = Items["KeybindList"].Instance,
					Name = "\0",
					Size = UDim2New(1, 4, 0, 2),
					Position = UDim2New(0, -2, 0, 20),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(150, 200, 60)
				})  Items["Accent"]:AddToTheme({BackgroundColor3 = "Accent"})

				Instances:Create("UIGradient", {
					Parent = Items["Accent"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(107, 107, 107))}
				})

				Items["Content"] = Instances:Create("Frame", {
					Parent = Items["KeybindList"].Instance,
					Name = "\0",
					BorderColor3 = FromRGB(0, 0, 0),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 0, 0, 25),
					BorderSizePixel = 0,
					ZIndex = 2,
					AutomaticSize = Enum.AutomaticSize.XY,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIListLayout", {
					Parent = Items["Content"].Instance,
					Name = "\0",
					Padding = UDimNew(0, 2),
					SortOrder = Enum.SortOrder.LayoutOrder
				})
			end

			function KeybindList:Add(Name, Key, Mode)
				local NewKey = Instances:Create("TextLabel", {
					Parent = Items["Content"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Name .. " - " .. Key .. " (" .. Mode .. ")",
					AutomaticSize = Enum.AutomaticSize.X,
					BackgroundTransparency = 1,
					Size = UDim2New(0, 0, 0, 15),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  NewKey:AddToTheme({TextColor3 = "Text"})

				function NewKey:Set(Name, Key, Mode)
					NewKey.Instance.Text = Name .. " - " .. Key .. " (" .. Mode .. ")"
				end

				function NewKey:SetStatus(Bool)
					if Bool then
						NewKey:ChangeItemTheme({TextColor3 = "Accent"})
						NewKey:Tween(nil, {TextColor3 = Library.Theme.Accent})
						NewKey.Instance.Visible = true
					else
						NewKey:Tween(nil, {TextColor3 = Library.Theme.Text})
						NewKey:ChangeItemTheme({TextColor3 = "Text"})
						NewKey.Instance.Visible = false
					end
				end

				return NewKey
			end

			function KeybindList:SetVisiblity(Bool)
				Items["KeybindList"].Instance.Visible = Bool
			end

			return KeybindList
		end

		Library.Notification = function(self, Data)
			local Text = Data.Text or Data.text
			local Duration = Data.Duration or Data.duration or Data.Time or Data.time
			local Color = Library.Theme.Accent
			local Items = { } do
				Items["Notification"] = Instances:Create("Frame", {
					Parent = Library.NotifHolder.Instance,
					Name = "\0",
					Size = UDim2New(0, 0, 0, 25),
					BorderColor3 = FromRGB(0, 0, 0),
					BorderSizePixel = 0,
					AutomaticSize = Enum.AutomaticSize.XY,
					BackgroundColor3 = FromRGB(14, 14, 14)
				})  Items["Notification"]:AddToTheme({BackgroundColor3 = "Background 1"})

				Instances:Create("UIPadding", {
					Parent = Items["Notification"].Instance,
					Name = "\0",
					PaddingTop = UDimNew(0, 6),
					PaddingBottom = UDimNew(0, 6),
					PaddingRight = UDimNew(0, 6),
					PaddingLeft = UDimNew(0, 8)
				})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["Notification"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Text,
					AutomaticSize = Enum.AutomaticSize.XY,
					Size = UDim2New(0, 0, 0, 15),
					AnchorPoint = Vector2New(0, 0),
					Position = UDim2New(0, 0, 0, 0),
					BackgroundTransparency = 1,
					TextXAlignment = Enum.TextXAlignment.Right,
					BorderSizePixel = 0,
					ZIndex = 6,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = "Text"})

				Instances:Create("UIPadding", {
					Parent = Items["Text"].Instance,
					Name = "\0",
					PaddingBottom = UDimNew(0, 0),
					PaddingTop = UDimNew(0, 0)
				})

				Items["Liner"] = Instances:Create("Frame", {
					Parent = Items["Notification"].Instance,
					Name = "\0",
					AnchorPoint = Vector2New(0, 1),
					Position = UDim2New(0, -8, 1, 8),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, 14, 0, 1),
					BorderSizePixel = 0,
					BackgroundColor3 = Color or FromRGB(150, 200, 60)
				})

				Items["UIStroke"] = Instances:Create("UIStroke", {
					Parent = Items["Liner"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["UIStroke2"] = Instances:Create("UIStroke", {
					Parent = Items["Notification"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})
			end

			local Size = Items["Notification"].Instance.AbsoluteSize

			for Index, Value in Items do
				if Value.Instance:IsA("Frame") then
					Value.Instance.BackgroundTransparency = 1
				elseif Value.Instance:IsA("TextLabel") then
					Value.Instance.TextTransparency = 1
				elseif Value.Instance:IsA("UIStroke") then
					Value.Instance.Transparency = 1
				end
			end

			task.wait(0.2)

			Items["Notification"].Instance.AutomaticSize = Enum.AutomaticSize.Y

			Library:Thread(function()
				for Index, Value in Items do
					if Value.Instance:IsA("Frame") then
						Value:Tween(nil, {BackgroundTransparency = 0})
					elseif Value.Instance:IsA("TextLabel") then
						Value:Tween(nil, {TextTransparency = 0})
					elseif Value.Instance:IsA("UIStroke") then
						Value:Tween(nil, {Transparency = 0})
					end
				end

				Items["Notification"]:Tween(nil, {Size = UDim2New(0, Size.X, 0, 0)})

				task.delay(Duration + 0.1, function()
					for Index, Value in Items do
						if Value.Instance:IsA("Frame") then
							Value:Tween(nil, {BackgroundTransparency = 1})
						elseif Value.Instance:IsA("TextLabel") then
							Value:Tween(nil, {TextTransparency = 1})
						end
					end

					Items["Notification"]:Tween(nil, {Size = UDim2New(0, 0, 0, 0)})

					task.wait(0.5)
					Items["Notification"]:Clean()
				end)
			end)
		end

		Library.Window = function(self)
			local Window = {
				Pages = { },
				Items = { },
				IsOpen = false
			}

			local Items, items = { }, { } do
				Items["DarkOutline"] = Instances:Create("Frame", {
					Parent = Library.Holder.Instance,
					Name = "\0",
					AnchorPoint = Vector2New(0.5, 0.5),
					Position = UDim2New(0.5, 0, 0.5, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(0, 612, 0, 662),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(31, 31, 31)
				})  Items["DarkOutline"]:AddToTheme({BackgroundColor3 = "Outline 1"})

				Items["DarkOutline"]:MakeDraggable()
				Items["DarkOutline"]:MakeResizeable(Vector2New(612, 662), Vector2New(9999, 9999))

				Items["Shadow"] = Instances:Create("ImageLabel", {
					Parent = Items["DarkOutline"].Instance,
					Name = "\0",
					ImageColor3 = FromRGB(150, 200, 60),
					ScaleType = Enum.ScaleType.Slice,
					ImageTransparency = 0.699999988079071,
					BorderColor3 = FromRGB(0, 0, 0),
					BackgroundColor3 = FromRGB(150, 200, 60),
					Size = UDim2New(1, 25, 1, 25),
					AnchorPoint = Vector2New(0.5, 0.5),
					Image = "http://www.roblox.com/asset/?id=18245826428",
					BackgroundTransparency = 1,
					Position = UDim2New(0.5, 0, 0.5, 0),
					ZIndex = -1,
					BorderSizePixel = 0,
					SliceCenter = RectNew(Vector2New(21, 21), Vector2New(79, 79))
				})  Items["Shadow"]:AddToTheme({ImageColor3 = "Accent"})

				Items["InlineOutline"] = Instances:Create("Frame", {
					Parent = Items["DarkOutline"].Instance,
					Name = "\0",
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(60, 60, 60)
				})  Items["InlineOutline"]:AddToTheme({BackgroundColor3 = "Outline 2"})

				Items["InlineOne"] = Instances:Create("Frame", {
					Parent = Items["InlineOutline"].Instance,
					Name = "\0",
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(40, 40, 40)
				})  Items["InlineOutline"]:AddToTheme({BackgroundColor3 = "Inline 1"})

				Items["InlineTwoOutline"] = Instances:Create("Frame", {
					Parent = Items["InlineOne"].Instance,
					Name = "\0",
					Position = UDim2New(0, 3, 0, 3),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -6, 1, -6),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(60, 60, 60)
				})  Items["InlineTwoOutline"]:AddToTheme({BackgroundColor3 = "Outline 2"})

				Items["InlineTwo"] = Instances:Create("Frame", {
					Parent = Items["InlineTwoOutline"].Instance,
					Name = "\0",
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(14, 14, 14)
				})  Items["InlineTwo"]:AddToTheme({BackgroundColor3 = "Background 1"})

				Items["BackgroundPattern"] = Instances:Create("ImageLabel", {
					Parent = Items["InlineTwo"].Instance,
					Name = "\0",
					ImageColor3 = FromRGB(21, 21, 21),
					ScaleType = Enum.ScaleType.Tile,
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, 0, 1, 0),
					Image = "rbxassetid://8509210785",
					BackgroundTransparency = 1,
					TileSize = UDim2New(0, 8, 0, 8),
					ResampleMode = Enum.ResamplerMode.Pixelated,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["Accent"] = Instances:Create("Frame", {
					Parent = Items["InlineTwo"].Instance,
					Name = "\0",
					Size = UDim2New(1, -2, 0, 2),
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(150, 200, 60)
				})  Items["Accent"]:AddToTheme({BackgroundColor3 = "Accent"})

				Instances:Create("UIGradient", {
					Parent = Items["Accent"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(107, 107, 107))}
				})

				Items["PagesOutline"] = Instances:Create("Frame", {
					Parent = Items["InlineTwo"].Instance,
					Name = "\0",
					Size = UDim2New(1, -36, 0, 27),
					Position = UDim2New(0, 18, 0, 18),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(44, 44, 44)
				})  Items["PagesOutline"]:AddToTheme({BackgroundColor3 = "Outline 3"})

				Items["Holder"] = Instances:Create("Frame", {
					Parent = Items["PagesOutline"].Instance,
					Name = "\0",
					Size = UDim2New(1, -2, 1, -2),
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(24, 24, 24)
				})  Items["Holder"]:AddToTheme({BackgroundColor3 = "Background 2"})

				Instances:Create("UIListLayout", {
					Parent = Items["Holder"].Instance,
					Name = "\0",
					FillDirection = Enum.FillDirection.Horizontal,
					SortOrder = Enum.SortOrder.LayoutOrder,
					HorizontalFlex = Enum.UIFlexAlignment.Fill
				})

				Items["Content"] = Instances:Create("Frame", {
					Parent = Items["InlineTwo"].Instance,
					Name = "\0",
					BackgroundTransparency = 1,
					Position = UDim2New(0, 0, 0, 50),
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, 0, 1, -50),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["MainFrame"] = Items["DarkOutline"]

				Window.Items = Items

				--// Mod List Below
				items['outline'] = Instances:Create('Frame', {
					Parent = Library.Holder.Instance,
					Name = '',
					Visible = true,
					Active = true,
					Draggable = true,
					Position = UDim2New(0, 50, 0, 200),
					Size = UDim2New(0.08, 0, 0.2, 0),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(44, 44, 44),
				}); items['outline']:AddToTheme({BackgroundColor3 = 'Outline 1'});

				local size = items['outline'].Instance.Size
				local absX = size.X.Scale * items['outline'].Instance.Parent.AbsoluteSize.X + size.X.Offset
				local absY = size.Y.Scale * items['outline'].Instance.Parent.AbsoluteSize.Y + size.Y.Offset
				local v2 = Vector2.new(absX, absY)

				items['outline']:MakeResizeable(v2, Vector2New(9999, 9999))

				items['outline'].Position = UDim2New(0, Library.Holder.Instance.AbsoluteSize.X + Library.Holder.Instance.AbsolutePosition.X + 5, 0, Library.Holder.Instance.AbsolutePosition.Y + 58);

				local glow = Instances:Create('ImageLabel', {
					Parent = items['outline'].Instance,
					Image = 'http://www.roblox.com/asset/?id=18245826428',
					BackgroundTransparency = 1,
					ImageTransparency = 0.8,
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = RectNew(Vector2New(21, 21), Vector2New(79, 79)),
					Position = UDim2New(0, -20, 0, -20),
					Size = UDim2New(1, 40, 1, 40),
					ZIndex = -100,
				}); glow:AddToTheme({ImageColor3 = 'Accent'});

				items['inline'] = Instances:Create('Frame', {
					Parent = items['outline'].Instance,
					Name = '',
					Position = UDim2New(0, 5, 0, 5),
					Size = UDim2New(1, -10, 1, -10),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(60, 60, 60),
				}); items['inline']:AddToTheme({BackgroundColor3 = 'Inline 1'});

				items['background'] = Instances:Create('Frame', {
					Parent = items['inline'].Instance,
					Name = '',
					Position = UDim2New(0, 1, 0, 1),
					Size = UDim2New(1, -2, 1, -2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(14, 14, 14),
				}); items['background']:AddToTheme({BackgroundColor3 = 'Background 1'});

				Instances:Create('ImageLabel', {
					Parent = items['background'].Instance,
					Name = '',
					ImageColor3 = FromRGB(21, 21, 21),
					ScaleType = Enum.ScaleType.Tile,
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, 0, 1, 0),
					Image = 'rbxassetid://8509210785',
					BackgroundTransparency = 1,
					TileSize = UDim2New(0, 8, 0, 8),
					ResampleMode = Enum.ResamplerMode.Pixelated,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				local accent = Instances:Create('Frame', {
					Parent = items['background'].Instance,
					Name = '',
					Position = UDim2New(0, 0, 0, 0),
					Size = UDim2New(1, 0, 0, 2),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(150, 200, 60),
				}); accent:AddToTheme({BackgroundColor3 = 'Accent'});

				Instances:Create('UIGradient', {
					Parent = accent.Instance,
					Rotation = 90,
					Color = RGBSequence{
						RGBSequenceKeypoint(0, FromRGB(255, 255, 255)),
						RGBSequenceKeypoint(1, Library.Theme.Gradient)
					}
				}):AddToTheme({Color = function()
					return RGBSequence{
						RGBSequenceKeypoint(0, FromRGB(255, 255, 255)),
						RGBSequenceKeypoint(1, Library.Theme.Gradient)
					}
				end})

				items['title'] = Instances:Create('TextLabel', {
					Parent = items['background'].Instance,
					Name = '',
					FontFace = Library.Font,
					Text = 'Moderator List',
					BackgroundTransparency = 1,
					TextXAlignment = Enum.TextXAlignment.Center,
					Position = UDim2New(0, 0, 0, 10),
					Size = UDim2New(1, 0, 0, 14),
					TextSize = 12,
					BorderSizePixel = 0,
				}); items['title']:AddToTheme({TextColor3 = 'Text'});
				items['title']:make_resizable()
				Instances:Create('UIStroke', {
					Parent = items['title'].Instance,
					LineJoinMode = Enum.LineJoinMode.Miter,
				}):AddToTheme({Color = 'Outline 3'})

				items['scrolling'] = Instances:Create('ScrollingFrame', {
					Parent = items['background'].Instance,
					Name = '',
					Position = UDim2New(0, 0, 0, 28),
					Size = UDim2New(1, 0, 1, -30),
					BackgroundTransparency = 1,
					AutomaticCanvasSize = Enum.AutomaticSize.Y,
					CanvasSize = UDim2New(0, 0, 0, 0),
					ScrollBarThickness = 2,
					ScrollBarImageColor3 = FromRGB(150, 200, 60),
				}); items['scrolling']:AddToTheme({ScrollBarImageColor3 = 'Accent'})

				Instances:Create('UIPadding', {
					Parent = items['scrolling'].Instance,
					PaddingTop = UDimNew(0, 10),
					PaddingRight = UDimNew(0, 12),
					PaddingLeft = UDimNew(0, 12),
					PaddingBottom = UDimNew(0, 10),
				})

				items['object'] = Instances:Create('TextLabel', {
					Parent = items['scrolling'].Instance,
					Name = '',
					FontFace = Library.Font,
					Text = '',
					BackgroundTransparency = 1,
					Size = UDim2New(1, -24, 1, -10),
					TextSize = 9,
				}, 'text'); items['object']:AddToTheme({TextColor3 = 'Text'})

				items['playerlist_holder'] = Instances:Create('Frame', {
					Parent = items['object'].Instance,
					Name = '',
					BackgroundTransparency = 1,
					Size = UDim2New(1, 0, 1, -23),
				})

				items['ScrollingFrame'] = Instances:Create('ScrollingFrame', {
					Parent = items['playerlist_holder'].Instance,
					Name = '',
					Position = UDim2New(0, 0, 0, 10),
					Size = UDim2New(1, 0, 1, -20),
					BackgroundTransparency = 1,
					AutomaticCanvasSize = Enum.AutomaticSize.Y,
					CanvasSize = UDim2New(0, 0, 0, 0),
					ScrollBarThickness = 2,
					ScrollBarImageColor3 = FromRGB(150, 200, 60),
				}); items['ScrollingFrame']:AddToTheme({ScrollBarImageColor3 = 'Accent'})

				Instances:Create('UIPadding', {
					Parent = items['ScrollingFrame'].Instance,
					PaddingTop = UDimNew(0, 5),
					PaddingBottom = UDimNew(0, 10),
					PaddingRight = UDimNew(0, 10),
					PaddingLeft = UDimNew(0, 10),
				})

				Instances:Create('UIListLayout', {
					Parent = items['ScrollingFrame'].Instance,
					Padding = UDimNew(0, 10),
					SortOrder = Enum.SortOrder.LayoutOrder,
				})

				Instances:Create('UIStroke', {
					Parent = items['playerlist_holder'].Instance,
					Color = FromRGB(60, 60, 60),
				}):AddToTheme({Color = 'Inline 1'})

				items['mod_rows'] = items['mod_rows'] or {}

				function Window.add_mod(name, role)
					if (items['mod_rows'][name]) then
						items['mod_rows'][name]:Destroy()
						items['mod_rows'][name] = nil
					end

					local row = Instances:Create('Frame', {
						Parent = items['ScrollingFrame'].Instance,
						Name = '\0',
						BackgroundTransparency = 1,
						Size = UDim2New(1, 0, 0, 14),
						BorderSizePixel = 0,
					})

					local nameLabel = Instances:Create('TextLabel', {
						Parent = row.Instance,
						Name = '\0',
						FontFace = Library.Font,
						Text = name,
						BackgroundTransparency = 1,
						TextXAlignment = Enum.TextXAlignment.Left,
						Position = UDim2New(0, 0, 0, 0),
						Size = UDim2New(1, -80, 1, 0),
						TextSize = 12,
					}); nameLabel:AddToTheme({TextColor3 = 'Text'})

					local roleLabel = Instances:Create('TextLabel', {
						Parent = row.Instance,
						Name = '\0',
						FontFace = Library.Font,
						Text = role,
						BackgroundTransparency = 1,
						TextXAlignment = Enum.TextXAlignment.Right,
						AnchorPoint = Vector2New(1, 0),
						Position = UDim2New(1, -2, 0, 0),
						Size = UDim2New(0, 78, 1, 0),
						TextSize = 12,
					}); roleLabel:AddToTheme({TextColor3 = 'Accent'})

					items['mod_rows'][name] = row
				end

				function Window.remove_mod(name)
					local row = items['mod_rows'] and items['mod_rows'][name] and items['mod_rows'][name].Instance or (items['ScrollingFrame'] and items['ScrollingFrame'].Instance:FindFirstChild(name))
					if (row) then
						row:Destroy()
						items['mod_rows'][name] = nil
					end
				end
			end

			local Debounce = false

			function Window:SetCenter()
				local CenterPosition = Items["MainFrame"].Instance.AbsolutePosition
				task.wait()
				Items["MainFrame"].Instance.AnchorPoint = Vector2New(0, 0)

				Items["MainFrame"].Instance.Position = UDim2New(0, CenterPosition.X, 0, CenterPosition.Y)
			end

			function Window:SetOpen(Bool)
				if Debounce then
					return
				end

				Window.IsOpen = Bool

				Debounce = true

				if Window.IsOpen then
					Items["MainFrame"].Instance.Visible = true
				end

				local Descendants = Items["MainFrame"].Instance:GetDescendants()
				TableInsert(Descendants, Items["MainFrame"].Instance)

				local NewTween

				for Index, Value in Descendants do
					local TransparencyProperty = Tween:GetProperty(Value)

					if not TransparencyProperty then
						continue
					end

					if type(TransparencyProperty) == "table" then
						for _, Property in TransparencyProperty do
							NewTween = Tween:FadeItem(Value, Property, Bool, Library.FadeSpeed)
						end
					else
						NewTween = Tween:FadeItem(Value, TransparencyProperty, Bool, Library.FadeSpeed)
					end
				end

				NewTween.Tween.Completed:Connect(function()
					Debounce = false
					Items["MainFrame"].Instance.Visible = Window.IsOpen
				end)
			end

			Window:SetCenter()
			task.wait()
			Window:SetOpen(true)
			return setmetatable(Window, Library)
		end

		Library.Page = function(self, Data)
			Data = Data or { }

			local Page = {
				Window = self,

				Name = Data.Name or Data.name or "Page",
				Columns = Data.Columns or Data.columns or 2,

				Items = { },
				ColumnsData = { },
				Active = false
			}

			local Items = { } do
				Items["Inactive"] = Instances:Create("TextButton", {
					Parent = Page.Window.Items["Holder"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Size = UDim2New(0, 0, 1, 0),
					ZIndex = 2,
					TextSize = 14,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["Inactive"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Page.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					AnchorPoint = Vector2New(0.5, 0.5),
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0.5, 0, 0.5, 0),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = "Text"})

				Items["Shadow"] = Instances:Create("TextLabel", {
					Parent = Items["Text"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Page.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 2, 0, 1),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Shadow"]:AddToTheme({TextColor3 = "Text Shadow"})

				Items["Liner"] = Instances:Create("Frame", {
					Parent = Items["Inactive"].Instance,
					Name = "\0",
					BorderColor3 = FromRGB(0, 0, 0),
					AnchorPoint = Vector2New(1, 0.5),
					Position = UDim2New(1, 1, 0.5, 0),
					Size = UDim2New(0, 1, 0, 9),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(44, 44, 44)
				})  Items["Liner"]:AddToTheme({BackgroundColor3 = "Outline 3"})

				Items["Page"] = Instances:Create("Frame", {
					Parent = Library.UnusedHolder.Instance,
					Name = "\0",
					BackgroundTransparency = 1,
					Size = UDim2New(1, 0, 1, 0),
					Visible = false,
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIListLayout", {
					Parent = Items["Page"].Instance,
					Name = "\0",
					FillDirection = Enum.FillDirection.Horizontal,
					SortOrder = Enum.SortOrder.LayoutOrder,
					HorizontalFlex = Enum.UIFlexAlignment.Fill
				})

				for Index = 1, Page.Columns do
					local NewColumn = Instances:Create("ScrollingFrame", {
						Parent = Items["Page"].Instance,
						Name = "\0",
						ScrollBarImageColor3 = FromRGB(0, 0, 0),
						Active = true,
						AutomaticCanvasSize = Enum.AutomaticSize.Y,
						ScrollBarThickness = 0,
						BorderColor3 = FromRGB(0, 0, 0),
						BackgroundTransparency = 1,
						Size = UDim2New(1, 0, 1, 0),
						BackgroundColor3 = FromRGB(255, 255, 255),
						ZIndex = 2,
						BorderSizePixel = 0,
						CanvasSize = UDim2New(0, 0, 0, 0)
					})

					Instances:Create("UIPadding", {
						Parent = NewColumn.Instance,
						Name = "\0",
						PaddingTop = UDimNew(0, 6),
						PaddingBottom = UDimNew(0, 6),
						PaddingRight = UDimNew(0, Index == 1 and 6 or 18),
						PaddingLeft = UDimNew(0, Index == 2 and 6 or 18)
					})

					Instances:Create("UIListLayout", {
						Parent = NewColumn.Instance,
						Name = "\0",
						Padding = UDimNew(0, 14),
						SortOrder = Enum.SortOrder.LayoutOrder
					})

					Page.ColumnsData[Index] = NewColumn
				end

				Page.Items = Items
			end

			local Debounce = false

			function Page:Turn(Bool)
				if Debounce then
					return
				end

				Page.Active = Bool

				Debounce = true
				Items["Page"].Instance.Visible = Bool
				Items["Page"].Instance.Parent = Bool and Page.Window.Items["Content"].Instance or Library.UnusedHolder.Instance

				if Page.Active then
					Items["Text"]:ChangeItemTheme({TextColor3 = "Accent"})
					Items["Text"]:Tween(nil, {TextColor3 = Library.Theme.Accent})
				else
					Items["Text"]:ChangeItemTheme({TextColor3 = "Text"})
					Items["Text"]:Tween(nil, {TextColor3 = Library.Theme.Text})
				end

				Debounce = false
			end

			Items["Inactive"]:Connect("MouseButton1Down", function()
				for Index, Value in Page.Window.Pages do
					if Value == Page and Page.Active then
						return
					end

					Value:Turn(Value == Page)
				end
			end)

			if #Page.Window.Pages == 0 then
				Page:Turn(true)
			end

			TableInsert(Page.Window.Pages, Page)
			return setmetatable(Page, Library.Pages)
		end

		Library.Pages.Section = function(self, Data)
			Data = Data or { }

			local Section = {
				Window = self.Window,
				Page = self,

				Name = Data.Name or Data.name or "Section",
				Side = Data.Side or Data.side or 1,

				Items = { }
			}

			local Items = { } do
				Items["SectionOutline"] = Instances:Create("Frame", {
					Parent = Section.Page.ColumnsData[Section.Side].Instance,
					Name = "\0",
					BorderSizePixel = 0,
					Size = UDim2New(1, 0, 0, 45),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					AutomaticSize = Enum.AutomaticSize.Y,
					BackgroundColor3 = FromRGB(44, 44, 44)
				})  Items["SectionOutline"]:AddToTheme({BackgroundColor3 = "Outline 3"})

				Items["Inline"] = Instances:Create("Frame", {
					Parent = Items["SectionOutline"].Instance,
					Name = "\0",
					Size = UDim2New(1, -2, 1, -2),
					Position = UDim2New(0, 1, 0, 1),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(24, 24, 24)
				})  Items["Inline"]:AddToTheme({BackgroundColor3 = "Background 2"})

				Items["Content"] = Instances:Create("Frame", {
					Parent = Items["Inline"].Instance,
					Name = "\0",
					BorderColor3 = FromRGB(0, 0, 0),
					BorderSizePixel = 0,
					BackgroundTransparency = 1,
					Position = UDim2New(0, 16, 0, 16),
					Size = UDim2New(1, -32, 0, 0),
					ZIndex = 2,
					AutomaticSize = Enum.AutomaticSize.Y,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIListLayout", {
					Parent = Items["Content"].Instance,
					Name = "\0",
					Padding = UDimNew(0, 6),
					SortOrder = Enum.SortOrder.LayoutOrder
				})

				Items["HideBackground"] = Instances:Create("Frame", {
					Parent = Items["SectionOutline"].Instance,
					Name = "\0",
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(0, 0, 0, 1),
					Position = UDim2New(0, 10, 0, 0),
					BorderSizePixel = 0,
					ZIndex = 2,
					AutomaticSize = Enum.AutomaticSize.X,
					BackgroundColor3 = FromRGB(24, 24, 24)
				})  Items["HideBackground"]:AddToTheme({BackgroundColor3 = "Background 2"})

				Instances:Create("UIPadding", {
					Parent = Items["HideBackground"].Instance,
					Name = "\0",
					PaddingRight = UDimNew(0, 2),
					PaddingLeft = UDimNew(0, 1)
				})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["HideBackground"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Section.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					AnchorPoint = Vector2New(0, 0.5),
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 0, 0.5, 0),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = "Text"})

				Items["Shadow"] = Instances:Create("TextLabel", {
					Parent = Items["HideBackground"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Section.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					AnchorPoint = Vector2New(0, 0.5),
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 2, 0.5, 1),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Shadow"]:AddToTheme({TextColor3 = "Text Shadow"})

				Instances:Create("UIPadding", {
					Parent = Items["Content"].Instance,
					Name = "\0",
					PaddingBottom = UDimNew(0, 12)
				})

				Section.Items = Items
			end

			return setmetatable(Section, Library.Sections)
		end

		Library.Sections.Toggle = function(self, Data)
			Data = Data or { }

			local Toggle = {
				Window = self.Window,
				Page = self.Page,
				Section = self,

				Name = Data.Name or Data.name or "Toggle",
				Flag = Data.Flag or Data.flag or Library:NextFlag(),
				Default = Data.Default or Data.default or false,
				Callback = Data.Callback or Data.callback or function() end,
				Risky = Data.Risky or Data.risky or false,

				Value = false
			}

			local Items = { } do
				Items["Toggle"] = Instances:Create("TextButton", {
					Parent = Toggle.Section.Items["Content"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Size = UDim2New(1, 0, 0, 15),
					ZIndex = 2,
					TextSize = 14,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["Indicator"] = Instances:Create("Frame", {
					Parent = Items["Toggle"].Instance,
					Name = "\0",
					BorderColor3 = FromRGB(0, 0, 0),
					AnchorPoint = Vector2New(0, 0.5),
					Position = UDim2New(0, 0, 0.5, 0),
					Size = UDim2New(0, 9, 0, 9),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(43, 43, 43)
				})  Items["Indicator"]:AddToTheme({BackgroundColor3 = "Element"})

				Instances:Create("UIGradient", {
					Parent = Items["Indicator"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Instances:Create("UIStroke", {
					Parent = Items["Indicator"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["Toggle"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Toggle.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					AnchorPoint = Vector2New(0, 0.5),
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 18, 0.5, 0),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = Toggle.Risky and "Risky" or "Text"})

				Items["Shadow"] = Instances:Create("TextLabel", {
					Parent = Items["Toggle"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Toggle.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					AnchorPoint = Vector2New(0, 0.5),
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 19, 0.5, 1),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Shadow"]:AddToTheme({TextColor3 = "Text Shadow"})

				Items["SubElements"] = Instances:Create("Frame", {
					Parent = Items["Toggle"].Instance,
					Name = "\0",
					BorderColor3 = FromRGB(0, 0, 0),
					AnchorPoint = Vector2New(1, 0.5),
					BackgroundTransparency = 1,
					Position = UDim2New(1, 0, 0.5, 0),
					Size = UDim2New(0, 0, 1, 0),
					BorderSizePixel = 0,
					AutomaticSize = Enum.AutomaticSize.X,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIListLayout", {
					Parent = Items["SubElements"].Instance,
					Name = "\0",
					VerticalAlignment = Enum.VerticalAlignment.Center,
					FillDirection = Enum.FillDirection.Horizontal,
					HorizontalAlignment = Enum.HorizontalAlignment.Right,
					Padding = UDimNew(0, 5),
					SortOrder = Enum.SortOrder.LayoutOrder
				})
			end

			function Toggle:Get()
				return Toggle.Value
			end

			function Toggle:Set(Value)
				Toggle.Value = Value
				Library.Flags[Toggle.Flag] = Value

				if Toggle.Value then
					Items["Indicator"]:ChangeItemTheme({BackgroundColor3 = "Accent"})
					Items["Indicator"]:Tween(nil, {BackgroundColor3 = Library.Theme.Accent})
				else
					Items["Indicator"]:ChangeItemTheme({BackgroundColor3 = "Element"})
					Items["Indicator"]:Tween(nil, {BackgroundColor3 = Library.Theme.Element})
				end

				if Toggle.Callback then
					Library:SafeCall(Toggle.Callback, Toggle.Value)
				end
			end

			function Toggle:Colorpicker(Data)
				Data = Data or { }

				local Colorpicker = {
					Window = self.Window,
					Page = self.Page,
					Section = self.Section,

					Flag = Data.Flag or Data.flag or "Colorpicker",
					Default = Data.Default or Data.default or FromRGB(255, 255, 255),
					Callback = Data.Callback or Data.callback or function() end,
					Alpha = Data.Alpha or Data.alpha or false
				}

				local NewColorpicker, ColorpickerItems = Library:CreateColorpicker({
					Flag = Colorpicker.Flag,
					Default = Colorpicker.Default,
					Alpha = Colorpicker.Alpha,
					Callback = Colorpicker.Callback,
					Parent = Items["SubElements"]
				})

				return NewColorpicker
			end

			function Toggle:Keybind(Data)
				Data = Data or { }

				local Keybind = {
					Window = self.Window,
					Page = self.Page,
					Section = self.Section,

					Name = Data.Name or Data.name or "Keybind",
					Flag = Data.Flag or Data.flag or "Keybind",
					Default = Data.Default or Data.default or "None",
					Callback = Data.Callback or Data.callback or function() end,
					Mode = Data.Mode or Data.mode or "Toggle"
				}

				local NewKeybind, KeybindItems = Library:CreateKeybind({
					Flag = Keybind.Flag,
					Name = Keybind.Name,
					Default = Keybind.Default,
					Mode = Keybind.Mode,
					Section = Keybind.Section,
					Callback = Keybind.Callback,
					Parent = Items["SubElements"]
				})

				return NewKeybind
			end

			function Toggle:SetVisibility(Bool)
				Items["Toggle"].Instance.Visible = Bool
			end

			Items["Toggle"]:Connect("MouseButton1Down", function()
				Toggle:Set(not Toggle.Value)
			end)

			Toggle:Set(Toggle.Default)

			Library.SetFlags[Toggle.Flag] = function(Value)
				Toggle:Set(Value)
			end

			return Toggle
		end

		Library.Sections.Button = function(self, Data)
			Data = Data or { }

			local Button = {
				Window = self.Window,
				Page = self.Page,
				Section = self,

				Name = Data.Name or Data.name or "Button",
				Callback = Data.Callback or Data.callback or function() end,
			}

			local Items = { } do
				Items["Button"] = Instances:Create("Frame", {
					Parent = Button.Section.Items["Content"].Instance,
					Name = "\0",
					Active = true,
					BorderColor3 = FromRGB(0, 0, 0),
					BackgroundTransparency = 1,
					Selectable = true,
					Size = UDim2New(1, 0, 0, 18),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["RealButton"] = Instances:Create("TextButton", {
					Parent = Items["Button"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					BorderSizePixel = 0,
					Position = UDim2New(0, 19, 0, 0),
					Size = UDim2New(1, -19, 1, 0),
					ZIndex = 2,
					TextSize = 14,
					BackgroundColor3 = FromRGB(43, 43, 43)
				})  Items["RealButton"]:AddToTheme({BackgroundColor3 = "Element"})

				Instances:Create("UIGradient", {
					Parent = Items["RealButton"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Instances:Create("UIStroke", {
					Parent = Items["RealButton"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["RealButton"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Button.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					AnchorPoint = Vector2New(0.5, 0.5),
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0.5, 0, 0.5, -1),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = "Text"})

				Items["Shadow"] = Instances:Create("TextLabel", {
					Parent = Items["RealButton"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Button.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					AnchorPoint = Vector2New(0.5, 0.5),
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0.5, 1, 0.5, 0),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Shadow"]:AddToTheme({TextColor3 = "Text Shadow"})
			end

			function Button:Press()
				Items["Text"]:ChangeItemTheme({TextColor3 = "Accent"})
				Items["Text"]:Tween(nil, {TextColor3 = Library.Theme.Accent})
				Library:SafeCall(Button.Callback)
				task.wait(0.1)
				Items["Text"]:ChangeItemTheme({TextColor3 = "Text"})
				Items["Text"]:Tween(nil, {TextColor3 = Library.Theme.Text})
			end

			function Button:SetVisibility(Bool)
				Items["Button"].Instance.Visible = Bool
			end

			Items["RealButton"]:Connect("MouseButton1Down", function()
				Button:Press()
			end)

			return Button
		end

		Library.Sections.Slider = function(self, Data)
			Data = Data or { }

			local Slider = {
				Window = self.Window,
				Page = self.Page,
				Section = self,

				Name = Data.Name or Data.name or "Slider",
				Flag = Data.Flag or Data.flag or Library:NextFlag(),
				Min = Data.min or Data.Min or Data.minimum or Data.Minimum or 0,
				Default = Data.Default or Data.default or 0,
				Max = Data.max or Data.Max or Data.maximum or Data.Maximum or 100,
				Suffix = Data.Suffix or Data.suffix or "",
				Decimals = Data.interval or Data.Interval or Data.decimal or Data.Decimal or Data.Increment or 1,
				Callback = Data.Callback or Data.callback or function() end,

				Value = 0,
				Sliding = false
			}

			local Items = { } do
				Items["Slider"] = Instances:Create("Frame", {
					Parent = Slider.Section.Items["Content"].Instance,
					Name = "\0",
					BackgroundTransparency = 1,
					Size = UDim2New(1, 0, 0, 27),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["Slider"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Slider.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 18, 0, 0),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = "Text"})

				Items["RealSlider"] = Instances:Create("TextButton", {
					Parent = Items["Slider"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					AnchorPoint = Vector2New(0, 1),
					BorderSizePixel = 0,
					Position = UDim2New(0, 19, 1, 0),
					Size = UDim2New(1, -19, 0, 5),
					ZIndex = 2,
					TextSize = 14,
					BackgroundColor3 = FromRGB(43, 43, 43)
				})  Items["RealSlider"]:AddToTheme({BackgroundColor3 = "Element"})

				Instances:Create("UIGradient", {
					Parent = Items["RealSlider"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Instances:Create("UIStroke", {
					Parent = Items["RealSlider"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["Accent"] = Instances:Create("Frame", {
					Parent = Items["RealSlider"].Instance,
					Name = "\0",
					Size = UDim2New(0.4000000059604645, 0, 1, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(150, 200, 60)
				})  Items["Accent"]:AddToTheme({BackgroundColor3 = "Accent"})

				Instances:Create("UIGradient", {
					Parent = Items["Accent"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Items["Value"] = Instances:Create("TextLabel", {
					Parent = Items["Accent"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "5.0PX",
					AutomaticSize = Enum.AutomaticSize.X,
					AnchorPoint = Vector2New(1, 0),
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(1, 0, 0, -2),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Value"]:AddToTheme({TextColor3 = "Text"})

				Items["ValueShadow"] = Instances:Create("TextLabel", {
					Parent = Items["Accent"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "5.0PX",
					AutomaticSize = Enum.AutomaticSize.X,
					AnchorPoint = Vector2New(1, 0),
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(1, 1, 0, -1),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["ValueShadow"]:AddToTheme({TextColor3 = "Text Shadow"})

				Items["Shadow"] = Instances:Create("TextLabel", {
					Parent = Items["Slider"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Slider.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 19, 0, 1),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Shadow"]:AddToTheme({TextColor3 = "Text Shadow"})
			end

			function Slider:Get()
				return Slider.Value
			end

			function Slider:SetVisibility(Bool)
				Items["Slider"].Instance.Visible = Bool
			end

			function Slider:Set(Value)
				Slider.Value = Library:Round(MathClamp(Value, Slider.Min, Slider.Max), Slider.Decimals)
				Library.Flags[Slider.Flag] = Slider.Value

				Items["Accent"]:Tween(TweenInfo.new(Library.Tween.Time, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Size = UDim2New((Slider.Value - Slider.Min) / (Slider.Max - Slider.Min), 0, 1, 0)})
				Items["Value"].Instance.Text = StringFormat("%s%s", tostring(Slider.Value), Slider.Suffix)
				Items["ValueShadow"].Instance.Text = StringFormat("%s%s", tostring(Slider.Value), Slider.Suffix)

				if Slider.Callback then
					Library:SafeCall(Slider.Callback, Slider.Value)
				end
			end

			Items["RealSlider"]:Connect("InputBegan", function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					Slider.Sliding = true

					local SizeX = (Input.Position.X - Items["RealSlider"].Instance.AbsolutePosition.X) / Items["RealSlider"].Instance.AbsoluteSize.X
					local Value = ((Slider.Max - Slider.Min) * SizeX) + Slider.Min

					Slider:Set(Value)
				end
			end)

			Items["RealSlider"]:Connect("InputEnded", function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					Slider.Sliding = false
				end
			end)

			Library:Connect(UserInputService.InputChanged, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseMovement then
					if Slider.Sliding then
						local SizeX = (Input.Position.X - Items["RealSlider"].Instance.AbsolutePosition.X) / Items["RealSlider"].Instance.AbsoluteSize.X
						local Value = ((Slider.Max - Slider.Min) * SizeX) + Slider.Min

						Slider:Set(Value)
					end
				end
			end)

			if Slider.Default then
				Slider:Set(Slider.Default)
			end

			Library.SetFlags[Slider.Flag] = function(Value)
				Slider:Set(Value)
			end

			return Slider
		end

		Library.Sections.Dropdown = function(self, Data)
			Data = Data or { }

			local Dropdown = {
				Window = self.Window,
				Page = self.Page,
				Section = self,

				Name = Data.Name or Data.name or "Dropdown",
				Flag = Data.Flag or Data.flag or Library:NextFlag(),
				Items = Data.Items or Data.items or Data.Options or { },
				Default = Data.Default or Data.default or nil,
				Callback = Data.Callback or Data.callback or function() end,
				Multi = Data.Multi or Data.multi or false,

				IsOpen = false,
				Value = { },
				Options = { }
			}

			local Items = { } do
				Items["Dropdown"] = Instances:Create("Frame", {
					Parent = Dropdown.Section.Items["Content"].Instance,
					Name = "\0",
					BackgroundTransparency = 1,
					Size = UDim2New(1, 0, 0, 40),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["Dropdown"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Dropdown.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 18, 0, 0),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = "Text"})

				Items["Shadow"] = Instances:Create("TextLabel", {
					Parent = Items["Dropdown"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Dropdown.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 19, 0, 1),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Shadow"]:AddToTheme({TextColor3 = "Text Shadow"})

				Items["RealDropdown"] = Instances:Create("TextButton", {
					Parent = Items["Dropdown"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					AnchorPoint = Vector2New(0, 1),
					BorderSizePixel = 0,
					Position = UDim2New(0, 19, 1, 0),
					Size = UDim2New(1, -19, 0, 18),
					ZIndex = 2,
					TextSize = 14,
					BackgroundColor3 = FromRGB(43, 43, 43)
				})  Items["RealDropdown"]:AddToTheme({BackgroundColor3 = "Element"})

				Instances:Create("UIGradient", {
					Parent = Items["RealDropdown"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Instances:Create("UIStroke", {
					Parent = Items["RealDropdown"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Items["Value"] = Instances:Create("TextLabel", {
					Parent = Items["RealDropdown"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "--",
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 5, 0, 0),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Value"]:AddToTheme({TextColor3 = "Text"})

				Items["ValueShadow"] = Instances:Create("TextLabel", {
					Parent = Items["RealDropdown"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "--",
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, 6, 0, 1),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["ValueShadow"]:AddToTheme({TextColor3 = "Text Shadow"})

				Items["OptionHolder"] = Instances:Create("TextButton", {
					Parent = Items["Dropdown"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					Visible = false,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					AutoButtonColor = false,
					Size = UDim2New(1, -19, 0, 25),
					AutomaticSize = Enum.AutomaticSize.Y,
					Position = UDim2New(0, 19, 1, 5),
					BorderSizePixel = 0,
					ZIndex = 6,
					TextSize = 14,
					BackgroundColor3 = FromRGB(43, 43, 43)
				})  Items["OptionHolder"]:AddToTheme({BackgroundColor3 = "Element"})

				Instances:Create("UIStroke", {
					Parent = Items["OptionHolder"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Instances:Create("UIGradient", {
					Parent = Items["OptionHolder"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Instances:Create("UIListLayout", {
					Parent = Items["OptionHolder"].Instance,
					Name = "\0",
					SortOrder = Enum.SortOrder.LayoutOrder
				})

				Instances:Create("UIPadding", {
					Parent = Items["OptionHolder"].Instance,
					Name = "\0",
					PaddingTop = UDimNew(0, 2),
					PaddingBottom = UDimNew(0, 2),
					PaddingRight = UDimNew(0, 8),
					PaddingLeft = UDimNew(0, 8)
				})
			end

			local Debounce = false
			local RenderStepped

			function Dropdown:Get()
				return Dropdown.Value
			end

			function Dropdown:SetVisibility(Bool)
				Items["Dropdown"].Instance.Visible = Bool
			end

			function Dropdown:SetOpen(Bool)
				if Debounce then
					return
				end

				Dropdown.IsOpen = Bool
				Debounce = true

				if Dropdown.IsOpen then
					Items["OptionHolder"].Instance.Visible = true
					Items["OptionHolder"].Instance.Parent = Library.Holder.Instance

					RenderStepped = RunService.RenderStepped:Connect(function()
						Items["OptionHolder"].Instance.Position = UDim2New(0, Items["RealDropdown"].Instance.AbsolutePosition.X, 0, Items["RealDropdown"].Instance.AbsolutePosition.Y + Items["RealDropdown"].Instance.AbsoluteSize.Y + 5)
						Items["OptionHolder"].Instance.Size = UDim2New(0, Items["RealDropdown"].Instance.AbsoluteSize.X, 0, 0)
					end)

					for Index, Value in Library.OpenFrames do
						if Value ~= Dropdown then
							Value:SetOpen(false)
						end
					end

					Library.OpenFrames[Dropdown] = Dropdown
				else
					if Library.OpenFrames[Dropdown] then
						Library.OpenFrames[Dropdown] = nil
					end

					if RenderStepped then
						RenderStepped:Disconnect()
						RenderStepped = nil
					end
				end

				local Descendants = Items["OptionHolder"].Instance:GetDescendants()
				TableInsert(Descendants, Items["OptionHolder"].Instance)

				local NewTween

				for Index, Value in Descendants do
					local TransparencyProperty = Tween:GetProperty(Value)

					if not TransparencyProperty then
						continue
					end

					if type(TransparencyProperty) == "table" then
						for _, Property in TransparencyProperty do
							NewTween = Tween:FadeItem(Value, Property, Bool, Library.FadeSpeed)
						end
					else
						NewTween = Tween:FadeItem(Value, TransparencyProperty, Bool, Library.FadeSpeed)
					end
				end

				NewTween.Tween.Completed:Connect(function()
					Debounce = false
					Items["OptionHolder"].Instance.Visible = Dropdown.IsOpen
					task.wait(0.2)
					Items["OptionHolder"].Instance.Parent = not Dropdown.IsOpen and Library.UnusedHolder.Instance or Library.Holder.Instance
				end)
			end

			function Dropdown:Set(Option)
				if Dropdown.Multi then
					if type(Option) ~= "table" then
						return
					end

					Dropdown.Value = Option
					Library.Flags[Dropdown.Flag] = Option

					for Index, Value in Option do
						local OptionData = Dropdown.Options[Value]

						if not OptionData then
							continue
						end

						OptionData.Selected = true
						OptionData:Toggle("Active")
					end

					Items["Value"].Instance.Text = TableConcat(Option, ", ")
					Items["ValueShadow"].Instance.Text = TableConcat(Option, ", ")
				else
					if not Dropdown.Options[Option] then
						return
					end

					local OptionData = Dropdown.Options[Option]

					Dropdown.Value = Option
					Library.Flags[Dropdown.Flag] = Option

					for Index, Value in Dropdown.Options do
						if Value ~= OptionData then
							Value.Selected = false
							Value:Toggle("Inactive")
						else
							Value.Selected = true
							Value:Toggle("Active")
						end
					end

					Items["Value"].Instance.Text = Option
					Items["ValueShadow"].Instance.Text = Option
				end

				if Dropdown.Callback then
					Library:SafeCall(Dropdown.Callback, Dropdown.Value)
				end
			end

			function Dropdown:Add(Option)
				local OptionButton = Instances:Create("TextButton", {
					Parent = Items["OptionHolder"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Option,
					AutoButtonColor = false,
					BorderSizePixel = 0,
					BackgroundTransparency = 1,
					TextXAlignment = Enum.TextXAlignment.Left,
					Size = UDim2New(1, 0, 0, 18),
					ZIndex = 6,
					TextSize = 9,
					BackgroundColor3 = FromRGB(150, 200, 60)
				})  OptionButton:ChangeItemTheme({TextColor3 = "Text"})

				local OptionData = {
					Button = OptionButton,
					Name = Option,
					Selected = false
				}

				function OptionData:Toggle(Status)
					if Status == "Active" then
						OptionData.Button:ChangeItemTheme({TextColor3 = "Accent"})
						OptionData.Button:Tween(nil, {TextColor3 = Library.Theme.Accent})
					else
						OptionData.Button:ChangeItemTheme({TextColor3 = "Text"})
						OptionData.Button:Tween(nil, {TextColor3 = Library.Theme.Text})
					end
				end

				function OptionData:Set()
					OptionData.Selected = not OptionData.Selected

					if Data.Multi then
						local Index = TableFind(Dropdown.Value, OptionData.Name)

						if Index then
							TableRemove(Dropdown.Value, Index)
						else
							TableInsert(Dropdown.Value, OptionData.Name)
						end

						OptionData:Toggle(Index and "Inactive" or "Active")

						Library.Flags[Dropdown.Flag] = Dropdown.Value

						local TextFormat = #Dropdown.Value > 0 and TableConcat(Dropdown.Value, ", ") or "--"
						Items["Value"].Instance.Text = TextFormat
						Items["ValueShadow"].Instance.Text = TextFormat
					else
						if OptionData.Selected then
							Dropdown.Value = OptionData.Name
							Library.Flags[Dropdown.Flag] = OptionData.Name

							OptionData.Selected = true
							OptionData:Toggle("Active")

							for Index, Value in Dropdown.Options do
								if Value ~= OptionData then
									Value.Selected = false
									Value:Toggle("Inactive")
								end
							end

							Items["Value"].Instance.Text = OptionData.Name
							Items["ValueShadow"].Instance.Text = OptionData.Name
						else
							Dropdown.Value = nil
							Library.Flags[Dropdown.Flag] = nil

							OptionData.Selected = false
							OptionData:Toggle("Inactive")

							Items["Value"].Instance.Text = "--"
							Items["ValueShadow"].Instance.Text = "--"
						end
					end

					if Data.Callback then
						Library:SafeCall(Data.Callback, Dropdown.Value)
					end
				end

				OptionData.Button:Connect("MouseButton1Down", function()
					OptionData:Set()
				end)

				Dropdown.Options[OptionData.Name] = OptionData
				return OptionData
			end

			function Dropdown:Remove(Option)
				if not Dropdown.Options[Option] then
					return
				end

				Dropdown.Options[Option].Button:Clean()
				Dropdown.Options[Option] = nil
			end

			function Dropdown:Refresh(List)
				for Index, Value in Dropdown.Options do
					Dropdown:Remove(Value.Name)
				end

				for Index, Value in List do
					Dropdown:Add(Value)
				end
			end

			-- Taken from devforum, credits to "ifkpop" (https://devforum.roblox.com/t/how-would-i-know-if-a-ui-object-has-been-clipped/1714338/2)
			local CompareVectors = function(PointA, PointB)
				return (PointA.X < PointB.X) or (PointA.Y < PointB.Y)
			end

			local IsClipped = function(Object, Column)
				local Parent = Column

				local BoundryTop = Parent.AbsolutePosition
				local BoundryBottom = BoundryTop + Parent.AbsoluteSize

				local Top = Object.AbsolutePosition
				local Bottom = Top + Object.AbsoluteSize

				return CompareVectors(Top, BoundryTop) or CompareVectors(BoundryBottom, Bottom)
			end

			Items["RealDropdown"]:Connect("Changed", function(Property)
				if Property == "AbsolutePosition" then
					Dropdown.IsOpen = not IsClipped(Items["OptionHolder"].Instance, Dropdown.Section.Items["SectionOutline"].Instance.Parent)
					Items["OptionHolder"].Instance.Visible = Dropdown.IsOpen
				end
			end)

			Items["RealDropdown"]:Connect("MouseButton1Down", function()
				Dropdown:SetOpen(not Dropdown.IsOpen)
			end)

			Library:Connect(UserInputService.InputBegan, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					if not Dropdown.IsOpen then
						return
					end

					if Library:IsMouseOverFrame(Items["OptionHolder"]) then
						return
					end

					Dropdown:SetOpen(false)
				end
			end)

			for Index, Value in Dropdown.Items do
				Dropdown:Add(Value)
			end

			if Dropdown.Default and Dropdown.Items[Dropdown.Default] then
				Dropdown:Set(Dropdown.Default)
			elseif Dropdown.Items[1] then
				Dropdown:Set(Dropdown.Items[1])
			end

			Library.SetFlags[Dropdown.Flag] = function(Value)
				Dropdown:Set(Value)
			end

			Dropdown:SetOpen(false)

			return Dropdown
		end

		Library.Sections.Label = function(self, Name, OffsetOrNo)
			local Label = {
				Window = self.Window,
				Page = self.Page,
				Section = self,

				Name = Name or "Label"
			}

			local Items = { } do
				Items["Label"] = Instances:Create("Frame", {
					Parent = Label.Section.Items["Content"].Instance,
					Name = "\0",
					BackgroundTransparency = 1,
					BorderColor3 = FromRGB(0, 0, 0),
					Size = UDim2New(1, 0, 0, 15),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["Text"] = Instances:Create("TextLabel", {
					Parent = Items["Label"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Label.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, OffsetOrNo and 19 or 0, 0, 0),
					BorderSizePixel = 0,
					ZIndex = 3,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Text"]:AddToTheme({TextColor3 = "Text"})

				Items["Shadow"] = Instances:Create("TextLabel", {
					Parent = Items["Label"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					TextColor3 = FromRGB(0, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = Label.Name,
					AutomaticSize = Enum.AutomaticSize.X,
					Size = UDim2New(0, 0, 0, 15),
					BackgroundTransparency = 1,
					Position = UDim2New(0, OffsetOrNo and 20 or 0, 0, 1),
					BorderSizePixel = 0,
					ZIndex = 2,
					TextSize = 9,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Shadow"]:AddToTheme({TextColor3 = "Text Shadow"})

				Items["SubElements"] = Instances:Create("Frame", {
					Parent = Items["Label"].Instance,
					Name = "\0",
					BorderColor3 = FromRGB(0, 0, 0),
					AnchorPoint = Vector2New(1, 0.5),
					BackgroundTransparency = 1,
					Position = UDim2New(1, 0, 0.5, 0),
					Size = UDim2New(0, 0, 1, 0),
					BorderSizePixel = 0,
					AutomaticSize = Enum.AutomaticSize.X,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Instances:Create("UIListLayout", {
					Parent = Items["SubElements"].Instance,
					Name = "\0",
					VerticalAlignment = Enum.VerticalAlignment.Center,
					FillDirection = Enum.FillDirection.Horizontal,
					HorizontalAlignment = Enum.HorizontalAlignment.Right,
					Padding = UDimNew(0, 5),
					SortOrder = Enum.SortOrder.LayoutOrder
				})
			end

			function Label:SetText(Value)
				Value = tostring(Value)
				Items["Text"].Instance.Text = Value
			end

			function Label:SetVisibility(Bool)
				Items["Label"].Instance.Visible = Bool
			end

			function Label:Colorpicker(Data)
				Data = Data or { }

				local Colorpicker = {
					Window = self.Window,
					Page = self.Page,
					Section = self.Section,

					Flag = Data.Flag or Data.flag or "Colorpicker",
					Default = Data.Default or Data.default or FromRGB(255, 255, 255),
					Callback = Data.Callback or Data.callback or function() end,
					Alpha = Data.Alpha or Data.alpha or false
				}

				local NewColorpicker, ColorpickerItems = Library:CreateColorpicker({
					Flag = Colorpicker.Flag,
					Default = Colorpicker.Default,
					Alpha = Colorpicker.Alpha,
					Callback = Colorpicker.Callback,
					Parent = Items["SubElements"]
				})

				return NewColorpicker
			end

			function Label:Keybind(Data)
				Data = Data or { }

				local Keybind = {
					Window = self.Window,
					Page = self.Page,
					Section = self.Section,

					Name = Data.Name or Data.name or "Keybind",
					Flag = Data.Flag or Data.flag or "Keybind",
					Default = Data.Default or Data.default or "None",
					Callback = Data.Callback or Data.callback or function() end,
					Mode = Data.Mode or Data.mode or "Toggle"
				}

				local NewKeybind, KeybindItems = Library:CreateKeybind({
					Flag = Keybind.Flag,
					Name = Keybind.Name,
					Default = Keybind.Default,
					Mode = Keybind.Mode,
					Section = Keybind.Section,
					Callback = Keybind.Callback,
					Parent = Items["SubElements"]
				})

				return NewKeybind
			end

			return Label
		end

		Library.Sections.Textbox = function(self, Data)
			Data = Data or { }

			local Textbox = {
				Window = self.Window,
				Page = self.Page,
				Section = self,

				Flag = Data.Flag or Data.flag or Library:NextFlag(),
				Default = Data.Default or Data.default or "",
				Callback = Data.Callback or Data.callback or function() end,
				Numeric = Data.Numeric or Data.numeric or false,
				Finished = Data.Finished or Data.finished or false,
				Placeholder = Data.Placeholder or Data.placeholder or "...",

				Value = ""
			}

			local Items = { } do
				Items["Textbox"] = Instances:Create("Frame", {
					Parent = Textbox.Section.Items["Content"].Instance,
					Name = "\0",
					BackgroundTransparency = 1,
					Size = UDim2New(1, 0, 0, 18),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})

				Items["Background"] = Instances:Create("Frame", {
					Parent = Items["Textbox"].Instance,
					Name = "\0",
					Size = UDim2New(1, -19, 0, 18),
					Position = UDim2New(0, 19, 0, 0),
					BorderColor3 = FromRGB(0, 0, 0),
					ZIndex = 2,
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(43, 43, 43)
				})  Items["Background"]:AddToTheme({BackgroundColor3 = "Element"})

				Instances:Create("UIStroke", {
					Parent = Items["Background"].Instance,
					Name = "\0",
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					LineJoinMode = Enum.LineJoinMode.Miter
				})

				Instances:Create("UIGradient", {
					Parent = Items["Background"].Instance,
					Name = "\0",
					Rotation = 90,
					Color = RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, FromRGB(195, 195, 195))}
				}):AddToTheme({Color = function()
					return RGBSequence{RGBSequenceKeypoint(0, FromRGB(255, 255, 255)), RGBSequenceKeypoint(1, Library.Theme.Gradient)}
				end})

				Items["Input"] = Instances:Create("TextBox", {
					Parent = Items["Background"].Instance,
					Name = "\0",
					FontFace = Library.Font,
					PlaceholderColor3 = FromRGB(185, 185, 185),
					PlaceholderText = Textbox.Placeholder,
					TextSize = 9,
					Size = UDim2New(1, -16, 0, 15),
					TextColor3 = FromRGB(220, 220, 220),
					BorderColor3 = FromRGB(0, 0, 0),
					Text = "",
					CursorPosition = -1,
					BackgroundTransparency = 1,
					TextXAlignment = Enum.TextXAlignment.Left,
					ZIndex = 2,
					Position = UDim2New(0, 5, 0, 0),
					BorderSizePixel = 0,
					BackgroundColor3 = FromRGB(255, 255, 255)
				})  Items["Input"]:AddToTheme({TextColor3 = "Text"})
			end

			function Textbox:Get()
				return Textbox.Value
			end

			function Textbox:SetVisibility(Bool)
				Items["Textbox"].Instance.Visible = Bool
			end

			function Textbox:Set(Value)
				if Textbox.Numeric then
					if (not tonumber(Value)) and StringLen(tostring(Value)) > 0 then
						Value = Textbox.Value
					end
				end

				Textbox.Value = Value
				Items["Input"].Instance.Text = Value
				Library.Flags[Textbox.Flag] = Value

				if Textbox.Callback then
					Library:SafeCall(Textbox.Callback, Textbox.Value)
				end
			end

			if Textbox.Finished then
				Items["Input"]:Connect("FocusLost", function(PressedEnterQuestionMark)
					if PressedEnterQuestionMark then
						Textbox:Set(Items["Input"].Instance.Text)
					end
				end)
			else
				Items["Input"].Instance:GetPropertyChangedSignal("Text"):Connect(function()
					Textbox:Set(Items["Input"].Instance.Text)
				end)
			end

			if Textbox.Default then
				Textbox:Set(Textbox.Default)
			end

			Library.SetFlags[Textbox.Flag] = function(Value)
				Textbox:Set(Value)
			end

			return Textbox
		end
	end

	Library.CreateSettingsPage = function(self, Window, Watermark, KeybindList)
		local SettingsPage = Window:Page({Name = "Settings", Columns = 2})

		do
			local ConfigsSection = SettingsPage:Section({Name = "Configs", Side = 2}) do
				local ConfigName = ""
				local ConfigSelected

				local ConfigsList = ConfigsSection:Dropdown({
					Name = "Configs",
					Flag = "ConfigsList",
					Items = { },
					Multi = false,
					Callback = function(Value)
						ConfigSelected = Value
					end
				})

				ConfigsSection:Textbox({
					Default = "",
					Flag = "ConfigName",
					Placeholder = "Config name",
					Callback = function(Value)
						ConfigName = Value
					end
				})

				ConfigsSection:Button({
					Name = "Create",
					Callback = function()
					if ConfigName and ConfigName ~= "" then
						if not isfile(Library.Folders.Configs .. "/" .. ConfigName .. ".json") then
							writefile(Library.Folders.Configs .. "/" .. ConfigName .. ".json", Library:GetConfig())
							Library:RefreshConfigsList(ConfigsList)
						else
							return
						end
					end
				end})

				ConfigsSection:Button({
					Name = "Delete",
					Callback = function()
					if ConfigSelected then
						Library:DeleteConfig(ConfigSelected)
						Library:RefreshConfigsList(ConfigsList)
					end
				end})

				ConfigsSection:Button({
					Name = "Load",
					Callback = function()
					if ConfigSelected then
						Library:LoadConfig(readfile(Library.Folders.Configs .. "/" .. ConfigSelected))
					end
				end})

				ConfigsSection:Button({
					Name = "Save",
					Callback = function()
					if ConfigName and ConfigName ~= "" then
						writefile(Library.Folders.Configs .. "/" .. ConfigName .. ".json", Library:GetConfig())
						Library:RefreshConfigsList(ConfigsList)
					end
				end})

				ConfigsSection:Button({
					Name = "Refresh",
					Callback = function()
					Library:RefreshConfigsList(ConfigsList)
				end})

				Library:RefreshConfigsList(ConfigsList)
			end

			local SettingsSection = SettingsPage:Section({Name = "Settings", Side = 2}) do
				SettingsSection:Button({
					Name = "Unload",
					Callback = function()
						Library:Unload()
					end
				})

				SettingsSection:Toggle({
					Name = "Watermark",
					Flag = "Watermark",
					Default = true,
					Callback = function(Value)
						Watermark:SetVisibility(Value)
					end
				})

				SettingsSection:Toggle({
					Name = "Keybind List",
					Flag = "Keybind list",
					Default = true,
					Callback = function(Value)
						KeybindList:SetVisiblity(Value)
					end
				})

				SettingsSection:Label("Menu Keybind", true):Keybind({
					Name = "Menu Keybind",
					Flag = "MenuKeybind",
					Default = Library.MenuKeybind,
					Mode = "Toggle",
					Callback = function(value)
						if Window.IsOpen ~= value then
							Window:SetOpen(value)
						end

						for Index, Value in Library.OpenFrames do
							Value:SetOpen(false)
						end
					end
				})

				SettingsSection:Slider({
					Name = "Tween Speed",
					Default = 0.2,
					Flag = "Tween Speed",
					Decimals = 0.01,
					Suffix = "s",
					Max = 10,
					Min = 0,
					Callback = function(Value)
						Library.Tween.Time = Value
					end
				})

				SettingsSection:Dropdown({
					Name = "Tween Style",
					Flag = "Tween style",
					Items = { "Linear", "Quad", "Quart", "Back", "Bounce", "Circular", "Cubic", "Elastic", "Exponential", "Sine", "Quint" },
					Default = "Quint",
					Callback = function(Value)
						if not Value then Value = "Quint" end
						Library.Tween.Style = Enum.EasingStyle[Value]
					end
				})

				SettingsSection:Dropdown({
					Name = "Tween Direction",
					Flag = "Tween direction",
					Items = { "In", "Out", "InOut" },
					Default = "Out",
					Callback = function(Value)
						if not Value then Value = "Out" end
						Library.Tween.Direction = Enum.EasingDirection[Value]
					end
				})
				SettingsSection:Dropdown({
					Name = 'ESP Font',
					Flag = 'espfont',
					Items = Library.fontnames,
					Multi = false,
					Default = "FSTahoma",
					Callback = function()
						local v = flags.espfont
						if not v then return end
						Library.espfont = Library.Fonts[v] or Library.Font
						if not Library.espfont then return end
						for _, entity in EntityClass.Main.Cache or {} do
							for _, adornment in entity.Drawings or {} do
								if typeof(adornment) == "Instance" and adornment:IsA('TextLabel') then
									adornment.FontFace = Library.espfont
								end
							end
						end
						for _, raid in Globals.RaidEsps do
							raid.distLabel.FontFace = Library.espfont
						end
					end
				})

				SettingsSection:Slider({
					Name = 'ESP Font Size',
					Flag = 'espfontsize',
					Decimals = 1,
					Max = 30,
					Min = 8,
					Default = 8,
					Callback = function()
						local v = flags.espfontsize
						if not v then return end

						for _, entity in EntityClass.Main.Cache or {} do
							for _, adornment in entity.Drawings or {} do
								if typeof(adornment) == "Instance" and adornment:IsA('TextLabel') then
									adornment.TextSize = flags.espfontsize
								end
							end
						end
						for _, raid in Globals.RaidEsps do
							raid.distLabel.TextSize = flags.espfontsize
						end
					end
				})


				SettingsSection:Dropdown({
					Name = "Menu Font",
					Flag = "Menu Font",
					Items = Library.fontnames,
					Default = "ProggyTiny",
					Multi = false,
					Callback = function(Value)
						if not Value then return end

						local MenuFont = Library.Fonts[Value]
						if MenuFont then
							Library.Font = MenuFont
							task.wait(1)
							Library:UpdateText(Library.Flags["Menu Font Size"] or 9)
						end
					end
				})

				SettingsSection:Slider({
					Name = "Menu Font Size",
					Default = 9,
					Flag = "Menu Font Size",
					Decimals = 1,
					Suffix = " px",
					Max = 14,
					Min = 1,
					Callback = function(Value)
						Library:UpdateText(Value or 9)
					end
				})
			end

			local ThemingSection = SettingsPage:Section({Name = "Theming", Side = 1}) do
				local OutlineColors = ThemingSection:Label("Outline", false)
				local BackgroundColors = ThemingSection:Label("Background", false)
				local TextColors = ThemingSection:Label("Text", false)
				local ElementColors = ThemingSection:Label("Element", false)

				OutlineColors:Colorpicker({
					Flag = "Outline 1",
					Default = Library.Theme["Outline 1"],
					Callback = function(Value)
						Library.Theme["Outline 1"] = Value
						Library:ChangeTheme("Outline 1", Value)
					end
				})

				OutlineColors:Colorpicker({
					Flag = "Outline 2",
					Default = Library.Theme["Outline 2"],
					Callback = function(Value)
						Library.Theme["Outline 2"] = Value
						Library:ChangeTheme("Outline 2", Value)
					end
				})

				OutlineColors:Colorpicker({
					Flag = "Outline 3",
					Default = Library.Theme["Outline 3"],
					Callback = function(Value)
						Library.Theme["Outline 3"] = Value
						Library:ChangeTheme("Outline 3", Value)
					end
				})

				BackgroundColors:Colorpicker({
					Flag = "Background 1",
					Default = Library.Theme["Background 1"],
					Callback = function(Value)
						Library.Theme["Background 1"] = Value
						Library:ChangeTheme("Background 1", Value)
					end
				})

				BackgroundColors:Colorpicker({
					Flag = "Background 2",
					Default = Library.Theme["Background 2"],
					Callback = function(Value)
						Library.Theme["Background 2"] = Value
						Library:ChangeTheme("Background 2", Value)
					end
				})

				ThemingSection:Label("Inline", false):Colorpicker({
					Flag = "Inline",
					Default = Library.Theme["Inline 1"],
					Callback = function(Value)
						Library.Theme["Inline 1"] = Value
						Library:ChangeTheme("Inline 1", Value)
					end
				})

				TextColors:Colorpicker({
					Flag = "Text",
					Default = Library.Theme["Text"],
					Callback = function(Value)
						Library.Theme["Text"] = Value
						Library:ChangeTheme("Text", Value)
					end
				})

				TextColors:Colorpicker({
					Flag = "Text Shadow",
					Default = Library.Theme["Text Shadow"],
					Callback = function(Value)
						Library.Theme["Text Shadow"] = Value
						Library:ChangeTheme("Text Shadow", Value)
					end
				})

				TextColors:Colorpicker({
					Flag = "Risky",
					Default = Library.Theme["Risky"],
					Callback = function(Value)
						Library.Theme["Risky"] = Value
						Library:ChangeTheme("Risky", Value)
					end
				})

				ElementColors:Colorpicker({
					Flag = "Element",
					Default = Library.Theme["Element"],
					Callback = function(Value)
						Library.Theme["Element"] = Value
						Library:ChangeTheme("Element", Value)
					end
				})

				ElementColors:Colorpicker({
					Flag = "Gradient",
					Default = Library.Theme["Gradient"],
					Callback = function(Value)
						Library.Theme["Gradient"] = Value
						Library:ChangeTheme("Gradient", Value)
					end
				})

				ThemingSection:Label("Accent", false):Colorpicker({
					Flag = "Menu Accent",
					Default = Library.Theme["Accent"],
					Callback = function(Value)
						Library.Theme["Accent"] = Value
						Library:ChangeTheme("Accent", Value)
					end
				})
			end

			local PresetSection = SettingsPage:Section({Name = "Preset Configs"}) do
				PresetSection:Label('Loads pre-made configs.')
				PresetSection:Label('This will OVERWRITE your current config!')
				PresetSection:Button({
					Name = "Load Rage",
					Callback = function()
						Library:LoadConfig([[{"EnableSkin_Wetsuit":false,"AutoFarm":false,"Player_ESP_Arrows":true,"InstantLastCode":true,"InstantBullet":true,"Player_Dick_Thickness":1,"Skin_Salvaged M14":"Default","EnableSkin_Salvaged RPG":false,"Skin_Boulder":"Frosty","ChamsStone":true,"EnableSkin_Salvaged Pipe Rifle":false,"Zoom":true,"DownCheck":true,"EnableSkin_Salvaged AK47":false,"Skin_Salvaged Python":"Canvas","Skin_Steel Pickaxe":"Cross","Boss_Dick_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"Outline 3":{"Color":"#2c2c2c","Rainbow":false,"Alpha":0,"Breathing":false},"FastCooldown":false,"Skin_Cloth Handwraps":"Default","EnableSkin_Military PKM":false,"TargetAI":true,"ConfigName":"rage","EnableSkin_Salvaged M14":false,"Player_Healthtext_ESP":true,"Skin_Salvaged RPG":"Default","BulletTracers":true,"Player_Names_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"Boss_Weapon_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"Player_boxes_accent":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"Crosshair Length":14,"Menu Font Size":9,"Enable TargetHUD":true,"BounceMode":"ellipse","Hitmarkers":false,"ForceHitpart":true,"Ambient":true,"GloveColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"AutoShootHitScanned":true,"Skin_Stone Hatchet":"Default","AI_Dick_Length":2,"ChamsPhosphateColor":{"Color":"#ffff00","Rainbow":false,"Alpha":0.2,"Breathing":false},"AI_boxes_type":"Corner","DynamicFOV":true,"AI_Weapon_ESP":false,"Text Shadow":{"Color":"#000000","Rainbow":false,"Alpha":0,"Breathing":false},"MenuKeybind":{"Key":"Enum.KeyCode.RightControl","Mode":"Toggle"},"Manipulation":true,"UseSkybox":false,"Boss_Arrows_Radius":100,"AutoShoot":true,"ShirtMaterial":"SmoothPlastic","Boss_ESP_Names":true,"Skin_Salvaged Pipe Rifle":"Default","PlantsChams":false,"Skin_Hoodie":"Default","FakeLag":false,"Player_Dick_Length":2,"EnableSkin_Lighter":false,"Boss_ChamsColor2":{"Color":"#6078be","Rainbow":false,"Alpha":0.8,"Breathing":false},"clusterRadius":100,"Player_boxes_visible_color":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"AI_Chams":false,"Boss_Weapon_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"FOVOutlineThickness":4,"Player_boxes_type":"Corner","ClientChamsColor2":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"FriendlyTargetColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"Viewmodel Position":false,"AI_ESP_RainbowArrows":false,"VisualizeFOV":true,"Player_ESP_Distance":2000,"AI_Dick_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"Boss_ChamsColor1":{"Color":"#6078be","Rainbow":false,"Alpha":0.2,"Breathing":false},"VisibleTextColor":{"Color":"#6078be","Rainbow":false,"Alpha":1,"Breathing":false},"SpinSpeed":90,"ClientArmorColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"CloudColor":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"Wallbang":true,"AI_ChamsColor2":{"Color":"#6078be","Rainbow":false,"Alpha":0.8,"Breathing":false},"InfiniteFly":true,"EnableSkin_Military MP7":false,"AI_boxes_esp":false,"FastEquip":true,"CopyTargetColorCrosshair":true,"Skin_Crossbow":"Crossbones","VMOutlineColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"BounceRadiusY":30,"HitScanColor":{"Color":"#e942f5","Rainbow":false,"Alpha":0,"Breathing":false},"SandboxClient":true,"HitSoundVolume":4.1,"AutoFarmSpeed":28,"Boss_Healthbar_Gradient3ESP":{"Color":"#00ff00","Rainbow":false,"Alpha":0,"Breathing":false},"Skin_Lighter":"Default","FogHaze":0,"KillauraRadius":10,"Auto Shoot Activation":{"Key":"Enum.KeyCode.F","Mode":"Toggle"},"AutoShootWallbang":true,"Boss_Distance_ESP":true,"AI_boxes_visible_color":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"Aimbot":true,"ChamsPumpkin":false,"GloveMaterial":"SmoothPlastic","ChamsPumpkinDistance":50,"ShirtColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"Crosshair Color":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"HitScanTextColor":{"Color":"#e942f5","Rainbow":false,"Alpha":1,"Breathing":false},"HitScanText":true,"Boss_Dick_Thickness":1,"RemoveClothing":false,"AI_Healthtext_ESP":true,"Boss_boxes_type":"Corner","ChamsStoneDistance":5000,"ViewmodelSandbox":false,"Boss_boxes_accent":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"FlySpeed":5.2,"EnableSkin_Mining Drill":false,"Player_Healthbar_ESP":true,"Boss_Arrows_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"Skin_Hazmat Suit":"Default","Boss_Enabled_ESP":true,"Aimbot Activation":{"Key":"Enum.KeyCode.Backspace","Mode":"Always"},"ChamsMetalDistance":50,"ChamsTomatoColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0.2,"Breathing":false},"ChamsPhosphate":false,"EnableSkin_Boulder":false,"Skin_Military PKM":"Woodland","VIPFlagColor":{"Color":"#fcd303","Rainbow":false,"Alpha":0,"Breathing":false},"AI_Weapon_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"ClanFlagColor":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"Skin_Salvaged Pump Action":"Default","ChamsWoolColor":{"Color":"#ffffff","Rainbow":false,"Alpha":0.2,"Breathing":false},"AI_Arrows_Radius":100,"EnableSkin_Military USP":false,"AI_Distance_ESP":true,"ClientArmorMaterial":"Neon","Tween style":"Linear","Boss_lerp_health":false,"DisableTurrets":true,"Player_Enabled_ESP":true,"Boss_ESP_HealthbarWidth":1.5,"ChamsTomatoDistance":50,"Skin_Salvaged Sniper":"Default","clusterTTL":50,"ChangeCloudCover":false,"ChamsBodyBagsDistance":50,"Player_Distance_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"EnableSkin_Hammer":false,"AimingFlagColor":{"Color":"#03a9fc","Rainbow":false,"Alpha":0,"Breathing":false},"HideTerrain Activation":{"Key":"nil","Mode":"Toggle"},"ChamsTomato":false,"FogDensity":0,"WallbangColor":{"Color":"#ffd700","Rainbow":false,"Alpha":0,"Breathing":false},"Tween Speed":0,"AI_arrow_points":"Three","EnableSkin_Salvaged Break Action":false,"AimbotMode":"Silent","ChamsPumpkinColor":{"Color":"#ffa500","Rainbow":false,"Alpha":0.2,"Breathing":false},"Boss_Distance_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"ChangeCloudColor":false,"EnableSkin_Salvaged Pump Action":false,"Crosshair Spin":false,"Viewmodel Position X":0,"AI_Names_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"Player_ChamsColor1":{"Color":"#6078be","Rainbow":false,"Alpha":0.7329192546583851,"Breathing":false},"FOVColor":{"Color":"#6078be","Rainbow":false,"Alpha":0.782608695652174,"Breathing":false},"Skin_Salvaged AK74u":"Default","Menu Accent":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"AI_healthbar_pos":"Left","HitSound":"RustHeadshot","AimSpeed":0,"RandomizeHitPart":false,"EnableSkin_Wooden Bow":false,"HitSoundSpeed":1.1,"Player_Healthbar_Gradient1ESP":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"XRay":false,"HitSounds":true,"RaidNotifications":true,"RemoveGrass":false,"BounceSpeed":1,"Skin_Salvaged Skorpion":"Default","Skin_Leather Gloves":"Default","Player_ESP_Arrow_Size":15,"ManipulationVisualizer":true,"SafezoneFlagColor":{"Color":"#00d300","Rainbow":false,"Alpha":0,"Breathing":false},"Skin_Steel Shovel":"Default","FastADS":true,"AI_Dick_ESP":false,"ChamsStoneColor":{"Color":"#1b1b1b","Rainbow":false,"Alpha":0.2,"Breathing":false},"Keybind list":true,"AI_ESP_Names":true,"Skin_Iron Shard Hatchet":"Default","Player_Names_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"EnableSkin_Machete":false,"ManipColor":{"Color":"#ff6347","Rainbow":false,"Alpha":0,"Breathing":false},"Skin_Flannel Jacket":"Default","InstantBolt":true,"Crosshair Speed":75,"ManipulationVisualizerColor":{"Color":"#ff6347","Rainbow":false,"Alpha":1,"Breathing":false},"EnableSkin_Steel Axe":false,"Background 2":{"Color":"#181818","Rainbow":false,"Alpha":0,"Breathing":false},"EnableSkin_Chainsaw":false,"FOVRadius":933,"EnableSkin_Stone Pickaxe":false,"ConfigsList":"rage.json","Skin_Machete":"Default","Watermark":true,"AutoReloadDelay":0.2,"ChangeFogDecay":false,"ForceHitpartParts":["Head"],"Player_ESP_RainbowArrows":false,"DisableSilentWhileTP":true,"Player_Weapon_ESP":true,"ArmChams":false,"Brightness":6,"SkyboxPreset":"Among Us","ChamsMetalColor":{"Color":"#191919","Rainbow":false,"Alpha":0.2,"Breathing":false},"Boss_Names_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"ManipulationTextColor":{"Color":"#ff6347","Rainbow":false,"Alpha":1,"Breathing":false},"Killaura Activation":{"Key":"Enum.KeyCode.Backspace","Mode":"Always"},"Outline 1":{"Color":"#1f1f1f","Rainbow":false,"Alpha":0,"Breathing":false},"Hit Effect Type":"Black Hole","EnableSkin_Hoodie":false,"ChangeFogGlare":false,"BaseChams":false,"EnableSkin_Iron Shard Pickaxe":false,"AI_ESP_Distance":2000,"EnableSkin_Leather Gloves":false,"Boss_Healthbar_Gradient2ESP":{"Color":"#ff9600","Rainbow":false,"Alpha":0,"Breathing":false},"AutoFarmRadius":10,"Teleport Activation":{"Key":"Enum.KeyCode.G","Mode":"Toggle"},"Skin_Collared Shirt":"Default","Skin_Wooden Bow":"Blue Fissure","ClientChamsColor1":{"Color":"#6078be","Rainbow":false,"Alpha":0.5838509316770186,"Breathing":false},"Skin_Military Barrett":"Default","AI_Healthbar_Gradient1ESP":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"Fly Activation":{"Key":"Enum.KeyCode.X","Mode":"Toggle"},"PitchModifier":0,"AI_measurement_type":"Studs","AI_Arrows_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"ClientDick":true,"AutoFarmToggle":true,"ItemChams":false,"AntiAim":false,"BloomSize":1000,"HitNotifications":true,"WallbangTextColor":{"Color":"#ffd700","Rainbow":false,"Alpha":1,"Breathing":false},"Crosshair Spread":14,"Player_ChamsColor2":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"EnableSkin_Salvaged SMG":false,"StaffFlagColor":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"AutoFarmColor":{"Color":"#00ffff","Rainbow":false,"Alpha":0.7577639751552795,"Breathing":false},"Boss_Chams":true,"AI_lerp_health":false,"SpreadModifier":true,"RapidFire":true,"Player_Distance_ESP":true,"AutoUpgrade":false,"DebugCameraSpeed":300,"AI_Distance_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"Player_Distance_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"ChangeFOV":true,"Zoom Activation":{"Key":"Enum.KeyCode.Z","Mode":"Hold"},"Boss_ESP_Arrows":false,"AI_Enabled_ESP":true,"EnableSkin_Crossbow":false,"Debug Camera Activation":{"Key":"Enum.KeyCode.U","Mode":"Toggle"},"Skin_Hammer":"Default","FakeLagVisualizerColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"AI_Dick_Thickness":1,"AI_boxes_accent":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"TargetColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"Player_Dick_ESP":false,"Menu Font":"Smallest Pixel","VisibleText":true,"AI_ESP_HealthbarWidth":1.5,"EnableSkin_Military Gloves":false,"Fly":true,"Boss_Healthtext_ESP":true,"EnableSkin_Leather Shirt":false,"HitChance":100,"Omnisprint":true,"BloomIntensity":224.9,"EnableSkin_Salvaged Skorpion":false,"ChamsPhosphateDistance":50,"InstantEoka":true,"Boss_Healthbar_Gradient1ESP":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"Skin_Iron Shard Pickaxe":"Default","AutoShootManipulation":true,"VMFillColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"VMHighlight":false,"Boss_Dick_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"Boss_ESP_Arrow_Size":15,"Background 1":{"Color":"#0e0e0e","Rainbow":false,"Alpha":0,"Breathing":false},"Gradient":{"Color":"#c3c3c3","Rainbow":false,"Alpha":0,"Breathing":false},"AmbientColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"HideTerrain":false,"ClientChams":true,"Boss_ESP_RainbowArrows":false,"InstantLoot":true,"Player_Weapon_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"ChamsMetal":false,"EnableSkin_Salvaged Gloves":false,"HealingFlagColor":{"Color":"#78ff64","Rainbow":false,"Alpha":0,"Breathing":false},"Boss_Dick_Length":2,"HitEffects":true,"EnableSkin_Military M4A1":false,"EnableSkin_Steel Pickaxe":false,"EnableSkin_Military AA12":false,"Player_Healthbar_Gradient2ESP":{"Color":"#ff9600","Rainbow":false,"Alpha":0,"Breathing":false},"Risky":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"onlyOnHitHitEffect":true,"Skin_Salvaged SMG":"Default","Fullbright":true,"IgnoreAttachments":false,"ChangeTime":true,"Viewmodel Position Y":0,"TracerColor2":{"Color":"#6078be","Rainbow":false,"Alpha":0.2484472049689441,"Breathing":false},"SpreadPercent":0,"Skin_Mining Drill":"Default","EnableSkin_Cloth Handwraps":false,"EnableSkin_Salvaged Sniper":false,"BounceRadiusX":30,"AI_Healthbar_Gradient2ESP":{"Color":"#ff9600","Rainbow":false,"Alpha":0,"Breathing":false},"Inline":{"Color":"#282828","Rainbow":false,"Alpha":0,"Breathing":false},"Boss_arrow_points":"Three","EnableSkin_Hazmat Suit":false,"EnableSkin_Steel Shovel":false,"AI_ChamsColor1":{"Color":"#6078be","Rainbow":false,"Alpha":0.2,"Breathing":false},"AutoFarm Activation":{"Key":"Enum.KeyCode.Backspace","Mode":"Toggle"},"Player_Healthbar_Gradient3ESP":{"Color":"#00ff00","Rainbow":false,"Alpha":0,"Breathing":false},"ArmorViewer":true,"ChangeCloudDensity":false,"AI_Distance_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"CloudDensity":0,"DebugCamera":true,"Skin_Leather Shirt":"Default","AI_Weapon_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"XRay Activation":{"Key":"nil","Mode":"Toggle"},"AI_Dick_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"Player_Flags_ESP":true,"Outline 2":{"Color":"#3c3c3c","Rainbow":false,"Alpha":0,"Breathing":false},"HitEffectColor":{"Color":"#2d3b15","Rainbow":false,"Alpha":0,"Breathing":false},"IncludeTeam":false,"MorphLP":false,"CustomFOV":120,"VMItemColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"VisibleCheck":false,"Skin_Salvaged Gloves":"Default","AI_ESP_Arrow_Size":15,"TracerLifetime":1,"espfont":"Tahoma XP","EnableSkin_Military Barrett":false,"Skin_Stone Pickaxe":"Default","AI_Healthbar_ESP":true,"Player_Weapon_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"FakeLagVisualizer":true,"EnableSkin_Collared Shirt":false,"CopyTargetColorFOV":true,"ChangeFogDensity":false,"Viewmodel Position Z":0,"Skin_Salvaged Shotgun":"Default","Player_Arrows_Radius":100,"NodesChams":false,"ReloadingFlagColor":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"Boss_measurement_type":"Studs","WallbangText":true,"TargetPlayer":true,"AI_Healthbar_Gradient3ESP":{"Color":"#00ff00","Rainbow":false,"Alpha":0,"Breathing":false},"Boss_Names_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"HitScan":true,"FogGlare":0,"Skin_Military AA12":"Default","Crosshair Width":2,"DisableDamageParts":true,"FogColor":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"ChamsBodyBagsColor":{"Color":"#ffffff","Rainbow":false,"Alpha":0.2,"Breathing":false},"Skin_Military MP7":"Dark Matter","Boss_Distance_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"FakeLagTimer":0.17,"Skin_Salvaged AK47":"Frosty","KillAuraColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0.422360248447205,"Breathing":false},"AntiVector":false,"VMItemMaterial":"SmoothPlastic","Element":{"Color":"#2b2b2b","Rainbow":false,"Alpha":0,"Breathing":false},"ManipulationText":true,"ArmColor":{"Color":"#6078be","Rainbow":false,"Alpha":0,"Breathing":false},"Player_ESP_HealthbarWidth":1.5,"ShirtChams":false,"MoveCrosshairToTarget":true,"Skin_Chainsaw":"Default","DisableFireParts":true,"NoFall":true,"ThirdPerson":true,"Player_Arrows_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"AimbotPart":"Head","Player_boxes_esp":true,"WeaponViewer":true,"EnableSkin_Salvaged Python":false,"Crosshair Enabled":true,"ChamsWoolDistance":5000,"EnableSkin_Salvaged AK74u":false,"AutoReload":true,"RemoveBobbing":true,"Boss_ESP_Distance":2000,"Time":0,"ForceAuto":true,"Skin_Steel Axe":"Default","AlwaysTarget":true,"EnableSkin_Salvaged Shotgun":false,"RPMMult":1.6,"BloomThreshold":0.4,"Tween direction":"In","Player_Dick_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"PerfectFarm":true,"Skin_Military Gloves":"Default","Player_healthbar_pos":"Left","YawModifier":0,"ChamsBodyBags":false,"Boss_Weapon_ESP":true,"Reach":true,"GloveChams":false,"Speed":true,"GhostMode":false,"AutoUpgradeDistance":5,"FakeLag Activation":{"Key":"nil","Mode":"Always"},"ChangeFogColor":false,"Player_ESP_Names":true,"MorphLPInput":"test","Speed Activation":{"Key":"nil","Mode":"Toggle"},"SpeedAmount":26.3,"Third Person Activation":{"Key":"Enum.KeyCode.B","Mode":"Toggle"},"HitmarkerColor":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"ShootOnTP":true,"Player_arrow_points":"Three","Boss_Healthbar_ESP":true,"Bunnyhop":true,"TargetBoss":true,"AutoShootVisible":true,"Skin_Salvaged P250":"Default","AlwaysGrounded":true,"EnableSkin_Iron Shard Hatchet":false,"XRayTransparency":0.5,"CloudCover":0,"Skin_Salvaged Break Action":"Default","SilentStep":false,"Skin_Wetsuit":"Default","ESPRaids":true,"TracerColor1":{"Color":"#000000","Rainbow":false,"Alpha":1,"Breathing":false},"ZoomFOV":25,"EnableSkin_Salvaged Double Barrel":false,"Boss_healthbar_pos":"Left","AutoFarmTargets":"Stone","Bloom":true,"Boss_boxes_visible_color":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"FOVCircleThickness":2,"Player_Chams":true,"EnableSkin_Flannel Jacket":false,"Player_Dick_AccentESP":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"AI_Names_VisibleAccentColor":{"Color":"#ff0000","Rainbow":false,"Alpha":0,"Breathing":false},"Boss_Dick_ESP":true,"ChamsWool":true,"RecoilModifier":true,"EnableSkin_Salvaged P250":false,"Skin_Military USP":"Default","Skin_Military M39":"Medusa","Text":{"Color":"#dcdcdc","Rainbow":false,"Alpha":0,"Breathing":false},"EnableSkin_Military M39":false,"KillauraToggle":true,"Player_lerp_health":true,"ThirdPersonDistance":10.9,"CardsNoclip":false,"ChangeFogHaze":false,"Skin_Salvaged Double Barrel":"Default","PitchBase":"Nod","HitmarkerTime":0.1,"AI_ESP_Arrows":false,"EnableSkin_Stone Hatchet":false,"RecoilPercent":0,"UpgradeMaterial":"Wood","YawBase":"Random","Player_esp_teamcheck":true,"FogDecay":{"Color":"#ffffff","Rainbow":false,"Alpha":0,"Breathing":false},"EnableSkin_Nail Gun":false,"Player_measurement_type":"Studs","ArmMaterial":"SmoothPlastic","Skin_Nail Gun":"Default","Skin_Military M4A1":"Default","Boss_boxes_esp":true}]])
					end
				})

				PresetSection:Button({
					Name = "Load Legit",
					Callback = function()
						Library:LoadConfig([[]])
					end
				})
			end
		end
	end

	-- Library.Sections.CreatePlayerList = function(self, options)
	-- 	local cfg = {
	-- 		callback = (options and options.callback) or function() end,
	-- 		labels = { name, display, uid }
	-- 	}

	-- 	local NoSel = Instances:Create("Frame", {
	-- 		Name = "NoSel",
	-- 		Size = UDim2New(0,0,0,0),
	-- 		BackgroundTransparency = 1,
	-- 	})

	-- 	if Library.Holder and Library.Holder.Instance then
	-- 		Library.Holder.Instance.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	-- 	end

	-- 	local selected_button
	-- 	local patterns = {
	-- 		['Priority']  = FromRGB(255,255,0),
	-- 		['Enemy']     = FromRGB(255,0,0),
	-- 		['Neutral']   = themes.preset.text,
	-- 		['Teammate']  = FromRGB(0,255,255),
	-- 		['LocalPlayer'] = themes.preset.text
	-- 	}

	-- 	local playerlist_holder = Instances:Create('Frame', {
	-- 		Parent = self.Items['Content'].Instance,
	-- 		BackgroundTransparency = 1,
	-- 		Size = UDim2New(1, -8, 0, 12),
	-- 		AutomaticSize = Enum.AutomaticSize.Y,
	-- 		ZIndex = 5,
	-- 	})
	-- 	Instances:Create('UIStroke', { Parent = playerlist_holder.Instance, ZIndex = 5 })

	-- 	local bottom_components = Instances:Create('Frame', {
	-- 		Parent = playerlist_holder.Instance,
	-- 		Size = UDim2New(1, 26, 0, 0),
	-- 		BackgroundTransparency = 1,
	-- 		ZIndex = 6,
	-- 	})

	-- 	local list = Instances:Create('Frame', {
	-- 		Parent = bottom_components.Instance,
	-- 		Position = UDim2New(0, 0, 0, 2),
	-- 		Size = UDim2New(1, -27, 1, 232),
	-- 		ZIndex = 7,
	-- 	}); list:AddToTheme({ BackgroundColor3 = 'Element' })

	-- 	local inline = Instances:Create('Frame', {
	-- 		Parent = list.Instance,
	-- 		Position = UDim2New(0, 1, 0, 1),
	-- 		Size = UDim2New(1, -2, 1, -2),
	-- 		ZIndex = 8,
	-- 	}); inline:AddToTheme({ BackgroundColor3 = 'Inline 1' })

	-- 	local background = Instances:Create('Frame', {
	-- 		Parent = inline.Instance,
	-- 		Position = UDim2New(0, 1, 0, 1),
	-- 		Size = UDim2New(1, -2, 1, -2),
	-- 		ZIndex = 9,
	-- 	}); background:AddToTheme({ BackgroundColor3 = 'Background 2' })

	-- 	local accent = Instances:Create('Frame', {
	-- 		Parent = background.Instance,
	-- 		Size = UDim2New(1, 0, 0, 2),
	-- 		ZIndex = 10,
	-- 	}); accent:AddToTheme({ BackgroundColor3 = 'Accent' })

	-- 	Instances:Create('UIGradient', {
	-- 		Parent = background.Instance,
	-- 		Rotation = 90,
	-- 		Color = RGBSequence{
	-- 			RGBSequenceKeypoint(0, FromRGB(255,255,255)),
	-- 			RGBSequenceKeypoint(1, Library.Theme.Gradient)
	-- 		}
	-- 	}):AddToTheme({ Color = function()
	-- 		return RGBSequence{
	-- 			RGBSequenceKeypoint(0, FromRGB(255,255,255)),
	-- 			RGBSequenceKeypoint(1, Library.Theme.Gradient)
	-- 		}
	-- 	end })

	-- 	local contrast = Instances:Create('Frame', {
	-- 		Parent = background.Instance,
	-- 		Size = UDim2New(1, 0, 1, 0),
	-- 		BackgroundTransparency = 1,
	-- 		ZIndex = 10,
	-- 	})

	-- 	local ScrollingFrame = Instances:Create('ScrollingFrame', {
	-- 		Parent = contrast.Instance,
	-- 		AutomaticCanvasSize = Enum.AutomaticSize.Y,
	-- 		CanvasSize = UDim2New(0,0,0,0),
	-- 		BackgroundTransparency = 1,
	-- 		ScrollBarThickness = 2,
	-- 		ZIndex = 11,
	-- 		ClipsDescendants = true,
	-- 		Selectable = false,
	-- 		SelectionImageObject = NoSel.Instance,
	-- 	}); ScrollingFrame:AddToTheme({ ScrollBarImageColor3 = 'Accent' })

	-- 	Instances:Create('UIPadding', {
	-- 		Parent = ScrollingFrame.Instance,
	-- 		PaddingTop = UDimNew(0, 4),
	-- 		PaddingBottom = UDimNew(0, 4),
	-- 		PaddingRight = UDimNew(0, 4),
	-- 		PaddingLeft = UDimNew(0, 4)
	-- 	})
	-- 	Instances:Create('UIListLayout', {
	-- 		Parent = ScrollingFrame.Instance,
	-- 		Padding = UDimNew(0, 4),
	-- 		SortOrder = Enum.SortOrder.LayoutOrder
	-- 	})

	-- 	function cfg.create_player(p)
	-- 		local plr = (typeof(p) == 'Instance') and p or Players:FindFirstChild(p)
	-- 		if not plr then return end

	-- 		local name = plr.Name
	-- 		Library.playerlist_data[name] = Library.playerlist_data[name] or {}
	-- 		local path = Library.playerlist_data[name]

	-- 		if path.instance then path.instance:Destroy() end
	-- 		if path.line     then path.line:Destroy()     end

	-- 		local row = Instances:Create('TextButton', {
	-- 			Parent = ScrollingFrame.Instance,
	-- 			BackgroundTransparency = 1,
	-- 			Size = UDim2New(1, 0, 0, 0),
	-- 			AutomaticSize = Enum.AutomaticSize.Y,
	-- 			ZIndex = 12,
	-- 			AutoButtonColor = false,
	-- 			Selectable = false,
	-- 			SelectionImageObject = NoSel.Instance,
	-- 		})

	-- 		local nameLabel = Instances:Create('TextLabel', {
	-- 			Parent = row.Instance,
	-- 			FontFace = Library.Font,
	-- 			Text = name,
	-- 			TextColor3 = FromRGB(220,220,220),
	-- 			BackgroundTransparency = 1,
	-- 			TextXAlignment = Enum.TextXAlignment.Left,
	-- 			TextTruncate = Enum.TextTruncate.AtEnd,
	-- 			Size = UDim2New(1, -80, 0, 14),
	-- 			TextSize = 12,
	-- 			ZIndex = 13,
	-- 		}); nameLabel:AddToTheme({ TextColor3 = 'Text' })

	-- 		local priorityLabel = Instances:Create('TextLabel', {
	-- 			Parent = row.Instance,
	-- 			FontFace = Library.Font,
	-- 			Text = (name ~= Client.Name) and 'Neutral' or 'LocalPlayer',
	-- 			TextColor3 = FromRGB(220,220,220),
	-- 			BackgroundTransparency = 1,
	-- 			TextXAlignment = Enum.TextXAlignment.Right,
	-- 			AnchorPoint = Vector2New(1, 0),
	-- 			Position = UDim2New(1, -2, 0, 0),
	-- 			Size = UDim2New(0, 78, 0, 14),
	-- 			TextSize = 12,
	-- 			ZIndex = 13,
	-- 		})

	-- 		local sep = Instances:Create('Frame', {
	-- 			Parent = priorityLabel.Instance,
	-- 			Position = UDim2New(0, -4, 0, 0),
	-- 			Size = UDim2New(0, 1, 1, 0),
	-- 			BorderSizePixel = 0,
	-- 			ZIndex = 12,
	-- 		}); sep:AddToTheme({ BackgroundColor3 = 'Outline 1' })

	-- 		Instances:Create('UIListLayout', {
	-- 			Parent = row.Instance,
	-- 			FillDirection = Enum.FillDirection.Horizontal,
	-- 			SortOrder = Enum.SortOrder.LayoutOrder,
	-- 		})
	-- 		Instances:Create('UIPadding', {
	-- 			Parent = row.Instance,
	-- 			PaddingLeft  = UDimNew(0, 6),
	-- 			PaddingRight = UDimNew(0, 6),
	-- 			PaddingTop   = UDimNew(0, 2),
	-- 			PaddingBottom= UDimNew(0, 2),
	-- 		})

	-- 		local divider = Instances:Create('Frame', {
	-- 			Parent = ScrollingFrame.Instance,
	-- 			Size = UDim2New(1, 0, 0, 1),
	-- 			BorderSizePixel = 0,
	-- 			ZIndex = 12,
	-- 		}); divider:AddToTheme({ BackgroundColor3 = 'Outline 1' })

	-- 		path.instance = row.Instance
	-- 		path.line = divider.Instance
	-- 		path.priority = (name ~= Client.Name) and 'Neutral' or 'LocalPlayer'
	-- 		path.priority_text = priorityLabel.Instance

	-- 		row.Instance.MouseEnter:Connect(function()
	-- 			nameLabel.Instance = nameLabel.Instance or nameLabel
	-- 			nameLabel.Instance.TextColor3 = Themes.Preset.Accent
	-- 		end)
	-- 		row.Instance.MouseLeave:Connect(function()
	-- 			nameLabel.Instance = nameLabel.Instance or nameLabel
	-- 			nameLabel.Instance.TextColor3 = themes.preset.text
	-- 		end)

	-- 		row.Instance.MouseButton1Click:Connect(function()
	-- 			if name == Client.Name then return end
	-- 			if selected_button then selected_button.TextColor3 = themes.preset.text end
	-- 			selected_button = nameLabel.Instance or nameLabel
	-- 			nameLabel.Instance = nameLabel.Instance or nameLabel
	-- 			selected_button.TextColor3 = Themes.Preset.Accent

	-- 			Library.selected_player = name
	-- 			if Library.SetFlags and Library.SetFlags['PLAYERLIST_DROPDOWN'] then
	-- 				Library.SetFlags['PLAYERLIST_DROPDOWN'](path.priority_text.Text)
	-- 			end
	-- 			if cfg.labels.name then
	-- 				cfg.labels.name.SetText('Name: ' .. name)
	-- 				cfg.labels.display.SetText('Display Name: ' .. plr.DisplayName)
	-- 				cfg.labels.uid.SetText('User Id: ' .. plr.UserId)
	-- 			end
	-- 		end)

	-- 		return path
	-- 	end

	-- 	function cfg.search(text)
	-- 		local needle = string.lower(text or '')
	-- 		for _, plr in ipairs(Players:GetPlayers()) do
	-- 			local name = plr.Name
	-- 			local path = Library.playerlist_data[name]
	-- 			if path and path.instance and path.line then
	-- 				local hit = (needle == '') or (string.find(string.lower(name), needle, 1, true) ~= nil)
	-- 				path.instance.Visible = hit
	-- 				path.line.Visible = hit
	-- 			end
	-- 		end
	-- 	end

	-- 	function cfg.remove_player(p)
	-- 		local plr = (typeof(p) == 'Instance') and p or Players:FindFirstChild(p)
	-- 		if not plr then return end
	-- 		local name = plr.Name
	-- 		local path = Library.playerlist_data[name]
	-- 		if not path then return end
	-- 		if path.instance then path.instance:Destroy() end
	-- 		if path.line     then path.line:Destroy()     end
	-- 		Library.playerlist_data[name] = nil
	-- 	end

	-- 	function Library.get_priority(p)
	-- 		local name = (typeof(p) == 'Instance') and p.Name or p
	-- 		local path = Library.playerlist_data[name]
	-- 		return path and path.priority or nil
	-- 	end

	-- 	function Library.prioritize(text)
	-- 		local path = Library.playerlist_data[Library.selected_player]
	-- 		if path then
	-- 			path.priority_text.Text = text
	-- 			path.priority_text.TextColor3 = patterns[text] or themes.preset.text
	-- 			path.priority = text
	-- 		end
	-- 	end

	-- 	Players.PlayerAdded:Connect(cfg.create_player)
	-- 	Players.PlayerRemoving:Connect(cfg.remove_player)
	-- 	for _, plr in ipairs(Players:GetPlayers()) do
	-- 		cfg.create_player(plr)
	-- 	end

	-- 	cfg.labels.name = self:Label('Name: ??')
	-- 	cfg.labels.display = self:Label('Display Name: ??')
	-- 	cfg.labels.uid = self:Label('User Id: ??')

	-- 	return cfg
	-- end

end)()
--#endregion Library

--#region Visuals

--// FOV
Visuals.FOVSpace = Globals:Instance("ScreenGui", {
	Parent = CoreGui,
	IgnoreGuiInset = true;
});

Visuals.FOVOutline = Globals:Instance("Frame", {
	AnchorPoint = Vector2.new(0.5, 0.5),
	Position = UDim2.new(0.5, 0, 0.5, 0),
	BackgroundTransparency = 1,
	ZIndex = 9999,
	Size = UDim2.new(0, 500, 0, 500),
	Parent = Visuals.FOVSpace,
	Visible = false,
});

Visuals.FOVCircle = Globals:Instance("Frame", {
	BackgroundTransparency = 1,
	ZIndex = 9999,
	Position = UDim2.new(0, -1, 0, -1),
	Size = UDim2.new(1, 2, 1, 2),
	Visible = true,
	Parent = Visuals.FOVOutline,
	BackgroundColor3 = Themes.Preset.Accent,
});

Visuals.FOVInline = Globals:Instance("Frame", {
	Size = UDim2.new(1, -2, 1, -2),
	Position = UDim2.new(0, 1, 0, 1),
	BackgroundTransparency = 0.8,
	Parent = Visuals.FOVCircle,
	BackgroundColor3 = Themes.Preset.Accent,
});

Visuals.FOVCircleCorner = Globals:Instance("UICorner", {
	CornerRadius = UDim.new(1, 0),
	Parent = Visuals.FOVCircle,
});

Visuals.FOVInlineCorner = Globals:Instance("UICorner", {
	CornerRadius = UDim.new(1, 0),
	Parent = Visuals.FOVInline
});

Visuals.FOVCircleStroke = Globals:Instance("UIStroke", {
	Parent = Visuals.FOVCircle,
	Thickness = 3,
	Color = Themes.Preset.Accent
});

Visuals.FOVOutlineStroke = Globals:Instance("UIStroke", {
	Thickness = 5,
	Color = Color3.new(),
	Parent = Visuals.FOVOutline
});

Visuals.FOVOutlineCorner = Globals:Instance("UICorner", {
	CornerRadius = UDim.new(1, 0),
	Parent = Visuals.FOVOutline
});
--

--// Crosshair
Visuals.CrosshairHolder = Globals:Instance("Frame", {
	Position = UDim2.new(0, Camera.ViewportSize.X /2 , 0, Camera.ViewportSize.Y / 2),
	Size = UDim2.new(0, 100, 0, 100),
	BackgroundTransparency = 1,
	Parent = Library.HeadsUp,
	AnchorPoint = Vector2.new(0.5, 0.5),
	Visible = false,
});

Visuals.CrosshairTop = Globals:Instance("Frame", {
	AnchorPoint = Vector2.new(0.5, 0.5),
	BackgroundColor3 = Color3.fromRGB(255,255, 255),
	BorderColor3 = Color3.fromRGB(),
	BorderMode = Enum.BorderMode.Middle,
	Position = UDim2.new(0.5, 0, 0.5, -20),
	Size = UDim2.new(0, 2, 0, 20),
	Parent = Visuals.CrosshairHolder
});

Visuals.CrosshairTopGradient = Globals:Instance("UIGradient", {
	Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
	},
	Rotation = -90,
	Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(0.694513738155365, 0.5249999761581421),
		NumberSequenceKeypoint.new(0.8503741025924683, 0.78125),
		NumberSequenceKeypoint.new(1, 0.862500011920929)
	},
	Parent = Visuals.CrosshairTop
});

Visuals.CrosshairBottom = Globals:Instance("Frame", {
	AnchorPoint = Vector2.new(0.5, 0.5),
	BackgroundColor3 = Color3.fromRGB(255, 255, 255),
	BorderColor3 = Color3.fromRGB(0, 0, 0),
	BorderMode = Enum.BorderMode.Middle,
	Position = UDim2.new(0.5, 0, 0.5, 20),
	Size = UDim2.new(0, 2, 0, 20),
	Parent = Visuals.CrosshairHolder,
	Name = "Bottom"
})

Visuals.CrosshairBottomGradient = Globals:Instance("UIGradient", {
	Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
	},
	Rotation = 90,
	Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(0.6945, 0.525),
		NumberSequenceKeypoint.new(0.8504, 0.78125),
		NumberSequenceKeypoint.new(1, 0.8625)
	},
	Parent = Visuals.CrosshairBottom
});

Visuals.CrosshairLeft = Globals:Instance("Frame", {
	AnchorPoint = Vector2.new(0.5, 0.5),
	BackgroundColor3 = Color3.fromRGB(255, 255, 255),
	BorderColor3 = Color3.fromRGB(0, 0, 0),
	BorderMode = Enum.BorderMode.Middle,
	Position = UDim2.new(0.5, -20, 0.5, 0),
	Size = UDim2.new(0, 20, 0, 2),
	Parent = Visuals.CrosshairHolder,
	Name = "Left"
})

Visuals.CrosshairLeftGradient = Globals:Instance("UIGradient", {
	Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
	},
	Rotation = 180,
	Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(0.6945, 0.525),
		NumberSequenceKeypoint.new(0.8504, 0.78125),
		NumberSequenceKeypoint.new(1, 0.8625)
	},
	Parent = Visuals.CrosshairLeft
});

Visuals.CrosshairRight = Globals:Instance("Frame", {
	Name = "Right",
	AnchorPoint = Vector2.new(0.5, 0.5),
	BackgroundColor3 = Color3.fromRGB(255, 255, 255),
	BorderColor3 = Color3.fromRGB(0, 0, 0),
	BorderMode = Enum.BorderMode.Middle,
	Position = UDim2.new(0.5, 20, 0.5, 0),
	Size = UDim2.new(0, 20, 0, 2),
	Parent = Visuals.CrosshairHolder
});

Visuals.CrosshairRightGradient = Globals:Instance("UIGradient", {
	Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
	},
	Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(0.694513738155365, 0.5249999761581421),
		NumberSequenceKeypoint.new(0.8503741025924683, 0.78125),
		NumberSequenceKeypoint.new(1, 0.862500011920929)
	},
	Parent = Visuals.CrosshairRight
});
--

--// ESP
Visuals.MiscSpace = Globals:Instance("ScreenGui", {
	Parent = CoreGui,
	IgnoreGuiInset = true,
	DisplayOrder = 0,
	Name = "Misc Space",
});

Visuals.ESPSpace = Globals:Instance("ScreenGui", {
	Parent = CoreGui,
	IgnoreGuiInset = true,
	DisplayOrder = 0,
	Name = "ESP Space",
});

Visuals.VisibleText = Globals:Instance("TextLabel", {
	Parent = Visuals.MiscSpace,
	BackgroundTransparency = 1,
	Position = UDim2.new(0.5, 0, 0.5, 0),
	AnchorPoint = Vector2.new(0.5, 0.5),
	TextColor3 = themes.preset.text,
	TextSize = 14,
	Text = "",
	ZIndex = 9999,
	Visible = false,
});
Visuals.VisibleTextStroke = Globals.ApplyTextStroke(Visuals.VisibleText)

Visuals.ManipulationText = Globals:Instance("TextLabel", {
	Parent = Visuals.MiscSpace,
	BackgroundTransparency = 1,
	Position = UDim2.new(0.5, 0, 0.5, 0),
	AnchorPoint = Vector2.new(0.5, 0.5),
	TextColor3 = themes.preset.text,
	TextSize = 14,
	Text = "",
	ZIndex = 9999,
	Visible = false,
});
Visuals.ManipulationTextStroke = Globals.ApplyTextStroke(Visuals.ManipulationText)

Visuals.WallbangText = Globals:Instance("TextLabel", {
	Parent = Visuals.MiscSpace,
	BackgroundTransparency = 1,
	Position = UDim2.new(0.5, 0, 0.5, 0),
	AnchorPoint = Vector2.new(0.5, 0.5),
	TextColor3 = themes.preset.text,
	TextSize = 14,
	Text = "",
	ZIndex = 9999,
	Visible = false,
});
Visuals.WallbangTextStroke = Globals.ApplyTextStroke(Visuals.WallbangText)

Visuals.HitScanText = Globals:Instance("TextLabel", {
	Parent = Visuals.MiscSpace,
	BackgroundTransparency = 1,
	Position = UDim2.new(0.5, 0, 0.5, 0),
	AnchorPoint = Vector2.new(0.5, 0.5),
	TextColor3 = themes.preset.text,
	TextSize = 14,
	Text = "",
	ZIndex = 9999,
	Visible = false,
});
Visuals.HitScanTextStroke = Globals.ApplyTextStroke(Visuals.HitScanText)
--

--// Functions
-- Visuals.DrawLine = LPH_NO_VIRTUALIZE(function()
-- 	local Frame = Drawing.new("Line");
-- 	Frame.Visible = false;
-- 	Frame.ZIndex = 2;
-- 	Frame.Color = Color3.fromRGB(255, 255, 255);
-- 	return Frame;
-- end);

-- Visuals.DrawOutline = LPH_NO_VIRTUALIZE(function()
-- 	local Frame = Drawing.new("Line");
-- 	Frame.Visible = false;
-- 	Frame.ZIndex = 1;
-- 	Frame.Thickness = 3
-- 	Frame.Color = Color3.fromRGB(0, 0, 0);
-- 	return Frame;
-- end);

Visuals.IsPartVisible = LPH_NO_VIRTUALIZE(function(Part, Origin)
	if not Part then
		return nil
	end

	local Head = Globals.ClientCharacter and Globals.ClientCharacter:FindFirstChild('Head')

	if not Head then return end

	if not Origin then
		Origin = Head.CFrame.p;
	end;

	local Direction = (Part.CFrame.p - Origin).Unit * ((Part.CFrame.p - Origin).Magnitude + 10)

	local Params = Globals.RaycastParams

	local RayResult = workspace:Raycast(Origin, Direction, Params)

	if RayResult and RayResult.Instance and RayResult.Instance:IsDescendantOf(Part.Parent) then
		return true
	end

	return nil
end);

Visuals.GetDistanceFromCenter = LPH_NO_VIRTUALIZE(function(part)
	local position = part
	if typeof(part) == "Instance" then
		position = part.CFrame.p
	end
	local ScreenPosition, OnScreen = Camera:WorldToViewportPoint(position);
	if OnScreen then
		local Center = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
		return (Center - Vector2.new(ScreenPosition.X, ScreenPosition.Y)).Magnitude
	end
	return math.huge
end);
--

--#endregion Visuals

--#region EntityClass Global
EntityClass.__index = EntityClass
EntityClass.Global.__index = EntityClass.Global
EntityClass.Main.__index = EntityClass.Main
EntityClass.Main.Functions.__index = EntityClass.Main.Functions

local is_cframe_visible = LPH_NO_VIRTUALIZE(function(cframe_from, cframe_to)
	if not (cframe_to and cframe_from) then
		return false
	end
	-- return true

	local castresults = workspace:Raycast(cframe_from.Position, cframe_to.Position - cframe_from.Position, Globals.RaycastParams)
	return not castresults
end)

-- hoisted once
local manipOffsets = {
	Vector3.new( 3, 0, 0), Vector3.new(-3, 0, 0),
	Vector3.new( 6, 0, 0), Vector3.new(-6, 0, 0),
	Vector3.new( 4, 0, 0), Vector3.new(-4, 0, 0),

	Vector3.new( 3, 2, 0), Vector3.new(-3, 2, 0),
	Vector3.new( 6, 2, 0), Vector3.new(-6, 2, 0),
	Vector3.new( 4, 2, 0), Vector3.new(-4, 2, 0),

	Vector3.new( 0.2, 3.9, 0),
	Vector3.new( 1.8, 4.1, 1),
	Vector3.new( 2.1, 4.4, 1.1),
	Vector3.new( 0.15, 5.2, 0.1),
	Vector3.new(-1.8, 5.4,-0.2),
	Vector3.new(-2.3, 6.0,-0.4),
	Vector3.new( 0.1, 6.0, 0.0),

	Vector3.new( 7, 0, 0), Vector3.new(-7, 0, 0),
	Vector3.new( 7, 2, 0), Vector3.new(-7, 2, 0),

	Vector3.new( 0.1, 7.5, 0.0),
	Vector3.new( 0.1, 8.0, 0.0),
}

local wallbangOffsets = {
	Vector3.new( 0,-3, 0),
	Vector3.new( 3,-3, 0), Vector3.new(-3,-3, 0),
	Vector3.new( 6,-4, 0), Vector3.new(-6,-4, 0),
	Vector3.new( 0,-4, 0),
	Vector3.new( 3,-4, 2), Vector3.new(-3,-4,-2),
}

EntityClass.Global.FindVisiblePosition = LPH_NO_VIRTUALIZE(function(Origin, Destination)
	local o = (typeof(Origin) == 'CFrame') and Origin or CFrame.new(Origin)
	local doHitScan = flags.HitScan == true

	for i = 1, #manipOffsets do
		local pos = o * manipOffsets[i]
		-- if is_cframe_visible(o, CFrame.new(pos)) then
			if Visuals.IsPartVisible(Destination, pos) then
				return pos
			elseif doHitScan then
				local hs = EntityClass.Global.GetHitScanPos(CFrame.new(pos), Destination)
				if hs then
					return pos, hs
				end
			end
		-- end
	end

	return nil
end)

EntityClass.Global.FindVisiblePosition2 = LPH_NO_VIRTUALIZE(function(Origin, Destination)
	local o = (typeof(Origin) == 'CFrame') and Origin or CFrame.new(Origin)

	for i = 1, #wallbangOffsets do
		local pos = o * wallbangOffsets[i]
		if Visuals.IsPartVisible(Destination, pos) then
			return pos
		end
	end

	return nil
end)

local is_part_visible = LPH_NO_VIRTUALIZE(function(origin, target_part)
	if not (target_part and origin) then
		return false
	end

	local castresults = workspace:Raycast(origin.Position, target_part:GetPivot().Position - origin.Position, Globals.RaycastParams)
	if not (castresults and castresults.Instance) then
		return false
	end
	return castresults.Instance.Parent == target_part.Parent
end)

local vectors = { -- prefer small
	Vector3.new(1 / 2, 0, 0), -- small right
	Vector3.new(-1 / 2, 0, 0), -- small left
	Vector3.new(0, 0, 1 / 2), -- small forward
	Vector3.new(0, 0, -1 / 2), -- small backward
	Vector3.new(0, 1 / 2, 0), -- small up
	Vector3.new(0, -1 / 2, 0), -- small down

	Vector3.new(1 / 2, 1 / 2, 0), -- small right up
	Vector3.new(1 / 2, -1 / 2, 0), -- small right down
	Vector3.new(-1 / 2, 1 / 2, 0), -- small left up
	Vector3.new(-1 / 2, -1 / 2, 0), -- small left down
	Vector3.new(0, 1 / 2, 1 / 2), -- small forward up
	Vector3.new(0, -1 / 2, 1 / 2), -- small forward down
	Vector3.new(0, 1 / 2, -1 / 2), -- small backward up
	Vector3.new(0, -1 / 2, -1 / 2), -- small backward down

	Vector3.new(1, 0, 0), -- big right
	Vector3.new(-1, 0, 0), -- big left
	Vector3.new(0, 0, 1), -- big forward
	Vector3.new(0, 0, -1), -- big backward
	Vector3.new(0, 1, 0), -- big up
	Vector3.new(0, -1, 0), -- big down
}

EntityClass.Global.GetHitScanPos = LPH_NO_VIRTUALIZE(function(origin_cframe, target_part)
	for _, vector in vectors do
		local modified = target_part.CFrame * CFrame.new(vector * 4)

		if is_part_visible(modified, target_part) and is_cframe_visible(origin_cframe, modified) then
			return modified.Position
		end
	end
end)

Globals.is_visible = LPH_NO_VIRTUALIZE(function(Destination)
	local part = Destination and Destination.PrimaryPart
	if not part then return false end
	local RaycastResult = workspace:Raycast(Camera.CFrame.p, (part.Position - Camera.CFrame.p).Unit * 10000, Globals.RaycastParams);
	return RaycastResult and RaycastResult.Instance:IsDescendantOf(Destination);
end)
local _bb_cache = setmetatable({}, { __mode = 'k' });

local _MIN_WIDTH = 2.5;

local _tool_cache = setmetatable({}, { __mode = 'k' });
local _tool_markers = { Detail = true; Main = true; Handle = true; Attachments = true; ArrowAttach = true; Attach = true; };
local _skip_models = { Hair = true; HolsterModel = true; };

local _bind_tool_cache = LPH_NO_VIRTUALIZE(function(character)
	if (_tool_cache[character]) then return; end;
	_tool_cache[character] = { name = 'None' };

	local function rescan()
		local best = 'None';
		for _, v in character:GetChildren() do
			if (v:IsA('Model') and not _skip_models[v.Name] and v.PrimaryPart) then
				for k in _tool_markers do
					if (v:FindFirstChild(k)) then
						best = v.Name; break;
					end;
				end;
				if (best ~= 'None') then break; end;
			end;
		end;
		_tool_cache[character].name = best;
	end

	character.DescendantAdded:Connect(rescan);
	character.DescendantRemoving:Connect(rescan);
	rescan();
end)

Globals.get_tool_name = LPH_NO_VIRTUALIZE(function(self,character)
	if (not character or not character:IsA('Model')) then return 'None'; end;
	_bind_tool_cache(character);
	return _tool_cache[character].name or 'None';
end)

local setp = LPH_NO_VIRTUALIZE(function(o, k, v)
	if (o[k] ~= v) then o[k] = v; end;
end)

local setp2 = LPH_NO_VIRTUALIZE(function(o, k1, v1, k2, v2)
	if (o[k1] ~= v1) then o[k1] = v1; end;
	if (o[k2] ~= v2) then o[k2] = v2; end;
end)

local show = LPH_NO_VIRTUALIZE(function(o, yes)
	if (o.Visible ~= yes) then o.Visible = yes; end;
end)

EntityClass.Global.DestroyFuncs = {}
Globals.custom_bounds = LPH_NO_VIRTUALIZE(function(self, model)
	if (not model or not model:IsA('Model')) then return; end;

	local cache = _bb_cache[model];
	local pivot = model:GetPivot();

	if (cache and cache.pivot == pivot) then
		return cache.cframe, cache.size, cache.center;
	end;

	local cf, size = model:GetBoundingBox();
	if (not cf or not size) then return; end;

	if (size.X < _MIN_WIDTH) then
		size = Vector3.new(_MIN_WIDTH, size.Y, size.Z);
	end;

	local center = cf.Position;

	cache = {
		pivot = pivot;
		cframe = CFrame.new(center);
		size = size;
		center = center;
	};
	_bb_cache[model] = cache;

	return cache.cframe, cache.size, cache.center;
end)

local BoxMath = LPH_NO_VIRTUALIZE(function(Torso)
	local vTop = Torso.Position + (Torso.CFrame.UpVector * 3); -- 2.5
	local vBottom = Torso.Position - (Torso.CFrame.UpVector * 2.8);

	local top, topIsRendered = Camera:WorldToScreenPoint(vTop);
	local bottom, bottomIsRendered = Camera:WorldToScreenPoint(vBottom);

	local width = math_max(math.floor(math_abs(top.X - bottom.X)), 2);
	local height = math_max(math.floor(math_abs(bottom.Y - top.Y)), 4);
	local boxSize = Vector2.new(math_max(width, height * 0.6), height);
	local boxPosition = Vector2.new(math.floor(top.X + bottom.X) / 2 - boxSize.X / 2, math_min(top.Y, bottom.Y));

	return boxPosition, boxSize, (topIsRendered or bottomIsRendered);
end)

EntityClass.Global.CreateESP = function(model, Entity)
	if not Library then
		return
	end

	local esp_holder = Instances.Create2('ScreenGui', { Parent = CoreGui, Name = 'esp_holder' });
	local arrows_holder = Instances.Create2('ScreenGui', { Parent = CoreGui, Name = 'arrows_holder', IgnoreGuiInset = true });

	local drawings = ({
		name = Instances.Create2('TextLabel', { Parent = esp_holder, BackgroundTransparency = 1, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), FontFace = Library.espfont, TextSize = flags.espfontsize, Text = model.Name }),
		distance = Instances.Create2('TextLabel', { Parent = esp_holder, BackgroundTransparency = 1, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), FontFace = Library.espfont, TextSize = flags.espfontsize }),
		weapon = Instances.Create2('TextLabel', { Parent = esp_holder, BackgroundTransparency = 1, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), FontFace = Library.espfont, TextSize = flags.espfontsize }),
		HealthText = Instances.Create2('TextLabel', { Parent = esp_holder, TextXAlignment = Enum.TextXAlignment.Center, FontFace = Library.espfont, TextSize = flags.espfontsize, BackgroundTransparency = 1, TextStrokeTransparency = 0, ZIndex = 999, TextStrokeColor3 = Color3.new(0, 0, 0) }),

		BehindHealthbar = Instances.Create2('Frame', { Parent = esp_holder, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0, BorderSizePixel = 1, BorderColor3 = Color3.fromRGB(0, 0, 0) }),
		Healthbar = Instances.Create2('Frame', { Parent = esp_holder, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0, BorderSizePixel = 0 }),
		HealthbarGradient = Instances.Create2('UIGradient', { Enabled = true, Rotation = -90 }),

		BehindArmorBar = Instances.Create2('Frame', { Parent = esp_holder, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0, BorderSizePixel = 1, BorderColor3 = Color3.fromRGB(0, 0, 0) }),
		ArmorBar = Instances.Create2('Frame', { Parent = esp_holder, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0, BorderSizePixel = 0 }),

		Dick = Instances.Create2('Frame', { Parent = esp_holder, ZIndex = 3 }),

		Box = Instances.Create2('Frame', { Parent = esp_holder, BackgroundTransparency = 1, Transparency = 1, BackgroundColor3 = Color3.new(1, 1, 1), ZIndex = -999 }),
		Box2 = Instances.Create2('Frame', { Parent = esp_holder, BackgroundTransparency = 1, Transparency = 1, BackgroundColor3 = Color3.new(1, 1, 1), ZIndex = 999 }),
		Outline = Instances.Create2('UIStroke', { Color = Color3.fromRGB(0, 0, 0), Thickness = 3, Transparency = 0, LineJoinMode = Enum.LineJoinMode.Miter, Enabled = true }),
		Outline2 = Instances.Create2('UIStroke', { Thickness = 1, Enabled = true, LineJoinMode = Enum.LineJoinMode.Miter }),

		FlagHolder = Instances.Create2('Frame', { Parent = esp_holder, ClipsDescendants = false, Size = UDim2.new(0, 150, 0, 12), AnchorPoint = Vector2.new(0, 0), BackgroundTransparency = 1 }),

		LeftTopFix = Instances.Create2('Frame', { Parent = esp_holder, Size = UDim2.new(0, 1, 0, 6), ZIndex = 999 }),
		RightTopFix = Instances.Create2('Frame', { Parent = esp_holder, Size = UDim2.new(0, 1, 0, 6), ZIndex = 999 }),
		BottomSideFix = Instances.Create2('Frame', { Parent = esp_holder, Size = UDim2.new(0, 1, 0, 6), ZIndex = 999 }),
		BottomRightSideFix = Instances.Create2('Frame', { Parent = esp_holder, Size = UDim2.new(0, 1, 0, 6), ZIndex = 999 }),
		LeftTop = Instances.Create2('Frame', { Parent = esp_holder, ZIndex = 3 }),
		LeftSide = Instances.Create2('Frame', { Parent = esp_holder }),
		RightTop = Instances.Create2('Frame', { Parent = esp_holder, ZIndex = 3 }),
		RightSide = Instances.Create2('Frame', { Parent = esp_holder }),
		BottomSide = Instances.Create2('Frame', { Parent = esp_holder }),
		BottomDown = Instances.Create2('Frame', { Parent = esp_holder }),
		BottomRightSide = Instances.Create2('Frame', { Parent = esp_holder }),
		BottomRightDown = Instances.Create2('Frame', { Parent = esp_holder }),

		Arrow = Instances.Create2('ImageLabel', { Parent = arrows_holder, BackgroundTransparency = 1, AnchorPoint = Vector2.new(0.5, 0.5) }),
	});

	drawings.FlagsListLayout = Instances.Create2('UIListLayout', { Padding = UDim.new(0, 0), SortOrder = Enum.SortOrder.LayoutOrder, Parent = drawings.FlagHolder });
	drawings.FlagsPadding = Instances.Create2('UIPadding', { PaddingTop = UDim.new(0, 2), Parent = drawings.FlagHolder, PaddingLeft = UDim.new(0, 2) });

	for FlagName, FlagData in EntityClass.Flags do
		drawings['Flag_' .. FlagName] = Globals:Instance('TextLabel', EntityClass.FlagProperties);
		drawings['Flag_' .. FlagName].Parent = drawings.FlagHolder;
		drawings['Flag_' .. FlagName].FontFace = Library.espfont;
		drawings['Flag_' .. FlagName].TextSize = flags.espfontsize - 3;
		drawings['Flag_' .. FlagName].ZIndex = 999;
		drawings['FlagStroke_' .. FlagName] = Globals.ApplyTextStroke(drawings['Flag_' .. FlagName]);
		drawings['FlagStroke_' .. FlagName].Transparency = 1;
		drawings['Flag_' .. FlagName].ZIndex = 999;
	end;

	drawings.HealthbarGradient.Parent = drawings.Healthbar;
	drawings.Outline.Parent = drawings.Box;
	drawings.Outline2.Parent = drawings.Box2;
	local ChamsTbl = {};

	local hide_esp = LPH_NO_VIRTUALIZE(function()
		for _, name in { 'name','distance','weapon','BehindArmorBar','ArmorBar','BehindHealthbar','Healthbar','HealthText','Arrow','LeftTopFix','RightTopFix','BottomSideFix','BottomRightSideFix','LeftTop','LeftSide','RightTop','RightSide','BottomSide','BottomDown','BottomRightSide','BottomRightDown','Box','Box2','FlagHolder', 'Dick' } do
			local obj = drawings[name];
			if (obj) then obj.Visible = false; end;
		end;
		for i, v in ChamsTbl do
			if (v[1]) then v[1]:Destroy(); end;
			if (v[2]) then v[2]:Destroy(); end;
			ChamsTbl[i] = nil;
		end;
	end)

	local clear_esp = LPH_NO_VIRTUALIZE(function()
		for _, v in drawings do
			if (typeof(v) == 'Instance' and v.Parent) then v:Destroy(); end;
		end;
		if (esp_holder) then esp_holder:Destroy(); end;
		if (arrows_holder) then arrows_holder:Destroy(); end;
		for i, v in ChamsTbl do
			if (v[1]) then v[1]:Destroy(); end;
			if (v[2]) then v[2]:Destroy(); end;
			ChamsTbl[i] = nil;
		end;
	end)

	EntityClass.Global.DestroyFuncs[model] = clear_esp;
	model.Destroying:Connect(clear_esp);

	local health_state = {};
	local ARROW_THREE = 'rbxassetid://282305485';
	local ARROW_FOUR  = 'rbxassetid://15000587389';

	-- haha less index = fps+
	local healthtext = drawings.HealthText
	local update = LPH_NO_VIRTUALIZE(function()
		local now = tick();

		local ch = (model:IsA('Player') and model.Character) or model;
		if (not ch) then return hide_esp(); end;
		local root = ch:FindFirstChild('HumanoidRootPart');
		local humanoid = ch:FindFirstChild('Humanoid');
		if (not root or not humanoid or humanoid.Health <= 0) then return hide_esp(); end;
		local position = root.Position;
		local ct = Entity.ClassType;
		local pfx = ct .. '_';

		if (not flags[pfx .. 'Enabled_ESP']) then return hide_esp(); end;

		local cam = Camera;
		local distStuds = (cam.CFrame.Position - position).Magnitude;
		local measureMeters = (flags[pfx .. 'measurement_type'] == 'Meters');
		local max_distance = measureMeters and (distStuds / 3.5714285714) or distStuds;
		local cap = flags[pfx .. 'ESP_Distance'];
		if (type(max_distance) ~= 'number' or type(cap) ~= 'number' or max_distance > cap) then return hide_esp(); end;

		local isTeam = Globals.isTeam(Entity.Pointer);
		-- local meta = Library.playerlist_data[tostring(Entity.Pointer)];
		local isTeamCheck = isTeam or (meta and meta.priority == 'Teammate');
		if (flags[pfx .. 'esp_teamcheck'] and isTeamCheck) then return hide_esp(); end;

		local boxPos, boxSize, on_screen = BoxMath(root);
		if (not on_screen) then return hide_esp(); end;

		local px, py = boxPos.X + boxSize.X * 0.5, boxPos.Y + boxSize.Y * 0.5;
		local scaleX, scaleY = boxSize.X, boxSize.Y;
		local hx, hy = scaleX * 0.5, scaleY * 0.5;


		local targetColor;
		if (Entity == EntityClass.TargetData) then
			targetColor = flags.TargetColor.Color;
			if (EntityClass.ManipulatedPlayer == Entity.Pointer) then
				if (EntityClass.Manipulated) then targetColor = flags.ManipColor.Color; end;
				if (EntityClass.Wallbanged) then targetColor = flags.WallbangColor.Color; end;
				if (EntityClass.HitScanned) then targetColor = flags.HitScanColor.Color; end;
			end;
		end;

		if (isTeamCheck) then targetColor = flags.FriendlyTargetColor.Color; end;

		local boxesAccent = targetColor or (Entity.CoreInformation.Visible and flags[pfx .. 'boxes_visible_color'].Color) or flags[pfx .. 'boxes_accent'].Color;
		local boxColorTarget = targetColor or boxesAccent;

		if (on_screen and flags[pfx .. 'boxes_esp'] and flags[pfx .. 'boxes_type'] == 'Full') then
			local bx = drawings.Box; local bx2 = drawings.Box2;
			setp2(bx2, 'Size', UDim2.new(0, scaleX + 1, 0, scaleY + 1), 'Position', UDim2.new(0, px - hx - 1, 0, py - hy - 1));
			setp2(bx,  'Size', UDim2.new(0, scaleX - 1, 0, scaleY - 1), 'Position', UDim2.new(0, px - hx, 0, py - hy));
			show(bx, true); show(bx2, true);
			setp(drawings.Outline2, 'Color', drawings.Outline2.Color:Lerp(boxColorTarget, 0.1));
		else
			show(drawings.Box, false); show(drawings.Box2, false);
		end;

		if (on_screen and flags[pfx .. 'boxes_esp'] and flags[pfx .. 'boxes_type'] == 'Corner') then
			local acc = targetColor or boxesAccent;
			local ltfx, ltfy = px - hx, py - hy;
			local rtfX, btmY = px + hx - 1, py + hy;

			local function setFix(a, x, y)
				setp2(a, 'Position', UDim2.new(0, x, 0, y), 'BorderSizePixel', 0);
				setp(a, 'BackgroundColor3', a.BackgroundColor3:Lerp(acc, 0.1));
				show(a, true);
			end
			local function setSeg(a, x, y, w, h, apx, apy)
				setp2(a, 'Position', UDim2.new(0, x, 0, y), 'Size', UDim2.new(0, w, 0, h));
				setp(a, 'AnchorPoint', Vector2.new(apx, apy));
				setp(a, 'BorderSizePixel', 1);
				setp(a, 'BackgroundColor3', a.BackgroundColor3:Lerp(acc, 0.1));
				show(a, true);
			end

			setFix(drawings.LeftTopFix, ltfx, ltfy);
			setFix(drawings.RightTopFix, rtfX, ltfy);
			setFix(drawings.BottomSideFix, ltfx, btmY - 6);
			setFix(drawings.BottomRightSideFix, rtfX, btmY - 6);

			setSeg(drawings.LeftTop, ltfx, ltfy, scaleX / 3, 1, 0, 0);
			setSeg(drawings.LeftSide, ltfx, ltfy, 1, scaleY / 4, 0, 0);
			setSeg(drawings.RightTop, px + hx, ltfy, scaleX / 3, 1, 1, 0);
			setSeg(drawings.RightSide, px + hx - 1, ltfy, 1, scaleY / 4, 0, 0);
			setSeg(drawings.BottomSide, ltfx, btmY, 1, scaleY / 4, 0, 3);
			setSeg(drawings.BottomDown, ltfx, btmY, scaleX / 3, 1, 0, 1);
			setSeg(drawings.BottomRightSide, px + hx, btmY, 1, scaleY / 4, 1, 1);
			setSeg(drawings.BottomRightDown, px + hx, btmY, scaleX / 3, 1, 1, 1);
		else
			show(drawings.LeftTopFix, false); show(drawings.RightTopFix, false); show(drawings.BottomSideFix, false); show(drawings.BottomRightSideFix, false);
			show(drawings.LeftTop, false); show(drawings.LeftSide, false); show(drawings.BottomSide, false); show(drawings.BottomDown, false);
			show(drawings.RightTop, false); show(drawings.RightSide, false); show(drawings.BottomRightSide, false); show(drawings.BottomRightDown, false);
		end;

		if ((not on_screen) and flags[pfx .. 'ESP_Arrows']) then
			local a = drawings.Arrow;
			local sz = flags[pfx .. 'ESP_Arrow_Size'];
			setp(a, 'Size', UDim2.new(0, sz, 0, sz));
			if (flags[pfx .. 'ESP_RainbowArrows']) then
				local hue = (now * 0.5) % 1;
				setp(a, 'ImageColor3', Color3.fromHSV(hue, 1, 1));
			else
				setp(a, 'ImageColor3', flags[pfx .. 'Arrows_AccentESP'].Color);
			end;
			local center = cam.ViewportSize * 0.5;
			local proj = cam.CFrame:PointToObjectSpace(root.Position);
			local angle = math.atan2(proj.Z, proj.X);
			local radius = flags[pfx .. 'Arrows_Radius'];
			local circularX = center.X + math.cos(angle) * radius;
			local circularY = center.Y + math.sin(angle) * radius;
			setp(a, 'Image', (flags[pfx .. 'arrow_points'] == 'Three') and ARROW_THREE or ARROW_FOUR);
			setp(a, 'Position', UDim2.new(0, circularX - (sz * 0.5), 0, circularY - (sz * 0.5)));
			setp(a, 'Rotation', math.deg(angle) + 90);
			setp(a, 'ImageTransparency', (math.sin(now * 4.5) * 0.5 + 0.5));
			show(a, true);
		else
			show(drawings.Arrow, false);
		end;

		if (on_screen and flags[pfx .. 'ESP_Names']) then
			local n = drawings.name;
			local col = targetColor or (Entity.CoreInformation.Visible and flags[pfx .. 'Names_VisibleAccentColor'].Color) or flags[pfx .. 'Names_AccentESP'].Color;
			setp(n, 'TextColor3', n.TextColor3:Lerp(col, 0.1));
			setp(n, 'Position', UDim2.new(0, px - 2, 0, py - hy - 10));
			show(n, true);
		else
			show(drawings.name, false);
		end;

		if (on_screen and flags[pfx .. 'Distance_ESP']) then
			local d = drawings.distance;
			local col = targetColor or (Entity.CoreInformation.Visible and flags[pfx .. 'Distance_VisibleAccentColor'].Color) or flags[pfx .. 'Distance_AccentESP'].Color;
			setp(d, 'TextColor3', d.TextColor3:Lerp(col, 0.1));
			d.Text = (measureMeters and string.format('%dm', math.floor(max_distance))) or string.format('%ds', math.floor(max_distance));
			show(d, true);
		else
			show(drawings.distance, false);
		end;

		if (on_screen and flags[pfx .. 'Weapon_ESP']) then
			local w = drawings.weapon;
			local col = targetColor or (Entity.CoreInformation.Visible and flags[pfx .. 'Weapon_VisibleAccentColor'].Color) or flags[pfx .. 'Weapon_AccentESP'].Color;
			setp(w, 'TextColor3', w.TextColor3:Lerp(col, 0.1));
			w.Text = Globals:get_tool_name(ch);
			show(w, true);
		else
			show(drawings.weapon, false);
		end;

		local bottom_offset = (flags[pfx .. 'Healthbar_ESP'] and flags[pfx .. 'healthbar_pos'] == 'Bottom') and 7 or 0;
		if (flags[pfx .. 'Distance_ESP'] and flags[pfx .. 'Weapon_ESP']) then
			setp(drawings.distance, 'Position', UDim2.new(0, px, 0, py + hy + 17 + bottom_offset));
			setp(drawings.weapon,  'Position', UDim2.new(0, px, 0, py + hy + 6  + bottom_offset));
		elseif (flags[pfx .. 'Distance_ESP']) then
			setp(drawings.distance, 'Position', UDim2.new(0, px, 0, py + hy + 7 + bottom_offset));
		elseif (flags[pfx .. 'Weapon_ESP']) then
			setp(drawings.weapon, 'Position', UDim2.new(0, px, 0, py + hy + 6 + bottom_offset));
		end;

		if (on_screen and flags[pfx .. 'Dick_ESP']) then
			local d = drawings.Dick
			local col = targetColor or (Entity.CoreInformation.Visible and flags[pfx .. 'Dick_VisibleAccentColor'].Color) or flags[pfx .. 'Dick_AccentESP'].Color

			local lt = ch:FindFirstChild('LowerTorso') or ch:FindFirstChild('Torso') or root
			local lenStuds = flags[pfx .. 'Dick_Length']
			local thickness = flags[pfx .. 'Dick_Thickness']

			if lt then
				local p0 = lt.Position
				local p1 = p0 + lt.CFrame.LookVector * lenStuds

				local s0, vis0 = Camera:WorldToScreenPoint(p0)
				local s1, vis1 = Camera:WorldToScreenPoint(p1)

				if ( (vis0 or vis1) and (s0.Z > 0 or s1.Z > 0) ) then
					local dx, dy = (s1.X - s0.X), (s1.Y - s0.Y)
					local lengthPx = math.sqrt(dx*dx + dy*dy)
					local angleDeg = math.deg(math.atan2(dy, dx))

					local midX = (s0.X + s1.X) * 0.5
					local midY = (s0.Y + s1.Y) * 0.5

					setp(d, 'AnchorPoint', Vector2.new(0.5, 0.5))
					setp2(d, 'Position', UDim2.new(0, midX, 0, midY), 'Size', UDim2.new(0, lengthPx, 0, thickness))
					setp(d, 'Rotation', angleDeg)
					setp(d, 'BackgroundColor3', d.BackgroundColor3:Lerp(col, 0.1))
					show(d, true)
				else
					show(d, false)
				end
			else
				show(d, false)
			end
		else
			show(drawings.Dick, false)
		end

		if (on_screen and flags[pfx .. 'Healthbar_ESP']) then
			local health = math.floor(humanoid.Health);
			local max_health = humanoid.MaxHealth;
			local eid = tostring(Entity.Pointer);
			local s = health_state[eid];
			if (not s) then s = { last = health, from = health, to = health, t0 = now }; health_state[eid] = s; end;
			if (health ~= s.to) then s.from = s.last; s.to = health; s.t0 = now; end;
			local a = math.clamp((now - s.t0) / 0.2, 0, 1);
			s.last = s.from + (s.to - s.from) * a;
			local cur = s.last;

			local r = cur / max_health;
			local bar_width = flags[pfx .. 'ESP_HealthbarWidth'];

			local boxLeft  = math.floor(px - hx + 0.5);
			local boxTop   = math.floor(py - hy + 0.5);
			local innerW   = math_max(1, math.floor(scaleX - 1 + 0.5));
			local innerH   = math_max(1, math.floor(scaleY - 1 + 0.5));

			local hc = Color3.new(1, 0, 0):lerp(Color3.new(0.7, 0.8, 0), r):lerp(Color3.new(0, 1, 0), math_max(0, (r - 0.5) * 2));
			setp(healthtext, 'TextColor3', hc);

			if (flags[pfx .. 'lerp_health']) then
				if (drawings._lastHC ~= hc) then
					drawings._lastHC = hc;
					drawings.HealthbarGradient.Color = ColorSequence.new(hc);
				end;
			else
				if (not drawings._staticGradSet) then
					drawings.HealthbarGradient.Color = ColorSequence.new{
						ColorSequenceKeypoint.new(0, flags[pfx .. 'Healthbar_Gradient1ESP'].Color),
						ColorSequenceKeypoint.new(0.5, flags[pfx .. 'Healthbar_Gradient2ESP'].Color),
						ColorSequenceKeypoint.new(1, flags[pfx .. 'Healthbar_Gradient3ESP'].Color)
					};
					drawings._staticGradSet = true;
				end;
			end;

			if (flags[pfx .. 'healthbar_pos'] == 'Left') then
				local left_x = boxLeft - 7;
				local fill_h = math_max(0, math.floor(innerH * r + 0.5));
				local fill_y = boxTop + (innerH - fill_h);

				setp2(drawings.BehindHealthbar, 'Position', UDim2.new(0, left_x, 0, boxTop), 'Size', UDim2.new(0, bar_width, 0, innerH));
				setp2(drawings.Healthbar, 'Position', UDim2.new(0, left_x, 0, fill_y), 'Size', UDim2.new(0, bar_width, 0, fill_h));
				setp(drawings.HealthbarGradient, 'Rotation', -90);

				if (flags[pfx .. 'Healthtext_ESP'] and health < max_health) then
					healthtext.Text = tostring(math.floor(cur));
					setp(healthtext, 'Position', UDim2.new(0, left_x - 10, 0, fill_y));
					show(healthtext, true);
				else
					show(healthtext, false);
				end;
			else
				local bottom_y = math.floor(py + hy + 4.5);
				local fill_w = math_max(0, math.floor(innerW * r + 0.5));

				setp2(drawings.BehindHealthbar, 'Position', UDim2.new(0, boxLeft, 0, bottom_y), 'Size', UDim2.new(0, innerW, 0, bar_width));
				setp2(drawings.Healthbar, 'Position', UDim2.new(0, boxLeft, 0, bottom_y), 'Size', UDim2.new(0, fill_w, 0, bar_width));
				setp(drawings.HealthbarGradient, 'Rotation', 0);

				if (flags[pfx .. 'Healthtext_ESP'] and health < max_health) then
					healthtext.Text = tostring(math.floor(cur));
					setp(healthtext, 'Position', UDim2.new(0, boxLeft + fill_w, 0, bottom_y + 1));
					show(healthtext, true);
				else
					show(healthtext, false);
				end;
			end;

			show(drawings.Healthbar, true);
			show(drawings.BehindHealthbar, true);
		else
			show(drawings.Healthbar, false); show(healthtext, false); show(drawings.BehindHealthbar, false);
		end;

		if (on_screen and flags[pfx .. 'Flags_ESP'] and model:IsA('Player')) then
			show(drawings.FlagHolder, true);
			setp(drawings.FlagHolder, 'Position', UDim2.new(0, px + (scaleX * 0.5) + 1, 0, py - (scaleY * 0.5) - 1));

			local AnimationSpeed = EntityClass.AnimationSpeed;
			local EasingStyle = Enum.EasingStyle.Quad;
			local TI = TweenInfo.new(AnimationSpeed, EasingStyle);

			for FlagName, FlagData in EntityClass.Flags do
				local showFlag = FlagData.Allow(Entity);
				local Flag = drawings['Flag_' .. FlagName];
				local Stroke = drawings['FlagStroke_' .. FlagName];
				if (not Flag) then
					Flag = Globals:Instance('TextLabel', EntityClass.FlagProperties);
					Stroke = Globals.ApplyTextStroke(Flag);
					Stroke.Transparency = 1;
					drawings['Flag_' .. FlagName] = Flag;
					drawings['FlagStroke_' .. FlagName] = Stroke;
				end;

				local color = (FlagData.Color and FlagData.Color(Entity)) or flags[FlagName .. 'FlagColor'].Color;
				local text = FlagData.Text(Entity) or '';
				local newText = ' ' .. text;
				if (Flag.Text ~= newText) then Flag.Text = newText; end;
				setp(Flag, 'TextColor3', color);

				if (not Flag:GetAttribute('IsTweening')) then
					Flag:SetAttribute('IsTweening', true);
					if (showFlag) then show(Flag, true); Flag.LayoutOrder = now; end;
					local tw = Globals:Tween(Flag, TI, { TextTransparency = showFlag and 0 or 1, Size = showFlag and UDim2.new(0, 200, 0, Flag.TextBounds.Y) or UDim2.new(0, 200, 0, 0) });
					Globals:Tween(Stroke, TI, { Transparency = showFlag and 0 or 1 });
					tw.Completed:Connect(function()
						Flag:SetAttribute('IsTweening', false);
						show(Flag, showFlag);
					end);
				end;
			end;
		else
			show(drawings.FlagHolder, false);
		end;

		local chamsenabled = flags[pfx .. "Chams"]
		local usedChams = {}
		for _, Part in ch:GetChildren() do
			if Part:IsA("Model") and Part.Name:find("Armor") then
				for _, MeshPart in Part:GetChildren() do
					if MeshPart:IsA("MeshPart") then
						MeshPart.Transparency = chamsenabled and 1 or 0
					end
				end
			end

			if Part:IsA("BasePart") and not EntityClass.IgnoreNames[Part.Name] then
				insert(usedChams, Part)
				if not ChamsTbl[Part] then
					local LPAdornments = {}
					for Vis = 1, 2 do
						local Adornment
						if Part.Name == "Head" then
							Adornment = Globals:Instance("CylinderHandleAdornment", {
								Adornee = Part,
								Parent = CoreGui,
								ZIndex = Vis == 1 and 2 or 1,
								Height = Vis == 1 and 0.87 or 1.02,
								Radius = Vis == 1 and 0.5 or 0.65,
								CFrame = CFrame.new(Vector3.new(), Vector3.new(0, 1, 0)),
								Visible = true,
								AlwaysOnTop = Vis == 1
							})
						else
							local SizeOffset = Vis == 1 and -0.05 or 0.05
							Adornment = Globals:Instance("BoxHandleAdornment", {
								Adornee = Part,
								Parent = CoreGui,
								ZIndex = Vis == 1 and 2 or 1,
								AlwaysOnTop = Vis == 1,
								Size = Part.Size + Vector3.new(SizeOffset, SizeOffset, SizeOffset),
								Visible = true
							})
						end
						LPAdornments[Vis] = Adornment
					end
					ChamsTbl[Part] = LPAdornments
				else
					local LPAdornments = ChamsTbl[Part]
					for i = 1, 2 do
						LPAdornments[i].Visible = chamsenabled
					end

					local OccludedColor = flags[pfx .. "ChamsColor1"].Color
					local OccludedTransparency = flags[pfx .. "ChamsColor1"].Transparency
					local VisibleColor = flags[pfx .. "ChamsColor2"].Color
					local VisibleTransparency = flags[pfx .. "ChamsColor2"].Transparency

					LPAdornments[1].Color3 = OccludedColor
					LPAdornments[1].Transparency = OccludedTransparency

					LPAdornments[2].ZIndex = 9e9
					LPAdornments[2].AlwaysOnTop = true
					LPAdornments[2].Color3 = VisibleColor
					LPAdornments[2].Transparency = VisibleTransparency
				end
			end
		end

		for Part, Adornments in ChamsTbl do
			if not table.find(usedChams, Part) then
				for _, Adornment in Adornments do
					Adornment:Destroy()
				end
				ChamsTbl[Part] = nil
			end
		end

	end);

	return update, drawings
end


EntityClass.Global.Create = LPH_NO_VIRTUALIZE(function(self, Object, Data)
	if typeof(Object) ~= "Instance" then
		rconsoleprint(
			"corescript",
			"invalid argument #2 <instance> expected. Did you index instead of namecall?",
			"Type recieved:",
			typeof(Object)
		)
		return
	end

	if typeof(Data) ~= "table" then
		rconsoleprint(
			"corescript",
			"invalid argument #3 <table> expected. Did you index instead of namecall?",
			"Type recieved:",
			typeof(Data)
		)
		return
	end

	local Entity = setmetatable({
		Name = Data.Name or Object.Name,
		Character = Data.Character,
		DisplayName = Object:IsA("Player") and Object.DisplayName or (Data.Name or Object.Name),
		LastOffscreenRefresh = tick(),
		LastChamsRefresh = tick(),
		LastUpdate = tick(),
		CachedItem = nil,
		CachedAttachments = {},
		ItemHistory = {},
		Class = Data.Class,
		ClassType = Data.ClassType,
		Pointer = Object,
		Adornments = {},
		HealthPercent = 0,
		LastManipHitScan = tick()
	}, EntityClass.Main.Functions)
	Entity.Update, Entity.Drawings = EntityClass.Global.CreateESP(Object, Entity)


	EntityClass.Main.Cache[Object] = Entity
	return Entity
end);

--#endregion EntityClass Global

--#region EntityClass Main
EntityClass.FlagProperties = {
	Size = UDim2.new(0, 200, 0, 7),
	FontFace = Library.espfont,
	TextSize = flags.espfontsize - 3,
	BackgroundTransparency = 1,
	TextTransparency = 1,
	TextStrokeTransparency = 1,
	Text = "",
	ClipsDescendants = false,
	TextXAlignment = Enum.TextXAlignment.Left;
	TextYAlignment = Enum.TextYAlignment.Top;
};

EntityClass.Main.Functions.__index = EntityClass.Main.Functions;

EntityClass.Main.Functions.OnCharacterAdded = LPH_NO_VIRTUALIZE(function(self, character)
	if (not character) then return; end;
	self.Character = character;
	self.Humanoid  = character:FindFirstChildOfClass("Humanoid");
	self.Root      = (self.Humanoid and self.Humanoid.RootPart)
				   or character:FindFirstChild("HumanoidRootPart")
				   or character:FindFirstChild("RootPart");

	self.CoreInformation = {};
	self.LastUpdate = 0;
	--self.LastManipulated = 0; -- implement later
	self.CachedItem = nil;

	if (self._charAncestry) then self._charAncestry:Disconnect(); self._charAncestry = nil; end;
	self._charAncestry = character.AncestryChanged:Connect(function(_, parent)
		if (not parent) then
			self.Character = nil;
			self.Humanoid  = nil;
			self.Root      = nil;
			self.CoreInformation = {};
		end
	end)

	character.ChildRemoved:Connect(function(child)
		if (self.CachedItem == child) then self.CachedItem = nil; end;
	end)
end)
local clanController = getsenv(Client.PlayerScripts:WaitForChild("ClanController"))
local clanControllerShared = clanController and clanController.shared

Globals.isTeam = LPH_NO_VIRTUALIZE(function(player)
	if typeof(player) ~= 'Instance' or not player:IsA('Player') then
		return false
	end
	local teamCache = clanControllerShared and clanControllerShared.cachedTeamModels

	return teamCache and teamCache[player.UserId]
end)

EntityClass.Main.Functions.AddFlag = LPH_NO_VIRTUALIZE(function(self, Data)
	EntityClass.Flags[Data.Name] = Data;
	return EntityClass.Flags[Data.Name]
end)

--#endregion EntityClass Main

local Window = Library:Window()
local Watermark = Library:Watermark("")
local KeybindList = Library:KeybindList()

task.spawn(LPH_NO_VIRTUALIZE(function()
	while Watermark do
		Watermark:SetText(os.date('vanity.gg | ' .. (isPrivate and "Private" or "Public") .. ' | %b %d %Y | %H:%M:%S | ') .. tostring(Globals.PlayerCount or 0) .. ' Players')
		task.wait(1)
	end
end))

LPH_JIT_MAX(function() --// UI Setup
	local Pages = {
		Combat = Window:Page({
			Name = "Combat",
		}),

		ESP = Window:Page({
			Name = "ESP",
		}),

		Visuals = Window:Page({
			Name = "Visuals",
		}),

		Misc = Window:Page({
			Name = "Misc",
		}),

		Skins = Window:Page({
			Name = "Skins",
		}),

		-- Players = Window:Page({
		-- 	Name = "Players",
		-- 	Columns = 1
		-- }),

		Settings = Library:CreateSettingsPage(Window, Watermark, KeybindList)
	}

	-- local section = Pages.Players:Section({Name = "Players"})
	-- section:CreatePlayerList({})
	-- section:Dropdown({Name = "Priority", Items = {"Neutral", "Teammate"}, Default = "Neutral", Flag = "PLAYERLIST_DROPDOWN", Callback = function(text)
	-- 	Library.prioritize(text)
	-- end})

	local CombatSections = {
		Main = Pages.Combat:Section({
			Name = 'Main',
			Side = 1
		}),
		Targeting = Pages.Combat:Section({
			Name = 'Targeting',
			Side = 2
		}),
		Visualizers = Pages.Combat:Section({
			Name = 'Visualizers',
			Side = 1
		}),
		Secondary = Pages.Combat:Section({
			Name = 'Misc',
			Side = 2
		}),
	};

	do  --// COMBAT CAT
		--// Aimbot

		CombatSections.Main:Toggle({
			Name = "Enabled",
			Flag = "Aimbot",
			Tooltip = "Redirects bullets to targets",
		}):Keybind({
			Name = "Aimbot key",
			Flag = "Aimbot Activation",
			Mode = "Hold",
		});

		CombatSections.Main:Toggle({
			Name = "Ignore Keybind",
			Flag = "AlwaysTarget",
			Tooltip = "Ignores aimbot key requirement"
		});

		CombatSections.Main:Dropdown({
			Name = "Mode",
			Flag = "AimbotMode",
			Options = {
				"Silent",
				"Memory"
			}
		})

		-- if not isPrivate then
		-- 	CombatSections.Main:Toggle({
		-- 		Name = "Backtrack",
		-- 		Flag = "Backtrack",
		-- 	}):Keybind({
		-- 		Name = "Backtrack Key",
		-- 		Flag = "Backtrack Activation",
		-- 		Mode = "Hold",
		-- 	});
		-- end

		CombatSections.Visualizers:Toggle({
			Name = "Visible Text",
			Flag = "VisibleText",
			Tooltip = "Displays text when target is visible",
		}):Colorpicker({
			Name = "Visible Text Color",
			Flag = "VisibleTextColor",
			Default = Themes.Preset.Accent
		})

		CombatSections.Targeting:Slider({
			Name = "Hit Chance (silent aim only)",
			Flag = "HitChance",
			Min = 0,
			Max = 100,
			Default = 100,
			Suffix = "%",
			Tooltip = "Chance to hit target; 100 = redirect bullet",
		})

		local a = CombatSections.Targeting:Toggle({
			Name = "Show FOV",
			Flag = "VisualizeFOV",
			Callback = function(v)
				Visuals.FOVOutline.Visible = flags.VisualizeFOV
			end;
		})
		a:Colorpicker({
			Name = "Color",
			Flag = "FOVColor",
			Alpha = 0.9,
			Default = Themes.Preset.Accent,
		})
		a:Colorpicker({
			Name = "Target color",
			Flag = "TargetColor",
			Default = hex('#c33b3b'),
		});


		CombatSections.Targeting:Toggle({
			Name = "Dynamic Radius",
			Flag = "DynamicFOV",
			Tooltip = "Scales radius based on Camera FOV",
		});

		CombatSections.Targeting:Toggle({
			Name = 'Copy Target Color',
			Flag = 'CopyTargetColorFOV',
			Tooltip = 'Copies target color to FOV color',
		})

		CombatSections.Targeting:Slider({
			Name = "Radius",
			Flag = "FOVRadius",
			Suffix = "px",
			Min = 30,
			Max = 1500,
			Default = 300,
		});

		CombatSections.Targeting:Slider({
			Name = "Outline Thickness",
			Flag = "FOVOutlineThickness",
			Suffix = "px",
			Min = 1,
			Default = 4,
			Max = 10,
			Callback = function(v)
				Visuals.FOVOutlineStroke.Thickness = v
			end,
		})

		CombatSections.Targeting:Slider({
			Name = "Circle Thickness",
			Flag = "FOVCircleThickness",
			Suffix = "px",
			Min = 1,
			Default = 2,
			Max = 10,
			Callback = function(v)
				Visuals.FOVCircleStroke.Thickness = v
			end,
		})

		CombatSections.Targeting:Toggle({
			Name = "TargetHUD",
			Flag = "Enable TargetHUD",
			Tooltip = "Displays a HUD for the current target"
		});
		CombatSections.Targeting:Toggle({
			Name = "Armor Viewer",
			Flag = "ArmorViewer",
			Tooltip = "Displays target's armor"
		});
		CombatSections.Targeting:Toggle({
			Name = "Weapons Viewer",
			Flag = "WeaponViewer",
			Tooltip = "Displays target's weapons"
		});

		CombatSections.Main:Toggle({
			Name = "Random hitpart",
			Flag = "RandomizeHitPart"
		});

		CombatSections.Main:Toggle({
			Name = "Auto Shoot",
			Flag = "AutoShoot",
		}):Keybind({
			Name = "Auto Shoot",
			Flag = "Auto Shoot Activation",
			Mode = "always",
		});

		-- CombatSections.Targeting:Toggle({
		-- 	Name = "Auto Shoot Visible",
		-- 	Flag = "AutoShootVisible",
		-- 	Tooltip = "Automatically shoots visible targets",
		-- });

		Globals.AutoShootIfOptions = {} -- optimization tricks.. ✌
		CombatSections.Main:Dropdown({
			Name = "Auto Shoot If",
			Flag = "AutoShootIf",
			Multi = true,
			Options = {
				"Visible",
				"Manipulated",
				"Wallbangable",
				"Hitscanned",
			},
			Callback = function(tbl)
				table.clear(Globals.AutoShootIfOptions)
				for i, v in tbl do
					Globals.AutoShootIfOptions[v] = true
				end
			end
		})

		-- -- if isPrivate then
		-- 	CombatSections.Targeting:Toggle({
		-- 		Name = "Auto Shoot Hitscanned",
		-- 		Flag = "AutoShootHitScanned",
		-- 		Tooltip = "Automatically shoots hitscanned targets ( requires hitscan )",
		-- 	});
		-- -- end

		-- CombatSections.Targeting:Toggle({
		-- 	Name = "Auto Shoot Manipulation",
		-- 	Flag = "AutoShootManipulation",
		-- 	Tooltip = "Automatically shoots manipulated targets ( requires manipulation )",
		-- });

		-- CombatSections.Targeting:Toggle({
		-- 	Name = "Auto Shoot Wallbang",
		-- 	Flag = "AutoShootWallbang",
		-- 	Tooltip = "Automatically shoots wallbangable targets ( requires wallbang )",
		-- });

		CombatSections.Main:Toggle({
			Name = "Visibility check",
			Flag = "VisibleCheck",
			Tooltip = "Prioritizes hitboxes based on visibility"
		});

		CombatSections.Main:Toggle({
			Name = "Down Check",
			Flag = "DownCheck",
			Tooltip = "Prevents targeting downed Players",
		});

		CombatSections.Main:Toggle({
			Name = "Manipulation",
			Flag = "Manipulation",
			Tooltip = "Shoot around obstructions"
		}):Colorpicker({
			Name = "Manipulated color",
			Flag = "ManipColor",
			Default = hex('#FF6347')
		})

		CombatSections.Visualizers:Toggle({
			Name = "Manipulation Visualizer",
			Flag = "ManipulationVisualizer",
			Tooltip = "Displays manipulated beam",
		}):Colorpicker({
			Name = "Manipulated Beam Color",
			Flag = "ManipulationVisualizerColor",
			Default = hex('#FF6347')
		})

		CombatSections.Visualizers:Toggle({
			Name = "Manipulation Text",
			Flag = "ManipulationText",
			Tooltip = "Displays manipulated text",
		}):Colorpicker({
			Name = "Manipulated Text Color",
			Flag = "ManipulationTextColor",
			Default = hex('#FF6347')
		})

		CombatSections.Main:Toggle({
			Name = "Wallbang",
			Flag = "Wallbang",
			Tooltip = "Shoot through obstructions"
		}):Colorpicker({
			Name = "Wallbangable color",
			Flag = "WallbangColor",
			Default = hex('#FFD700')
		})

		CombatSections.Visualizers:Toggle({
			Name = "Wallbang Text",
			Flag = "WallbangText",
			Tooltip = "Displays wallbang text",
		}):Colorpicker({
			Name = "Wallbangable Text Color",
			Flag = "WallbangTextColor",
			Default = hex('#FFD700')
		})
		-- if isPrivate then
			-- CombatSections.Main:Toggle({
			-- 	Name = "Thick Bullet",
			-- 	Flag = "ThickBullet",
			-- 	Tooltip = "2dsboy07 is so sexy..."
			-- })
		-- if isPrivate then
			-- CombatSections.Main:Toggle({
			-- 	Name = "Thick Bullet",
			-- 	Flag = "ThickBullet",
			-- 	Tooltip = "2dsboy07 is so sexy..."
			-- })

			-- CombatSections.Main:Slider({
			-- 	Name = "Bullet Size",
			-- 	Flag = "BulletSize",
			-- 	Min = 1, Max = 25, Default = 10
			-- })
			-- CombatSections.Main:Slider({
			-- 	Name = "Bullet Size",
			-- 	Flag = "BulletSize",
			-- 	Min = 1, Max = 25, Default = 10
			-- })

			CombatSections.Main:Toggle({
				Name = "Hit Scan",
				Flag = "HitScan",
				Tooltip = "Shoot through obstructions"
			}):Colorpicker({
				Name = "Hitscanable color",
				Flag = "HitScanColor",
				Default = hex('#e942f5')
			})

			CombatSections.Visualizers:Toggle({
				Name = "Hit Scan Text",
				Flag = "HitScanText",
				Tooltip = "Displays wallbang text",
			}):Colorpicker({
				Name = "Hit Scan Text Color",
				Flag = "HitScanTextColor",
				Default = hex('#e942f5')
			})

			-- CombatSections.Main:Toggle({
			-- 	Name = "Force Hit",
			-- 	Flag = "ForceHit"
			-- })
		-- end

		CombatSections.Main:Toggle({
			Name = "Killaura",
			Flag = "KillauraToggle"
		}):Keybind({
			Name = "Killaura Key",
			Flag = "Killaura Activation",
			Mode = "Toggle"
		})
		CombatSections.Main:Label('Killaura Color'):Colorpicker({
			Name = "Killaura Color",
			Flag = "KillAuraColor",
			Default = Color3.new(1, 0, 0)
		})

		CombatSections.Main:Slider({
			Name = "Killaura Radius",
			Flag = "KillauraRadius",
			Min = 0, Max = 15, Default = 10
		})

		CombatSections.Main:Toggle({
			Name = "Auto Farm",
			Flag = "AutoFarmToggle"
		}):Keybind({
			Name = "Auto Farm Key",
			Flag = "AutoFarm Activation",
			Mode = "Toggle"
		})

		CombatSections.Main:Label('Auto Farm Color'):Colorpicker({
			Name = "Auto Farm Color",
			Flag = "AutoFarmColor",
			Default = Color3.new(0, 1, 1)
		})

		CombatSections.Main:Slider({
			Name = "Auto Farm Radius",
			Flag = "AutoFarmRadius",
			Min = 0, Max = 15, Default = 10
		})
		CombatSections.Main:Slider({
			Name = "Spin Speed",
			Flag = "SpinSpeed",
			Min = -180, Max = 180, Default = 90
		})
		if isPrivate then
			CombatSections.Main:Toggle({
				Name = "Auto Walk to Farm",
				Flag = "AutoFarm"
			})

			CombatSections.Main:Dropdown({
				Name = "Auto Farm Targets",
				Flag = "AutoFarmTargets",
				Options = {
					"Stone",
					"Metal",
					"Phosphate"
				},
			})

			CombatSections.Main:Slider({
				Name = "Auto Farm Speed",
				Flag = "AutoFarmSpeed",
				Min = 0, Max = 40, Default = 28, Increment = 0.1
			})
		end

		CombatSections.Targeting:Toggle({
			Name = "Include Team",
			Flag = "IncludeTeam",
		});

		CombatSections.Targeting:Toggle({
			Name = "Target Players",
			Flag = "TargetPlayer",
			Default = true
		});

		CombatSections.Targeting:Toggle({
			Name = "Target AI",
			Flag = "TargetAI",
			Default = true
		});

		CombatSections.Targeting:Toggle({
			Name = "Target Bosses",
			Flag = "TargetBoss",
			Default = true
		});

		CombatSections.Targeting:Dropdown({
			Name = "Hit part",
			Flag = "AimbotPart",
			Options = {
				"Head",
				"LowerTorso",
				"UpperTorso",
			},
		});
		--

		--// Gun Mods
		local ToolInfo = Modules:FindFirstChild("ToolInfo") and require(Modules.ToolInfo) or {};
		local ToolInfoCopy = Globals.DeepCopy(ToolInfo)

		Globals.ToolInfo = ToolInfo
		Globals.ToolInfoCopy = ToolInfoCopy


		--
		CombatSections.Secondary:Toggle({name = "Crosshair",  flag = "Crosshair Enabled"}):Colorpicker({name = "Crosshair Color", flag  = "Crosshair Color", Default = Library.Theme.Accent})
		CombatSections.Secondary:Toggle({name = "Copy Target Color", flag = "CopyTargetColorCrosshair"})
		CombatSections.Secondary:Toggle({name = "Move To Target", flag = "MoveCrosshairToTarget"})
		CombatSections.Secondary:Toggle({name = "Spin", flag   = "Crosshair Spin"})
		CombatSections.Secondary:Slider({name = "Bounce Speed", flag  = "BounceSpeed",  min = 1, max = 4,  Default = 1, Increment = 0.1 })
		CombatSections.Secondary:Slider({name = "Bounce Limit (left/right)", flag  = "BounceRadiusX",  min = 1, max = 200,  Default = 30 })
		CombatSections.Secondary:Slider({name = "Bounce Limit (up/down)", flag  = "BounceRadiusY",  min = 1, max = 200,  Default = 30 })
		CombatSections.Secondary:Dropdown({
			name = "Bounce Mode",
			flag = 'BounceMode',
			Options = {'ellipse', 'figure8', 'sway'}
		})
		CombatSections.Secondary:Slider({name = "Spin Speed", flag  = "Crosshair Speed",  min = 1, max = 360,  Default = 75 })
		CombatSections.Secondary:Slider({name = "Length", flag = "Crosshair Length", min = 1, max = 50,    Default = 14  })
		CombatSections.Secondary:Slider({name = "Width", flag  = "Crosshair Width",  min = 1, max = 50,    Default = 2   })
		CombatSections.Secondary:Slider({name = "Spread", flag = "Crosshair Spread", min = 0, max = 50,    Default = 14 })
	end

	do --// ESP Categories
		for _, target in { "Player", "AI", "Boss" } do
			local sec = Pages.ESP:Section({
				Name = target .. ' ESP',
				Side = 1,
			})
			sec:Toggle({
				Name = target .. " ESP",
				Flag = target .. "_Enabled_ESP",
			})

			local a = sec:Toggle({
				Name = "Chams",
				Flag = target .. "_Chams",
			})
			a:Colorpicker({
				Name = "Chams color 1",
				Flag = target .. "_ChamsColor1",
				Default = Themes.Preset.Accent,
				Alpha = 1
			})
			a:Colorpicker({
				Name = "Chams color 2",
				Flag = target .. "_ChamsColor2",
				Default = Themes.Preset.Accent,
				Alpha = 0.2
			});


			if target == "Player" then
				sec:Toggle({
					Name = "Team Check",
					Flag = target .. "_esp_teamcheck",
				}):Colorpicker({
					Name = "Team Color",
					Flag = "FriendlyTargetColor",
					Default = Themes.Preset.Accent,
				})
			end

			sec:Slider({
				Name = "Distance",
				Flag = target .. "_ESP_Distance",
				Min = 0,
				Max = 5000,
				Default = 2000,
				Suffix = "s",
			})

			sec:Dropdown({
				Name = "Measurement Type",
				Flag = target .. "_measurement_type",
				Options = { "Studs", "Meters" },
			})

			local a = sec:Toggle({
				Name = "Boxes",
				Flag = target .. "_boxes_esp",
			})
			a:Colorpicker({
				Name = "Box Color",
				Flag = target .. "_boxes_accent",
				Default = Color3.fromRGB(255, 255, 255),
			})
			a:Colorpicker({
				Name = "Visible Box Color",
				Flag = target .. "_boxes_visible_color",
				Default = Color3.fromRGB(255, 0, 0),
			})

			sec:Dropdown({
				Name = "Type",
				Flag = target .. "_boxes_type",
				Options = { "Corner", "Full" },
			})

			sec:Toggle({
				Name = "Health Bar",
				Flag = target .. "_Healthbar_ESP",
			})
			sec:Dropdown({
				Name = "Position",
				Flag = target .. "_healthbar_pos",
				Options = { "Left", "Bottom" },
			})
			sec:Slider({
				Name = "Width",
				Flag = target .. "_ESP_HealthbarWidth",
				Min = 0.5,
				Max = 5,
				Default = 1.5,
				Increment = 0.1,
			})
			local a = sec:Toggle({
				Name = "Lerp Health",
				Flag = target .. "_lerp_health",
			})
			a:Colorpicker({
				Name = "Low HP",
				Flag = target .. "_Healthbar_Gradient1ESP",
				Default = Color3.fromRGB(255, 0, 0),
			})
			a:Colorpicker({
				Name = "Mid HP",
				Flag = target .. "_Healthbar_Gradient2ESP",
				Default = Color3.fromRGB(255, 150, 0),
			})
			a:Colorpicker({
				Name = "High HP",
				Flag = target .. "_Healthbar_Gradient3ESP",
				Default = Color3.fromRGB(0, 255, 0),
			})

			sec:Toggle({
				Name = "Health Text",
				Flag = target .. "_Healthtext_ESP",
			})

			local a = sec:Toggle({
				Name = "Names",
				Flag = target .. "_ESP_Names",
			})
			a:Colorpicker({
				Name = "Name Color",
				Flag = target .. "_Names_AccentESP",
				Default = Color3.fromRGB(255, 255, 255),
			})
			a:Colorpicker({
				Name = "Visible Color",
				Flag = target .. "_Names_VisibleAccentColor",
				Default = Color3.fromRGB(255, 0, 0),
			})

			local a = sec:Toggle({
				Name = "Distance",
				Flag = target .. "_Distance_ESP",
			})
			a:Colorpicker({
				Name = "Distance Color",
				Flag = target .. "_Distance_AccentESP",
				Default = Color3.fromRGB(255, 255, 255),
			})
			a:Colorpicker({
				Name = "Visible Color",
				Flag = target .. "_Distance_VisibleAccentColor",
				Default = Color3.fromRGB(255, 0, 0),
			})

			local a = sec:Toggle({
				Name = "Weapons",
				Flag = target .. "_Weapon_ESP",
			})
			a:Colorpicker({
				Name = "Weapon Color",
				Flag = target .. "_Weapon_AccentESP",
				Default = Color3.fromRGB(255, 255, 255),
			})
			a:Colorpicker({
				Name = "Visible Color",
				Flag = target .. "_Weapon_VisibleAccentColor",
				Default = Color3.fromRGB(255, 0, 0),
			})

			if target == "Player" then
				local a =sec:Toggle({
					Name = "Flags",
					Flag = target .. "_Flags_ESP",
				})
				a:Colorpicker({
					Name = "Aiming flag color",
					Flag = "AimingFlagColor",
					Default = Color3.fromRGB(3, 169, 252)
				})
				a:Colorpicker({
					Name = "Reloading flag color",
					Flag = "ReloadingFlagColor",
					Default = Color3.fromRGB(255, 255, 255)
				})
				a:Colorpicker({
					Name = "Healing flag color",
					Flag = "HealingFlagColor",
					Default = Color3.fromRGB(120, 255, 100)
				})
				a:Colorpicker({
					Name = "VIP flag color",
					Flag = "VIPFlagColor",
					Default = Color3.fromRGB(252, 211, 3)
				})
				a:Colorpicker({
					Name = "Safezone flag color",
					Flag = "SafezoneFlagColor",
					Default = Color3.fromRGB(0, 211, 0)
				})
				a:Colorpicker({
					Name = "Clan flag color",
					Flag = "ClanFlagColor",
					Default = Color3.fromRGB(255, 255, 255)
				})
				a:Colorpicker({
					Name = "Staff flag color",
					Flag = "StaffFlagColor",
					Default = Color3.fromRGB(255, 255, 255)
				});
			end

			sec:Toggle({
				Name = "Arrows",
				Flag = target .. "_ESP_Arrows",
			}):Colorpicker({
				Name = "Arrow Color",
				Flag = target .. "_Arrows_AccentESP",
				Default = Color3.fromRGB(255, 255, 255),
			})
			sec:Slider({
				Name = "Arrow Size",
				Flag = target .. "_ESP_Arrow_Size",
				Min = 5,
				Max = 50,
				Default = 15,
			})
			sec:Toggle({
				Name = "Rainbow Arrows",
				Flag = target .. "_ESP_RainbowArrows",
			})
			sec:Dropdown({
				Name = "Arrow Points",
				Flag = target .. "_arrow_points",
				Options = { "Three", "Default" },
			})

			sec:Slider({
				Name = "Arrows Radius",
				Flag = target .. "_Arrows_Radius",
				Min = 0,
				Max = 500,
				Default = 100,
			})


			local a = sec:Toggle({
				Name = "Dicks",
				Flag = target .. "_Dick_ESP",
			})
			a:Colorpicker({
				Name = "Dick Color",
				Flag = target .. "_Dick_AccentESP",
				Default = Color3.fromRGB(255, 255, 255),
			})
			a:Colorpicker({
				Name = "Visible Color",
				Flag = target .. "_Dick_VisibleAccentColor",
				Default = Color3.fromRGB(255, 0, 0),
			})

			sec:Slider({
				Name = "Dick Length",
				Flag = target .. "_Dick_Length",
				Min = 1,
				Max = 4,
				Default = 2,
				Increment = 0.1
			})
			sec:Slider({
				Name = "Dick Thickness",
				Flag = target .. "_Dick_Thickness",
				Min = 1,
				Max = 5,
				Default = 1,
				Increment = 0.1
			})
		end


		do --// World
			--// Nodes
			local chamTypes = {
				{
					Name = "Nodes",
					Flag = "NodesChams"
				},
				{
					Name = "Stone",
					Flag = "ChamsStone",
					Color = { Name = "Stone Fill Color", Flag = "ChamsStoneColor", Default = Color3.fromRGB(27, 27, 27), Alpha = 0.2 },
					Distance = { Name = "Stone Chams Distance", Flag = "ChamsStoneDistance", Min = 50, Max = 5000, Suffix = "s" }
				},
				{
					Name = "Metal",
					Flag = "ChamsMetal",
					Color = { Name = "Metal Fill Color", Flag = "ChamsMetalColor", Default = Color3.fromRGB(25, 25, 25), Alpha = 0.2 },
					Distance = { Name = "Metal Chams Distance", Flag = "ChamsMetalDistance", Min = 50, Max = 5000, Suffix = "s" }
				},
				{
					Name = "Phosphate",
					Flag = "ChamsPhosphate",
					Color = { Name = "Phosphate Chams Fill Color", Flag = "ChamsPhosphateColor", Default = Color3.fromRGB(255, 255, 0), Alpha = 0.2 },
					Distance = { Name = "Phosphate Chams Distance", Flag = "ChamsPhosphateDistance", Min = 50, Max = 5000, Suffix = "s" }
				},
				{
					Name = "Plants",
					Flag = "PlantsChams"
				},
				{
					Name = "Wool",
					Flag = "ChamsWool",
					Color = { Name = "Wool Chams Fill Color", Flag = "ChamsWoolColor", Default = Color3.fromRGB(255, 255, 255), Alpha = 0.2 },
					Distance = { Name = "Wool Chams Distance", Flag = "ChamsWoolDistance", Min = 50, Max = 5000, Suffix = "s" }
				},
				{
					Name = "Tomato",
					Flag = "ChamsTomato",
					Color = { Name = "Tomato Chams Fill Color", Flag = "ChamsTomatoColor", Default = Color3.fromRGB(255, 0, 0), Alpha = 0.2 },
					Distance = { Name = "Tomato Chams Distance", Flag = "ChamsTomatoDistance", Min = 50, Max = 5000, Suffix = "s" }
				},
				{
					Name = "Pumpkin",
					Flag = "ChamsPumpkin",
					Color = { Name = "Pumpkin Chams Fill Color", Flag = "ChamsPumpkinColor", Default = Color3.fromRGB(255, 165, 0), Alpha = 0.2 },
					Distance = { Name = "Pumpkin Chams Distance", Flag = "ChamsPumpkinDistance", Min = 50, Max = 5000, Suffix = "s" }
				},
				{
					Name = "Bases",
					Flag = "BaseChams"
				},
				{
					Name = "Body Bags",
					Flag = "ChamsBodyBags",
					Color = { Name = "Body Bags Chams Fill Color", Flag = "ChamsBodyBagsColor", Default = Color3.fromRGB(255, 255, 255), Alpha = 0.2 },
					Distance = { Name = "Body Bags Chams Distance", Flag = "ChamsBodyBagsDistance", Min = 50, Max = 5000, Suffix = "s" }
				},
			}
			local activeSection
			for _, cham in chamTypes do
				if not cham.Color and not cham.Distance then
					activeSection = Pages.ESP:Section({
						Name = cham.Name .. " Chams",
						Side = 2,
					})
				end

				local t = activeSection:Toggle({ Name = cham.Name .. " Chams", Flag = cham.Flag })
				if cham.Color then
					t:Colorpicker(cham.Color)
				end
				if cham.Distance then
					activeSection:Slider(cham.Distance)
				end
			end

			local resp = Pages.ESP:Section({
				Name = "Raids",
				Side = 2,
			})

			--// Raids
			resp:Toggle({
				Name = "Raid ESP",
				Flag = "ESPRaids"
			})

			resp:Slider({
				Name = "Despawn timer",
				Flag = "clusterTTL",
				Min = 50, Max = 5000, Suffix = "seconds", Default = 120
			})

			resp:Slider({
				Name = "Cluster Radius",
				Flag = "clusterRadius",
				Min = 50, Max = 500, Suffix = "studs", Default = 100
			})

			resp:Toggle({
				Name = "Notifications",
				Flag = "RaidNotifications",
				Tooltip = "Notifies you when a raid starts"
			});
			--

			-- --// Timed Crates
			-- ESPCategories.Misc:Toggle({
			-- 	Name = "Timed Crates",
			-- 	Flag = "ESPTimedCrates"
			-- }):Colorpicker({
			-- 	Flag = "TimedCratesMiscColor",
			-- 	Default = Color3.fromRGB(0, 122, 8),
			-- 	Name = "Color"
			-- });

			-- ESPCategories.Misc:Slider({
			-- 	Name = "Distance",
			-- 	Flag = "TimedCratesDistance",
			-- 	Min = 50, Max = 1000, Suffix = "s"
			-- })
			-- --

			-- --// Care Packages
			-- ESPCategories.Misc:Toggle({
			-- 	Name = "Care Packages",
			-- 	Flag = "ESPCarePackages",
			-- }):Colorpicker({
			-- 	Name = "Color",
			-- 	Flag = "CarePackagesMiscColor",
			-- 	Default = Color3.fromRGB(0, 244, 8)
			-- });

			-- ESPCategories.Misc:Slider({
			-- 	Name = "Distance",
			-- 	Flag = "CarePackagesDistance",
			-- 	Min = 50, Max = 10000, Suffix = "s"
			-- })
			-- --

			-- --// Sleepers
			-- ESPCategories.Misc:Toggle({
			-- 	Name = "Sleepers",
			-- 	Flag = "ESPSleepers"
			-- }):Colorpicker({
			-- 	Name = "Color",
			-- 	Flag = "SleepersMiscColor",
			-- })

			-- ESPCategories.Misc:Slider({
			-- 	Name = "Distance",
			-- 	Flag = "SleepersDistance",
			-- 	Min = 50, Max = 1000, Suffix = "s"
			-- })
			-- --
		end;
	end

	local VisualsCategories = {
		Main = Pages.Visuals:Section({
			Name = 'Main',
			Side = 1
		}),
		Misc = Pages.Visuals:Section({
			Name = 'Misc',
			Side = 2
		})
	};
	do  --// Visuals Categories
		--// Third person
		VisualsCategories.Main:Toggle({
			Name = "Third Person",
			Flag = "ThirdPerson",
			Tooltip = "WARNING: Can cause invalids"
		}):Keybind({
			Name = "Third Person Key",
			Flag = "Third Person Activation",
			Mode = "Toggle",
			Callback = function()
				local Viewmodel = workspace.VFX.VMs:GetChildren()[1];
				local ThirdPerson = flags.ThirdPerson and flags["Third Person Activation"].Toggled
				if Viewmodel then
					if ThirdPerson then
						for _, Part in Viewmodel:GetDescendants() do
							if Part:IsA("BasePart") then
								local PartTransparency = Part.Transparency

								if PartTransparency ~= 1 then
									Part:SetAttribute("OriginalTransparency", PartTransparency)
								end;
								Part.Transparency = 1;
							end;
						end;
					else
						for Index, Part in Viewmodel:GetDescendants() do
							if Part:IsA("BasePart") then
								local OriginalTransparency = Part:GetAttribute("OriginalTransparency")

								if OriginalTransparency then
									Part.Transparency = OriginalTransparency
								end;
							end;
						end;
					end;
				end;
			end;
		})

		VisualsCategories.Main:Slider({
			Name = "Distance",
			Flag = "ThirdPersonDistance",
			Min = 0, Max = 20,
			Increment = 0.1,
		})
		--

		local a = VisualsCategories.Main:Toggle({
			Name = "Client Chams",
			Flag = "ClientChams",
		})
		a:Colorpicker({
			Name = "Chams color 1",
			Flag = "ClientChamsColor1",
			Default = Themes.Preset.Accent,
			Alpha = 1
		})
		a:Colorpicker({
			Name = "Chams color 2",
			Flag = "ClientChamsColor2",
			Default = Themes.Preset.Accent,
			Alpha = 0.2
		});

		VisualsCategories.Main:Toggle({
			Name = "Client Dick",
			Flag = "ClientDick",
			Callback = function()
				if not Client or not Globals.MyDih or not Globals.MyDih.Parent then return end;
				for _, part in next, Globals.MyDih:GetChildren() do
					if part:IsA('BasePart') and part.Name ~= 'Middle' then
						part.Transparency = flags.ClientDick and 0 or 1
					end
				end
			end
		})

		VisualsCategories.Main:Toggle({
			Name = "Armor Chams",
			Flag = "SandboxClient",
		}):Colorpicker({
			Name = "Color",
			Flag = "ClientArmorColor",
			Default = Themes.Preset.Accent,
		})

		VisualsCategories.Main:Dropdown({
			Name = "Material",
			Flag = "ClientArmorMaterial",
			Options = {
				"ForceField",
				"Neon",
				"SmoothPlastic",
				"Plastic",
				"Glass",
			},
		})



		VisualsCategories.Main:Toggle({
			Name = "Morph LP",
			Flag = "MorphLP",
			Callback = function()
				if flags.MorphLP then
					local UserID = flags.MorphLPInput;
					if UserID and UserID ~= "" then
						Globals.MorphTo(UserID)
					end
				else
					Globals.Unmorph()
				end
			end
		})

		VisualsCategories.Main:Textbox({
			Name = 'Username/UserID',
			Flag = 'MorphLPInput',
			Default = 'Prye4',
			Callback = function()
				if flags.MorphLP then
					local UserID = flags.MorphLPInput;
					if UserID and UserID ~= "" then
						Globals.MorphTo(UserID)
					end
				else
					Globals.Unmorph()
				end
			end
		})

		--// Cam Effects
		VisualsCategories.Main:Toggle({
			Name = "Remove bobbing",
			Flag = 'RemoveBobbing',
			Callback = function()
				if not Client or not Globals.ClientCharacter or not Globals.ClientCharacter:FindFirstChild("ViewmodelController") then return end;
				Globals.ClientCharacter.ViewmodelController:SetAttribute('DebugDisableScriptAnims', flags.RemoveBobbing);
			end
		});

		VisualsCategories.Main:Toggle({
			Name = "FOV Changer",
			Flag = "ChangeFOV",
			Callback = function()
				if flags.ChangeFOV then
					Camera.FieldOfView = flags.CustomFOV
				end;
			end;
		});

		local MaximumFOV = 120
		VisualsCategories.Main:Slider({
			Name = "Field of view",
			Suffix = "°",
			Flag = "CustomFOV",
			Min = 70, Max = MaximumFOV,
			Callback = function()
				if flags.ChangeFOV then
					Camera.FieldOfView = flags.CustomFOV
				end;
			end;
		});

		VisualsCategories.Main:Toggle({
			Name = "Zoom",
			Flag = "Zoom"
		}):Keybind({
			Name = "Zoom key",
			Flag = "Zoom Activation",
			Mode = "Hold",
			Callback = function()
				if flags["Zoom"] and flags["Zoom Activation"].Toggled then
					Camera.FieldOfView = flags.ZoomFOV
				end;
			end;
		})

		VisualsCategories.Main:Slider({
			Name = "Zoom level",
			Suffix = "°",
			Flag = "ZoomFOV",
			Min = 10, Max = 40
		})
		--

		--// Debug Camera
		VisualsCategories.Main:Toggle({
			Name = "Freecam",
			Flag = "DebugCamera"
		}):Keybind({
			Name = "Debug Camera Key",
			Flag = "Debug Camera Activation"
		})

		VisualsCategories.Main:Slider({
			Name = "Speed",
			Flag = "DebugCameraSpeed",
			Min = 1, Max = 300, Increment = 0.1
		})
		--
		--

		--// Bloom Section
		local Bloom = Lighting:FindFirstChildOfClass("BloomEffect") or Globals:Instance("BloomEffect", {
			Parent = Lighting,
			Enabled = false
		});

		VisualsCategories.Main:Toggle({
			Name = "Bloom",
			Flag = "Bloom",
			Callback = function()
				Bloom.Enabled = flags.Bloom
			end
		});

		VisualsCategories.Main:Slider({
			Name = "Intensity",
			Flag = "BloomIntensity",
			Min = 1, Max = 1000,
			Increment = 0.1,
			Callback = function()
				Bloom.Intensity = flags.BloomIntensity
			end;
		})

		VisualsCategories.Main:Slider({
			Name = "Threshold",
			Flag = "BloomThreshold",
			Min = 0, Max = 1,
			Increment = 0.1,
			Callback = function()
				Bloom.Intensity = flags.BloomThreshold
			end;
		})

		VisualsCategories.Main:Slider({
			Name = "Size",
			Flag = "BloomSize",
			Min = 0, Max = 1000,
			Increment = 0.1,
			Callback = function()
				Bloom.Size = flags.BloomSize
			end;
		});
		--

		--// Tracers Section

		VisualsCategories.Main:Toggle({
			Name = "Hit Effects",
			Flag = "HitEffects"
		}):Colorpicker({
			Name = "Client hit effect color",
			Flag = "HitEffectColor", Default = Themes.Preset.Accent
		});

		VisualsCategories.Main:Dropdown({
			name = 'Type',
			flag = 'Hit Effect Type',
			Options = {
				'Sparkles',
				'Black Hole'
			}
		})

		VisualsCategories.Main:Toggle({
			Name = 'Only on hit',
			flag = 'onlyOnHitHitEffect'
		})

		local a = VisualsCategories.Main:Toggle({
			Name = "Bullet Tracers",
			Flag = "BulletTracers"
		})
		a:Colorpicker({
			Name = "Client tracer color1",
			Flag = "TracerColor1", Default = Themes.Preset.Accent
		})
		a:Colorpicker({
			Name = "Client tracer color2",
			Flag = "TracerColor2", Default = Themes.Preset.Accent
		});

		-- VisualsCategories.Main:Slider({
		-- 	Name = "Brightness",
		-- 	Min = 1, Max = 10,
		-- 	Flag = "TracerBrightness"
		-- });

		VisualsCategories.Main:Slider({
			Name = "Lifetime",
			Flag = "TracerLifetime",
			Min = 1, Max = 5, Increment = 0.1
		});

		-- VisualsCategories.Main:Slider({
		-- 	Name = "Speed",
		-- 	Flag = "ReferenceTime",
		-- 	Min = 50, Max = 300, Default = 250
		-- });

		--                        BulletVisualsCategories.Main:AddDropdown("Texture", "BeamTexture", {"Default", "Lightning", "Dark"});
		-- VisualsCategories.Main:Dropdown({Name = "Texture", Flag = "BeamTexture", Options = {"Default", "DNA", "Water", "Lightning"}})
		--, TracerBrightness, BeamTexture, TracerLifetime, ReferenceTime,
		--

		--// Hitmarkers Section
		--HitmarkerColor, HitmarkerSize, HitmarkerTime
		VisualsCategories.Main:Toggle({
			Name = "Hitmarkers",
			Flag = "Hitmarkers",
		}):Colorpicker({
			Name = "Color",
			Flag = "HitmarkerColor"
		});

		VisualsCategories.Main:Slider({
			Name = "Lifetime",
			Flag = "HitmarkerTime",
			Min = 0.1, Max = 3, Increment = 0.1;
		})

		local a = VisualsCategories.Main:Toggle({
			Name = "Reload Bar",
			Flag = "ReloadBar",
		})
		a:Colorpicker({
			Name = "nigger",
			Flag = "ReloadBarColorStart",
			Default = Color3.new(1,0,0),
			Alpha = 1
		})
		a:Colorpicker({
			Name = "nigger",
			Flag = "ReloadBarColorEnd",
			Default = Color3.new(0,1,0),
			Alpha = 1
		});

		--

		--// Clouds Section
		local Clouds = workspace.Terrain:FindFirstChild("Clouds");

		if Clouds then
			local OldDensity = Clouds.Density;
			local OldCover = Clouds.Cover;
			local OldCloudColor = Clouds.Color

			local function CloudCallback()
				if not flags.CloudColor or not flags.CloudColor.Color then return end

				Clouds.Density = flags.ChangeCloudDensity and flags.CloudDensity or OldDensity
				Clouds.Cover = flags.ChangeCloudCover and flags.CloudCover or OldCover
				Clouds.Color = flags.ChangeCloudColor and flags.CloudColor.Color or OldCloudColor;
			end;

			VisualsCategories.Main:Toggle({
				Name = "Change cloud density",
				Flag = "ChangeCloudDensity",
				Callback = CloudCallback
			});

			VisualsCategories.Main:Slider({
				Name = "Density",
				Flag = "CloudDensity",
				Min = 0, Max = 1, Increment = 0.001,
				Callback = CloudCallback
			});

			VisualsCategories.Main:Toggle({
				Name = "Change cloud cover",
				Flag = "ChangeCloudCover",
				Callback = CloudCallback
			});

			VisualsCategories.Main:Slider({
				Name = "Density",
				Flag = "CloudCover",
				Min = 0, Max = 1, Increment = 0.001,
				Callback = CloudCallback
			});

			VisualsCategories.Main:Toggle({
				Name = "Change cloud color",
				Flag = "ChangeCloudColor",
				Callback = CloudCallback
			}):Colorpicker({
				Name = "Color",
				Flag = "CloudColor",
				Callback = CloudCallback;
			})
		end
		--

		--// Fog Section
		local Atmosphere = Lighting:FindFirstChild("Atmosphere");

		if Atmosphere then
			local OldFogDensity = Atmosphere.Density;
			local OldFogColor = Atmosphere.Color;
			local OldFogHaze = Atmosphere.Haze
			local OldFogGlare = Atmosphere.Glare

			local function FogCallback()
				Atmosphere.Density = flags.ChangeFogDensity and flags.FogDensity or OldFogDensity
				Atmosphere.Color = flags.ChangeFogColor and flags.FogColor.Color or OldFogColor
				Atmosphere.Glare = flags.ChangeFogGlare and flags.FogGlare or OldFogGlare
				Atmosphere.Haze = flags.ChangeFogHaze and flags.FogHaze or OldFogHaze
			end;

			VisualsCategories.Main:Toggle({
				Name = "Change fog density",
				Flag = "ChangeFogDensity",
				Callback = FogCallback
			});

			VisualsCategories.Main:Slider({
				Name = "Density",
				Flag = "FogDensity",
				Min = 0, Max = 1, Increment = 0.001,
				Callback = FogCallback
			});
			--
			VisualsCategories.Main:Toggle({
				Name = "Change fog haze",
				Flag = "ChangeFogHaze",
				Callback = FogCallback
			});

			VisualsCategories.Main:Slider({
				Name = "Haze",
				Min = 0, Max = 1, Increment = 0.001, Callback = FogCallback, Flag = "FogHaze"
			});
			--
			VisualsCategories.Main:Toggle({
				Name = "Change fog glare",
				Flag = "ChangeFogGlare",
				Callback = FogCallback
			});

			VisualsCategories.Main:Slider({
				Name = "Glare",
				Min = 0, Max = 1, Increment = 0.001, Callback = FogCallback, Flag = "FogGlare"
			});

			VisualsCategories.Main:Toggle({
				Name = "Change fog color",
				Flag = "ChangeFogColor",
				Callback = FogCallback
			}):Colorpicker({
				Name = "Color",
				Flag = "FogColor",
				Callback = FogCallback
			})
			--
			VisualsCategories.Main:Toggle({
				Name = "Change fog decay",
				Flag = "ChangeFogDecay",
				Callback = FogCallback
			}):Colorpicker({
				Name = "Decay",
				Flag = "FogDecay",
				Callback = FogCallback
			});
		end

		local skyboxes = {
			['Blue Sky'] = { '591058823','591059876','591058104','591057861','591057625','591059642' },
			['Vaporwave'] = { '1417494030','1417494146','1417494253','1417494402','1417494499','1417494643' },
			['Redshift'] = { '401664839','401664862','401664960','401664881','401664901','401664936' },
			['Blaze'] = { '150939022','150939038','150939047','150939056','150939063','150939082' },
			['Among Us'] = { '5752463190','5752463190','5752463190','5752463190','5752463190','5752463190' },
			['Dark Night'] = { '6285719338','6285721078','6285722964','6285724682','6285726335','6285730635' },
			['Bright Pink'] = { '271042516','271077243','271042556','271042310','271042467','271077958' },
			['Purple Sky'] = { '570557514','570557775','570557559','570557620','570557672','570557727' },
			['Galaxy'] = { '15125283003','15125281008','15125277539','15125279325','15125274388','15125275800' },
			['Pinky Sky'] = { '11427769401','11427770685','11427769401','11427769401','11427769401','11427771954' },
		};

		local names = {};
		for name in skyboxes do insert(names, name) end;
		table.sort(names);

		local function applySkybox(name)
			local ids = skyboxes[name];
			if (not ids) then return end;
			local sky = Lighting:FindFirstChildOfClass('Sky') or Instance.new('Sky', Lighting);
			sky.Name = 'skidibiwarehehe';
			sky.SkyboxBk = 'rbxassetid://'..ids[1];
			sky.SkyboxDn = 'rbxassetid://'..ids[2];
			sky.SkyboxFt = 'rbxassetid://'..ids[3];
			sky.SkyboxLf = 'rbxassetid://'..ids[4];
			sky.SkyboxRt = 'rbxassetid://'..ids[5];
			sky.SkyboxUp = 'rbxassetid://'..ids[6];
		end;

		VisualsCategories.Main:Toggle({
			Name = 'Skybox',
			Flag = 'UseSkybox',
			Callback = function(v)
				if (v) then
					applySkybox(flags.SkyboxPreset or 'Blue Sky');
				else
					local s = Lighting:FindFirstChild('skidibiwarehehe');
					if (s) then s:Destroy() end;
				end;
			end
		});

		VisualsCategories.Main:Dropdown({
			Name = 'Skybox Preset',
			Flag = 'SkyboxPreset',
			Options = names,
			Default = 'Blue Sky',
			Callback = function(opt)
				if (flags.UseSkybox) then applySkybox(opt) end;
			end
		});
			--

		--// Lighting Section
		local BrightnessCallback = LPH_NO_VIRTUALIZE(function()
			if flags.Fullbright then
				Lighting.Brightness = flags.Brightness;
			end;
		end);

		local AmbientCallback = LPH_NO_VIRTUALIZE(function()
			if flags.Ambient then
				Lighting.OutdoorAmbient = flags["AmbientColor"].Color
				Lighting.Ambient = flags["AmbientColor"].Color
			end;
		end);

		local TimeCallback = LPH_NO_VIRTUALIZE(function()
			if flags.ChangeTime then
				Lighting.ClockTime = flags.Time
			end;
		end);

		VisualsCategories.Main:Toggle({Name = "Fullbright", Flag = "Fullbright", Callback = BrightnessCallback});
		VisualsCategories.Main:Slider({Name = "Brightness", Flag = "Brightness", Min = 0, Max = 6, Increment = 0.1, Callback = BrightnessCallback})
		VisualsCategories.Main:Toggle({Name = "Ambience", Flag = "Ambient", Callback = AmbientCallback}):Colorpicker({Name = "Ambient color", Flag = "AmbientColor", Default = Themes.Preset.Accent, Callback = AmbientCallback});

		VisualsCategories.Main:Toggle({Name = "Change time", Flag = "ChangeTime", Callback = TimeCallback})
		VisualsCategories.Main:Slider({Name = "Time", Flag = "Time", Min = 0, Max = 14, Increment = 0.1, Callback = TimeCallback})
		--

		--// Base Section
		VisualsCategories.Main:Toggle({
			Name = "XRay",
			Flag = "XRay",
		}):Keybind({
			Name = "XRay Key",
			Flag = "XRay Activation",
			Callback = LPH_NO_VIRTUALIZE(function()
				local XRayParts = Globals.XRayParts

				if not XRayParts then
					return
				end

				local Transparency = flags.XRay and flags["XRay Activation"].Toggled and flags.XRayTransparency or 0

				for Index, Part in XRayParts do
					-- if flags.XRay and flags["XRay Activation"].Toggled  then
						-- Part.Transparency = flags.XRayTransparency;
					-- else
						-- Part.Transparency = 0;
					-- end;
					Part.Transparency = Transparency
				end;
			end)
		});

		VisualsCategories.Main:Slider({
			Name = "XRay transparency",
			Flag = "XRayTransparency",
			Min = 0, Max = 1, Increment = 0.1, Default = 0.5
		})
		--

		--// Terrain Section
		VisualsCategories.Main:Toggle({
			Name = "Remove grass",
			Flag = "RemoveGrass",
			Callback = function()
				sethiddenproperty(workspace.Terrain, "Decoration", not flags.RemoveGrass);
			end
		})
		--
		--

		--// Viewmodel
		VisualsCategories.Misc:Toggle({
			Name = "Viewmodel Sandbox",
			Flag = "ViewmodelSandbox"
		});

		--// Items
		VisualsCategories.Misc:Toggle({
			Name = "Item Chams",
			Flag = "ItemChams"
		});

		VisualsCategories.Misc:Toggle({
			Name = "Ignore attachments",
			Flag = "IgnoreAttachments"
		}):Colorpicker({
			Name = "Color",
			Flag = "VMItemColor",
			Default = Themes.Preset.Accent,
		});

		VisualsCategories.Misc:Dropdown({
			Name = "Material",
			Flag = "VMItemMaterial",
			Options = {"SmoothPlastic", "ForceField", "Neon", "Glass"}
		});


		--

		--// Arms
		VisualsCategories.Misc:Toggle({
			Name = "Arm Chams",
			Flag = "ArmChams"
		}):Colorpicker({
			Name = "Color",
			Flag = "ArmColor",
			Default = Themes.Preset.Accent
		})

		VisualsCategories.Misc:Dropdown({
			Name = "Material",
			Flag = "ArmMaterial",
			Options = {"SmoothPlastic", "ForceField", "Neon", "Glass"}
		});


		--

		--// Shirt
		VisualsCategories.Misc:Toggle({
			Name = "Shirt Chams",
			Flag = "ShirtChams"
		}):Colorpicker({
			Name = "Color",
			Flag = "ShirtColor",
			Default = Themes.Preset.Accent
		})

		VisualsCategories.Misc:Dropdown({
			Name = "Material",
			Flag = "ShirtMaterial",
			Options = {"SmoothPlastic", "ForceField", "Neon", "Glass"}
		});

		VisualsCategories.Misc:Toggle({
			Name = "Remove sleeves",
			Flag = "RemoveClothing"
		});


		--

		--// Gloves
		VisualsCategories.Misc:Toggle({
			Name = "Glove Chams",
			Flag = "GloveChams"
		}):Colorpicker({
			Name = "Color",
			Flag = "GloveColor",
			Default = Themes.Preset.Accent
		})

		VisualsCategories.Misc:Dropdown({
			Name = "Material",
			Flag = "GloveMaterial",
			Options = {"SmoothPlastic", "ForceField", "Neon", "Glass"}
		});


		--

		--// Highlight
		local a = VisualsCategories.Misc:Toggle({
			Name = "Highlight",
			Flag = "VMHighlight",
		})
		a:Colorpicker({
			Name = "Fill Color",
			Flag = "VMFillColor",
			Default = Themes.Preset.Accent,
		})
		a:Colorpicker({
			Name = "Outline Color",
			Flag = "VMOutlineColor",
			Default = Themes.Preset.Accent,
		})
		
		VisualsCategories.Misc:Toggle({Name = "Viewmodel Position", Tooltip = "MAY INVALID", Default = false, Flag = "Viewmodel Position", Callback = function(State)
			for Index, Value in pairs(CheatTable.Locals.ToolInfo) do
				if Value.Offsets and Value.Offsets.Local then
					if State then
						Value.Offsets.Local = CheatTable.Locals.ToolInfoCache[Index].Offsets.Local * CFrame.new(
							flags["Viewmodel Position X"],
							flags["Viewmodel Position Y"],
							flags["Viewmodel Position Z"]
						)
					else
						Value.Offsets.Local = CheatTable.Locals.ToolInfoCache[Index].Offsets.Local
					end
				end
			end
		end})

		VisualsCategories.Misc:Slider({Name = "X pos", Flag = "Viewmodel Position X", Minimum = -2, Maximum = 2, Default = 0, Increment = 0.1, Style = "Full", Callback = function(State)
			flags["Viewmodel Position X"] = State

			for Index, Value in pairs(CheatTable.Locals.ToolInfo) do
				if Value.Offsets and Value.Offsets.Local and flags["Viewmodel Position"] then
					Value.Offsets.Local = CheatTable.Locals.ToolInfoCache[Index].Offsets.Local * CFrame.new(
						State,
						flags["Viewmodel Position Y"],
						flags["Viewmodel Position Z"]
					)
				end
			end
		end})

		VisualsCategories.Misc:Slider({Name = "Y pos", Flag = "Viewmodel Position Y", Minimum = -2, Maximum = 2, Default = 0, Increment = 0.1, Style = "Full", Callback = function(State)
			flags["Viewmodel Position Y"] = State

			for Index, Value in pairs(CheatTable.Locals.ToolInfo) do
				if Value.Offsets and Value.Offsets.Local and flags["Viewmodel Position"] then
					Value.Offsets.Local = CheatTable.Locals.ToolInfoCache[Index].Offsets.Local * CFrame.new(
						flags["Viewmodel Position X"],
						State,
						flags["Viewmodel Position Z"]
					)
				end
			end
		end})

		VisualsCategories.Misc:Slider({Name = "Z pos", Flag = "Viewmodel Position Z", Minimum = -2, Maximum = 2, Default = 0, Increment = 0.1, Style = "Full", Callback = function(State)
			flags["Viewmodel Position Z"] = State

			for Index, Value in pairs(CheatTable.Locals.ToolInfo) do
				if Value.Offsets and Value.Offsets.Local and flags["Viewmodel Position"] then
					Value.Offsets.Local = CheatTable.Locals.ToolInfoCache[Index].Offsets.Local * CFrame.new(
						flags["Viewmodel Position X"],
						flags["Viewmodel Position Y"],
						State
					)
				end
			end
		end})
					--[[
						ViewmodelSandbox:AddColorpicker("Highlight fill color", "VMFillColor", Color3.fromRGB(0, 0, 0), 1);
							ViewmodelSandbox:AddColorpicker("Highlight outline color", "VMOutlineColor", Color3.fromRGB(0, 0, 0), 0)
					]]
		--
		--
	end

	local MiscCategories = {
		Interactions = Pages.Misc:Section({
			Name = 'Interactions',
			Side = 1,
		}),
		Movement = Pages.Misc:Section({
			Name = 'Movement',
			Side = 1,
		}),
		Mods = Pages.Misc:Section({
			Name = 'Mods',
			Side = 2
		}),
	};

	do
		MiscCategories.Mods:Toggle({
			Name = "Instant equip",
			Flag = "FastEquip",
			Callback = LPH_NO_VIRTUALIZE(function()
				for Index, Value in pairs(Globals.ToolInfo) do
					if type(Value) == "table" and rawget(Value, "Weapon") then
						local Old = Globals.ToolInfoCopy[Index].Weapon;
						Value.Weapon.EquipAnimSpeed = flags.FastEquip and 6 or Old.EquipAnimSpeed;
					end;
				end;
			end);
		});

		MiscCategories.Mods:Toggle({
			Name = "Instant eoka",
			Flag = "InstantEoka",
		});
		--

		--// Guns
		local recoiltbl = {}
		for _, tbl in getgc(true) do
			if type(tbl) ~= 'table' then continue end

			local recoil_start = rawget(tbl, 'RecoilStart')
			local recoil_finish = rawget(tbl, 'RecoilFinish')

			if not (recoil_start and recoil_finish) then
				continue
			end

			insert(recoiltbl, { tbl = tbl, start = recoil_start, finish = recoil_finish, original = Globals.DeepCopy(tbl) })
		end

		local updateRecoil = LPH_NO_VIRTUALIZE(function()
			local active, scale = flags.RecoilModifier, (flags.RecoilPercent or 100) / 100
			for _, data in recoiltbl do
				local tbl, original, start, finish = data.tbl, data.original, data.start, data.finish
				rawset(tbl, 'RecoilStart', active and function(...) local x, y = start(...); return x * scale, y * scale end or start)
				rawset(tbl, 'RecoilFinish', active and function(...) local x, y = finish(...); return x * scale, y * scale end or finish)
				--Recoil.Shake.X = {0, 0}
				--Recoil.Shake.Y = {0, 0}

				rawset(rawget(tbl, 'Shake'), 'X', {original.Shake.X[1] * scale, original.Shake.X[2] * scale})
				rawset(rawget(tbl, 'Shake'), 'Y', {original.Shake.Y[1] * scale, original.Shake.Y[2] * scale})
			end
		end)

		MiscCategories.Mods:Toggle({
			Name = "Recoil",
			Flag = "RecoilModifier",
			Callback = updateRecoil
		});

		MiscCategories.Mods:Slider({
			Name = "Recoil Percent",
			Flag = "RecoilPercent",
			Suffix = "%",
			Min = 0, Max = 200,
			Default = 100,
			Increment = 1,
			Callback = updateRecoil
		});

		MiscCategories.Mods:Toggle({
			Name = "Spread",
			Flag = "SpreadModifier",
		});

		MiscCategories.Mods:Slider({
			Name = "Spread Percent",
			Flag = "SpreadPercent",
			Suffix = "%",
			Min = 0, Max = 200,
			Default = 100,
			Increment = 1,
		});

		MiscCategories.Mods:Toggle({
			Name = "Instant bullet",
			Flag = "InstantBullet"
		});

		MiscCategories.Mods:Toggle({
			Name = "Auto Reload",
			Flag = "AutoReload"
		})

		MiscCategories.Mods:Slider({
			Name = "Delay",
			Flag = "AutoReloadDelay",
			Max = 2,
			Min = 0.2,
			Increment = 0.1,
			Default = 0.5
		})

		MiscCategories.Mods:Toggle({
			Name = "Force automatic",
			Flag = "ForceAuto",
			Callback = LPH_NO_VIRTUALIZE(function()
				for Index, Value in pairs(Globals.ToolInfo) do
					if type(Value) == "table" and rawget(Value, "Weapon") and rawget(Value.Weapon, 'RPM') then
						Value.Weapon.Auto = flags.ForceAuto and true or Globals.ToolInfoCopy[Index].Weapon.Auto
					end
				end;
			end);
		})

		MiscCategories.Mods:Toggle({
			Name = "Instant Bolt",
			Flag = "InstantBolt",
			Risky = true,
			-- Callback = LPH_NO_VIRTUALIZE(function()
			-- 	for Index, Value in pairs(Globals.ToolInfo) do
			-- 		if type(Value) == "table" and rawget(Value, "Weapon") and rawget(Value.Weapon, 'BoltAnimSpeed') then
			-- 			Value.Weapon.ReloadAnimSpeed = flags.InstantBolt and 10 or Globals.ToolInfoCopy[Index].Weapon.ReloadAnimSpeed
			-- 			Value.Weapon.BoltAnimSpeed = flags.InstantBolt and 10 or Globals.ToolInfoCopy[Index].Weapon.BoltAnimSpeed
			-- 		end
			-- 	end;
			-- end);
		});

		MiscCategories.Mods:Toggle({
			Name = "Rapid Fire",
			Flag = "RapidFire",
			Risky = true,
			Callback = LPH_NO_VIRTUALIZE(function()
				for Index, Value in pairs(Globals.ToolInfo) do
					if type(Value) == "table" and rawget(Value, "Weapon") and rawget(Value.Weapon, 'RPM') then
						Value.Weapon.RPM = flags.RapidFire and Globals.ToolInfoCopy[Index].Weapon.RPM * flags.RPMMult or Globals.ToolInfoCopy[Index].Weapon.RPM
					end
				end;
			end);
		});

		MiscCategories.Mods:Slider({
			Name = "RPM Multiplier",
			Flag = "RPMMult",
			Suffix = "x",
			Min = 1, Max = 2, Increment = 0.01,
			Callback = LPH_NO_VIRTUALIZE(function()
				for Index, Value in pairs(Globals.ToolInfo) do
					if type(Value) == "table" and rawget(Value, "Weapon") and rawget(Value.Weapon, 'RPM') then
						Value.Weapon.RPM = flags.RapidFire and Globals.ToolInfoCopy[Index].Weapon.RPM * flags.RPMMult or Globals.ToolInfoCopy[Index].Weapon.RPM
					end
				end;
			end);
		});

		MiscCategories.Mods:Toggle({
			Name = "Faster Reload",
			Flag = "FastADS",
			Callback = LPH_NO_VIRTUALIZE(function()
				local TOGGLE = flags.FastADS;
				for Index, Value in pairs(Globals.ToolInfo) do
					if type(Value) == "table" and rawget(Value, "Weapon") then
						local Old = Globals.ToolInfoCopy[Index].Weapon;
						if rawget(Value.Weapon, "AimDownSpeed") then
							Value.Weapon.AimDownSpeed.In = TOGGLE and Old.AimDownSpeed.In - (Old.AimDownSpeed.In * (flags.AimSpeed / 100)) or Old.AimDownSpeed.In;
							Value.Weapon.AimDownSpeed.Out =TOGGLE and Old.AimDownSpeed.Out - (Old.AimDownSpeed.Out * (flags.AimSpeed / 100)) or Old.AimDownSpeed.Out;
						end;
					end;
				end;
			end);
		});

		MiscCategories.Mods:Toggle({
			Name = "Force Hitpart",
			Flag = "ForceHitpart",
		});

		MiscCategories.Mods:Dropdown({
			Name = "Hitpart",
			Flag = "ForceHitpartParts",
			Multi = true,
			Options = {
				"Head",
				"UpperTorso",
				"LowerTorso",
				"LeftUpperArm",
				"LeftLowerArm",
				"LeftHand",
				"RightUpperArm",
				"RightLowerArm",
				"RightHand",
				"LeftUpperLeg",
				"LeftLowerLeg",
				"LeftFoot",
				"RightUpperLeg",
				"RightLowerLeg",
				"RightFoot",
			},
		})

		MiscCategories.Mods:Slider({
			Name = "Reload Percent",
			Flag = "AimSpeed",
			Suffix = "%",
			Min = 0, Max = 100,
			Callback = LPH_NO_VIRTUALIZE(function()
				local TOGGLE = flags.FastADS;
				for Index, Value in pairs(Globals.ToolInfo) do
					if type(Value) == "table" and rawget(Value, "Weapon") then
						local Old = Globals.ToolInfoCopy[Index].Weapon;
						if rawget(Value.Weapon, "AimDownSpeed") then
							Value.Weapon.AimDownSpeed.In = TOGGLE and Old.AimDownSpeed.In - (Old.AimDownSpeed.In * (flags.AimSpeed / 100)) or Old.AimDownSpeed.In;
							Value.Weapon.AimDownSpeed.Out = TOGGLE and Old.AimDownSpeed.Out - (Old.AimDownSpeed.Out * (flags.AimSpeed / 100)) or Old.AimDownSpeed.Out;
						end;
					end;
				end;
			end);
		});
		--

		--// Melees
		MiscCategories.Mods:Toggle({
			Name = "Reach",
			Flag = "Reach",
			Risky = true
		})

		MiscCategories.Mods:Toggle({
			Name = "Always Critical Hits",
			Flag = "PerfectFarm"
		})

		MiscCategories.Mods:Toggle({
			Name = "Fast cooldown",
			Flag = "FastCooldown",
			Callback = LPH_NO_VIRTUALIZE(function()
				for Index, Value in pairs(Globals.ToolInfo) do
					if type(Value) == "table" and rawget(Value, "Weapon") and rawget(Value.Weapon, 'Cooldown') then
						Value.Weapon.Cooldown = flags.FastCooldown and Globals.ToolInfoCopy[Index].Weapon.Cooldown * 0.8 or Globals.ToolInfoCopy[Index].Weapon.Cooldown
					end
				end;
			end);
		})

		--
		--

		if isPrivate then
			MiscCategories.Mods:Toggle({
				Name = "Anti Vector",
				Flag = "AntiVector",
				Callback = LPH_NO_VIRTUALIZE(function()
					if flags.AntiVector then
						for _, plr in next, Players:GetPlayers() do
							if plr == Client then continue end
							local char = plr.Character
							if not char then continue end

							for _, v in next, char:GetDescendants() do
								if v:IsA('BasePart') then
									v.CanCollide = false
								end
							end
						end
					end
				end);
			});
		end

		MiscCategories.Mods:Toggle({
			Name = "Anti Aim",
			Flag = "AntiAim"
		});

		MiscCategories.Mods:Slider({
			Name = "Yaw",
			Flag = "YawModifier",
			Min = 0, Max = 360, Suffix = "°"
		});

		MiscCategories.Mods:Dropdown({
			Name = "Mode",
			Flag = "YawBase",
			Options = {"Camera", "Random", "Spin", "Targets"}
		});

		MiscCategories.Mods:Slider({
			Name = "Pitch",
			Flag = "PitchModifier",
			Min = -1, Max = 1, Increment = 0.1,
		});

		MiscCategories.Mods:Dropdown({
			Name = "Mode",
			Flag = "PitchBase",
			Options = {"Nod", "Up", "Down", "Custom"}
		})
		--// Misc Interaction Categories
		MiscCategories.Interactions:Toggle({
			Name = "Instant loot",
			Flag = "InstantLoot",
			Callback = function(value)
				local QuickStackFunctions = Globals.QuickStackFunctions

				if #QuickStackFunctions > 0 then
					for _, FUNCTION in QuickStackFunctions do
						debug.setconstant(FUNCTION, 19, value and 0 or 0.9) -- 0.9
						debug.setconstant(FUNCTION, 20, value and 0 or 0.3) -- 0.3
						debug.setconstant(FUNCTION, 21, value and 0 or 0.1) -- 0.1
					end
				end
			end;
		});

		MiscCategories.Interactions:Toggle({
			Name = "Disable turrets",
			Flag = "DisableTurrets",
			Callback = LPH_NO_VIRTUALIZE(function()
				local TouchCollisions = Globals.TouchCollisions
				if not TouchCollisions then return end

				for _, Part in TouchCollisions do
					Part.CanTouch = not flags.DisableTurrets
				end;
			end);
		});

		MiscCategories.Interactions:Toggle({
			Name = "Disable trap damage",
			Flag = "DisableDamageParts",
			Callback = LPH_NO_VIRTUALIZE(function()
				local DamageParts = Globals.DamageParts
				if not DamageParts then return end

				for _, Part in DamageParts do
					Part.CanTouch = not flags.DisableDamageParts
				end;
			end);
		});

		MiscCategories.Interactions:Toggle({
			Name = "Disable fire damage",
			Flag = "DisableFireParts",
			Callback = LPH_NO_VIRTUALIZE(function()
				local FireParts = Globals.FireParts
				if not FireParts then return end

				for _, Part in FireParts do
					Part.CanTouch = not flags.DisableFireParts
				end;
			end);
		});

		MiscCategories.Interactions:Toggle({
			Name = "Instant Last Code Button",
			Flag = "InstantLastCode",
		});

		MiscCategories.Interactions:Toggle({
			Name = "Hit Notifications",
			Flag = "HitNotifications",
		})

		local function playHitSound()
			if not flags.HitSoundSpeed then return end

			local nigerbread = Globals.HitSounds[flags.HitSound]

			if not nigerbread then return end

			local sound = Instance.new("Sound")

			sound.SoundId = nigerbread
			sound.Volume = flags.HitSoundVolume
			sound.PlaybackSpeed = flags.HitSoundSpeed
			sound.Parent = workspace
			sound:Play()

			sound.Ended:Connect(function()
				sound:Destroy()
			end)
		end

		MiscCategories.Interactions:Toggle({
			Name = "Hit Sounds",
			Flag = "HitSounds",
			Callback = playHitSound
		})

		MiscCategories.Interactions:Dropdown({
			Name = "Hit Sound",
			Flag = "HitSound",
			Options = Globals.HitSoundNames,
			Default = "Bubble",
			Callback = playHitSound
		})

		MiscCategories.Interactions:Slider({
			Name = "Hit Sound Volume",
			Flag = "HitSoundVolume",
			Min = 0, Max = 10, Default = 1, Increment = 0.1,
			Suffix = "x"
		})

		MiscCategories.Interactions:Slider({
			Name = "Hit Sound Speed",
			Flag = "HitSoundSpeed",
			Min = 0, Max = 10, Default = 1, Increment = 0.1,
			Suffix = "x"
		})

		MiscCategories.Interactions:Toggle({
			Name = "Ghost Mode",
			Tooltip = "Hides your username in chat and on team list (client sided)",
			Flag = "GhostMode",
		})

		-- MiscCategories.Interactions:Toggle({
		-- 	Name = "Noclip",
		-- 	Flag = "Noclip",
		-- }):Keybind({
		--     Name = "Noclip Key",
		--     Flag = "Noclip Activation",
		-- })

		MiscCategories.Interactions:Toggle({
			Name = "Auto Upgrade",
			Flag = "AutoUpgrade"
		});

		MiscCategories.Interactions:Slider({
			Name = "Distance",
			Flag = "AutoUpgradeDistance",
			Min = 5, Max = 30
		});

		MiscCategories.Interactions:Dropdown({
			Name = "Level",
			Flag = "UpgradeMaterial",
			Options = {
				"Wood",
				"Stone",
				"Metal",
				"Steel"
			};
		});

		local Terrain = workspace.Terrain
		local storedRegion = nil
		local storedCorner = nil

		MiscCategories.Interactions:Toggle({
			Name = "Hide Terrain (Laggy)",
			Flag = "HideTerrain"
		}):Keybind({
			Name = "Hide Terrain Key",
			Flag = "HideTerrain Activation",
			Mode = "Toggle",
			Callback = LPH_NO_VIRTUALIZE(function()
				local activated = flags.HideTerrain and flags["HideTerrain Activation"].Toggled
				if Client.Character and Client.Character:FindFirstChild("HumanoidRootPart") then
					Client.Character.HumanoidRootPart.Anchored = activated
				end
				if not activated then
					if storedRegion and storedCorner then
						Terrain:PasteRegion(storedRegion, storedCorner, true)
					end
				else
					storedRegion = Terrain:CopyRegion(Region3int16.new(Vector3int16.new(-16384, -512, -16384), Vector3int16.new(16384, 512, 16384)))
					storedCorner = Vector3int16.new(-16384, -512, -16384)
					Terrain:Clear()
				end
			end)
		});

		MiscCategories.Interactions:Toggle({
			Name = 'Cards Noclip (rocket and black card)',
			Flag = 'CardsNoclip',
			Callback = function()
				local NoclipParts = Globals.NoclipParts
				if not NoclipParts then return end

				for _, Part in NoclipParts do
					Part.CanCollide = not flags.CardsNoclip
				end
			end
		})
		--

		--// Teleport section
		MiscCategories.Movement:Toggle({
			Name = "TP to bullet",
			Flag = "ShootOnTP",
			Risky = true
		}):Keybind({
			Name = "Teleport Key",
			Flag = "Teleport Activation",
			Mode = "Toggle"
		})

		MiscCategories.Movement:Toggle({
			Name = "Disable silent while enabled",
			Flag = "DisableSilentWhileTP"
		})
		--


		--// Flight Section
		MiscCategories.Movement:Toggle({
			Name = "Speed",
			Flag = "Speed",
		}):Keybind({
			Name = "Speed key",
			Flag = "Speed Activation"
		});

		MiscCategories.Movement:Slider({
			Name = "Speed Amount",
			Flag = "SpeedAmount",
			Min = 1, Max = 40,
			Increment = 0.1
		});

		MiscCategories.Movement:Toggle({
			Name = "Flight",
			Flag = "Fly",
		}):Keybind({
			Name = "Fly key",
			Flag = "Fly Activation"
		});

		MiscCategories.Movement:Toggle({
			Name = "Bypass flight restriction",
			Flag = "InfiniteFly",
			Risky = true
		});

		MiscCategories.Movement:Slider({
			Name = "Fly speed",
			Flag = "FlySpeed",
			Min = 2, Max = 6,
			Increment = 0.1,
		});
		--

		--// General movement
		MiscCategories.Movement:Toggle({
			Name = "Silent step",
			Flag = "SilentStep",
			Risky = true
		});

		MiscCategories.Movement:Toggle({
			Name = "Bunnyhop",
			Flag = "Bunnyhop"
		});

		MiscCategories.Movement:Toggle({
			Name = "Omnisprint",
			Flag = "Omnisprint"
		});

		MiscCategories.Movement:Toggle({
			Name = "Always grounded",
			Flag = "AlwaysGrounded"
		});
		--

		--// No fall
		MiscCategories.Movement:Toggle({
			Name = "No Fall Damage",
			Flag = "NoFall"
		})
		local Events = workspace:FindFirstChild("Events")

		-- MiscCategories.Movement:Button_holder({})
		if Events then
			MiscCategories.Movement:Button({
				Name = 'Bring BTR',
				Callback = function()
					local ClientCharacter = Globals.ClientCharacter
					if not ClientCharacter then return Library:Notification({text = "No Character Found", time = 3}) end

					local ClientRoot = ClientCharacter:FindFirstChild("HumanoidRootPart")
					if not ClientRoot then return Library:Notification({text = "No HumanoidRootPart Found", time = 3}) end

					local BTR = Events:FindFirstChild("BTR")
					if not BTR then return Library:Notification({text = "No BTR Found", time = 3}) end

					local BTRHRP = BTR:FindFirstChild("HumanoidRootPart")
					if not BTRHRP then return Library:Notification({text = "No BTR HumanoidRootPart Found", time = 3}) end

					BTRHRP.CFrame = ClientRoot.CFrame
				end
			})
		end
		local fakeLagDebounce
		MiscCategories.Movement:Toggle({
			Name = "Fake Lag",
			Flag = "FakeLag",
		}):Keybind({
			Name = "Fake Lag Key",
			Flag = "FakeLag Activation",
			Mode = "Toggle"
		})

		MiscCategories.Movement:Slider({
			Name = "Fake Lag Timer",
			Flag = "FakeLagTimer",
			Min = 0.1, Max = 0.35, Increment = 0.01, Default = 0.25,
			Suffix = "s"
		})

		MiscCategories.Movement:Toggle({
			Name = "Fake Lag Visualizer (3rd person)",
			Flag = "FakeLagVisualizer",
		}):Colorpicker({
			Name = "Color",
			Flag = "FakeLagVisualizerColor",
			Default = Themes.Preset.Accent
		})

		MiscCategories.Movement:Button({
			Name = "Reset Character",
			Callback = function()
				if Client.Character then
					Client.Character:BreakJoints()
				end
			end
		})
		task.spawn(function()
			-- NetworkClient:SetOutgoingKBPSLimit(0)
			while wait() do
				if flags["FakeLag"] then
					task.wait(flags["FakeLagTimer"])
					fakeLagDebounce = not fakeLagDebounce;
					NetworkClient:SetOutgoingKBPSLimit(fakeLagDebounce and 1 or 0)
					if not fakeLagDebounce and flags.ThirdPerson and flags["Third Person Activation"].Toggled and flags["FakeLagVisualizer"] then
						local FakeLagVisualizerColor = flags["FakeLagVisualizerColor"]
						Globals.LagChams(Client, FakeLagVisualizerColor.Color, FakeLagVisualizerColor.Transparency, flags["FakeLagTimer"] * 2)
					end
				-- else
					-- NetworkClient:SetOutgoingKBPSLimit(0)
				end
			end

		end)
	end
	--
	--

	local SkinCategories = {
		Guns = Pages.Skins:Section({
			Name = "Gun Skins",
			Side = 1
		}),
		Armor = Pages.Skins:Section({
			Name = "Armor Skins",
			Side = 2
		}),
	}

	--// Skins
	local VMs = ReplicatedStorage:FindFirstChild("VMs");
	local Sleeves = ReplicatedStorage:FindFirstChild("Sleeves");
	if VMs and Sleeves then
		local ItemSkins = {};
		local ArmorSkins = {};

		for _, Item in VMs:GetChildren() do
			if Item:IsA("Folder") then
				ItemSkins[Item.Name] = {}
				for _, Skin in Item:GetChildren() do
					if Skin:IsA("Model") then
						insert(ItemSkins[Item.Name], Skin.Name);
					end;
				end;
			end;
		end;

		for _, Armor in Sleeves:GetChildren() do
			if Armor:IsA("Folder") then
				ArmorSkins[Armor.Name] = {}
				for _, Skin in Armor:GetChildren() do
					if Skin:IsA("Model") then
						insert(ArmorSkins[Armor.Name], Skin.Name);
					end;
				end;
			end;
		end;

		do --// Guns/Items
			for Item, Skins in ItemSkins do
				if #Skins > 1 then
					SkinCategories.Guns:Toggle({
						Name = Item,
						Flag = "EnableSkin_"..Item
					})
					SkinCategories.Guns:Dropdown({
						Name = Item,
						Flag = "Skin_"..Item,
						Options = Skins,
					})
				end;
			end;
		end;

		do --// Armor
			for Armor, Skins in ArmorSkins do
				if #Skins > 1 then
					SkinCategories.Armor:Toggle({
						Name = Armor,
						Flag = "EnableSkin_"..Armor
					})
					SkinCategories.Armor:Dropdown({
						Name = "",
						Flag = "Skin_"..Armor,
						Options = Skins,
					})
				end;
			end;
		end;
	end;
end)();

Library.OriginalFlags = Globals.DeepCopy(flags);

--#endregion UI Setup

--#region Flags
local AimingAnimationId = "rbxassetid://10982316984"
local HealingAnimationIds = {
	["rbxassetid://14860445359"] = true,
	["rbxassetid://2529243689"] = true
}

EntityClass.Main.Functions:AddFlag({
	Name = "Aiming",
	ClassTypes = {"Player"},
	Text = LPH_NO_VIRTUALIZE(function(self) return "Scope" end),
	Allow = LPH_NO_VIRTUALIZE(function(self)
		local ESPChar = self.Character
		if not ESPChar then return false end

		local ESPHumanoid = ESPChar:FindFirstChild("Humanoid")
		if not (ESPHumanoid) then return false end

		local Root = ESPHumanoid.RootPart
		if not Root then return false end

		local Weapon = self.CachedItem

		if not Weapon then return false end

		if Weapon.Name == "Wooden Bow" then
			local DrawAnim = Root:FindFirstChild("Wooden BowDraw")
			return DrawAnim and DrawAnim.IsPlaying
		end

		for _, track in ESPHumanoid:GetPlayingAnimationTracks() do
			if track.Animation.AnimationId == AimingAnimationId then
				return true
			end
		end

		return false
	end)
})

EntityClass.Main.Functions:AddFlag({
	Name = "Reloading",
	ClassTypes = {"Player"},
	Text = LPH_NO_VIRTUALIZE(function(self) return "Reload" end),
	Allow = LPH_NO_VIRTUALIZE(function(self)
		local Root = self.Character and self.Character:FindFirstChild("HumanoidRootPart")
		local Weapon = self.CachedItem
		if not (Root and Weapon) then return false end

		local WeaponName = Weapon.Name
		local MagIn, MagOut

		if WeaponName == "Crossbow" then
			MagIn = Root:FindFirstChild("CrossbowPlaceArrow")
			MagOut = Root:FindFirstChild("CrossbowPull")
		else
			MagIn = Root:FindFirstChild(WeaponName.. "MagIn")
			MagOut = Root:FindFirstChild(WeaponName .. "MagOut")
		end

		return (MagIn and MagIn.IsPlaying) or (MagOut and MagOut.IsPlaying)
	end)
})

EntityClass.Main.Functions:AddFlag({
	Name = "Healing",
	ClassTypes = {"Player"},
	Text = LPH_NO_VIRTUALIZE(function(self) return "Heal" end),
	Allow = LPH_NO_VIRTUALIZE(function(self)
		local ESPChar = self.Character
		if not ESPChar then return false end

		local ESPHumanoid = ESPChar:FindFirstChild("Humanoid")
		if not ESPHumanoid then return false end

		for _, track in ESPHumanoid:GetPlayingAnimationTracks() do
			if HealingAnimationIds[track.Animation.AnimationId] then
				return true
			end
		end
		return false
	end)
})

EntityClass.Main.Functions:AddFlag({
	Name = "VIP",
	ClassTypes = {"Player"},
	Text = LPH_NO_VIRTUALIZE(function(self) return "VIP" end),
	Allow = LPH_NO_VIRTUALIZE(function(self)
		return self.Pointer and self.Pointer:GetAttribute("VIP")
	end)
})

EntityClass.Main.Functions:AddFlag({
	Name = "Clan",
	ClassTypes = {"Player"},
	Text = LPH_NO_VIRTUALIZE(function(self)
		return self.Pointer:GetAttribute("ClanTag") or ""
	end),
	Allow = LPH_NO_VIRTUALIZE(function(self)
		return self.Pointer and self.Pointer:GetAttribute("ClanTag")
	end)
})

EntityClass.Main.Functions:AddFlag({
	Name = "Staff",
	ClassTypes = {"Player"},
	Text = LPH_NO_VIRTUALIZE(function(self)
		if not self.Pointer then return end
		local flagged_role = Globals.FlaggedStaff[self.Pointer]

		if not flagged_role then return end

		return "STAFF: "..flagged_role
	end),
	Allow = LPH_NO_VIRTUALIZE(function(self)
		local pointer = self.Pointer
		if not pointer then return false end

		return Globals.FlaggedStaff[pointer]
	end)
})
--#endregion Flags

--#region Connections
local RaidsFolder = Globals:Instance("Folder", {
	Parent = CoreGui,
	Name = "Raids"
});

Globals.RaidsFolder = RaidsFolder;

local AttackersFolder = Globals:Instance("Folder", {
	Parent = CoreGui,
	Name = "AttackerFolder"
})

Globals.AttackersFolder = AttackersFolder;

--// All important connections
LPH_JIT_MAX(function()
	--// Players
	local FlaggedRoles = {
		"OG",
		"Game Tester",
		"Game Moderator",
		"Developers",
		"Lead Developer",
		"Co-Founder",
		"Founder",
		"Trial Moderator"
	};

	local function CheckMod(Player)
		if Player == Client then
			Library:Notification({text = "Test...."});
		end;

		local Role = TrialModList[Player.UserId] or Player:GetRoleInGroup(1154360);

		if table.find(FlaggedRoles, Role) then
			Library:Notification({text = "Staff detected! ["..Player.Name .. "] Role: "..Role, time = 15})
			Window.add_mod(Player.Name, Role)
			Globals.FlaggedStaff[Player] = Role
			return
		end
	end;

	local function anitfling(char)
		if flags.AntiVector then
			for _, v in pairs(char:GetDescendants()) do
				if v:IsA('BasePart') then
					v.CanCollide = false
				end
			end
		end

		char.DescendantAdded:Connect(function(v)
			if v:IsA('BasePart') and flags.AntiVector then
				v.CanCollide = false
			end
		end)
	end

	local function bindPlayer(plr)
		if (plr == Client) then return end

		local cache = EntityClass.Main.Cache
		local obj = cache[plr] or EntityClass.Global:Create(plr, { Class = 'Player', ClassType = 'Player' })
		Globals.PlayerCount = #Players:GetPlayers()

		if obj._charAddedConn then
			obj._charAddedConn:Disconnect()
			obj._charAddedConn = nil
		end

		obj._charAddedConn = plr.CharacterAdded:Connect(function(c)
			if obj.OnCharacterAdded then
				obj:OnCharacterAdded(c)
			end
			anitfling(c)
		end)

		if plr.Character then
			if obj.OnCharacterAdded then
				obj:OnCharacterAdded(plr.Character)
			end
			anitfling(plr.Character)
		end

		pcall(CheckMod, plr)
	end

	for _, plr in Players:GetPlayers() do
		bindPlayer(plr)
	end

	Players.PlayerAdded:Connect(bindPlayer)
	Players.PlayerRemoving:Connect(function(plr)
		Window.remove_mod(plr.Name)

		local obj = EntityClass.Main.Cache[plr]
		if obj and obj._charAddedConn then obj._charAddedConn:Disconnect(); obj._charAddedConn = nil; end
		if EntityClass.Global.DestroyFuncs[plr] then EntityClass.Global.DestroyFuncs[plr]() end

		Globals.FlaggedStaff[plr] = nil
		EntityClass.Main.Cache[plr] = nil
	end)

	Players.ChildRemoved:Connect(function(Player)
		if EntityClass.Global.DestroyFuncs[Player] then
			EntityClass.Global.DestroyFuncs[Player]()
		end

		EntityClass.Main.Cache[Player] = nil
	end)
	--

	--// AI

	local SoldierClassType = {
		Brutus = "Boss",
		Bruno = "Boss",
		BTR = "Boss",
		Boris = "Boss",
		Soldier = "AI",
	}

	local Military = workspace:FindFirstChild("Military")
	if Military then
		local Events = workspace:FindFirstChild("Events")
		local CacheSoldier = function(Soldier)
			local ClassType = SoldierClassType[Soldier.Name]
			if not ClassType then return end

			EntityClass.Global:Create(
				Soldier,
				{
					Class = "AI",
					ClassType = ClassType,
				}
			);
		end;

		for Index, BTR in Events:GetChildren() do
			if BTR.Name == "BTR" then
				CacheSoldier(BTR)
			end;
		end;

		Events.ChildAdded:Connect(function(BTR)
			task.wait(1)
			if BTR.Name == "BTR" then
				CacheSoldier(BTR)
			end;
		end)

		for _, Folder in Military:GetChildren() do
			for Index, Soldier in Folder:GetChildren() do
				if Soldier:IsA("Model") then
					CacheSoldier(Soldier)
				end;
			end;

			Folder.ChildAdded:Connect(function(Soldier)
				task.wait(1)
				if Soldier:IsA("Model") then
					CacheSoldier(Soldier)
				end;
			end)
		end;
	end;
	--

	--// Misc ESP
	local Nodes = workspace:FindFirstChild("Nodes");
	local Drops = workspace:FindFirstChild("Drops");
	local Bases = workspace:FindFirstChild("Bases");
	local Plants = workspace:FindFirstChild("Plants")

	local function chams(target)
		local SizeOffset = 0.05

		return Globals:Instance("BoxHandleAdornment", {
			Name = "",
			Adornee = target,
			Parent = target,
			ZIndex = 2,
			AlwaysOnTop = true,
			Size = target.Size + Vector3.new(SizeOffset, SizeOffset, SizeOffset),
			Visible = false
		})
	end

	if Nodes then
		local freeze = false
		local NodeChams = {}
		local NodeFlags = {
			['Metal_Node'] = 'Metal',
			['Stone_Node'] = 'Stone',
			['Phosphate_Node'] = 'Phosphate',
		}
		local LastNodeCheck = tick()
		RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function()
			if freeze and Client and Client.Character and Client.Character:FindFirstChild("HumanoidRootPart") then
				-- Client.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)
			else
				task.wait(0.1)
			end
			if tick() - LastNodeCheck > 5 then
				if flags["NodesChams"] then
					LastNodeCheck = tick()
					for _, Node in Nodes:GetChildren() do
						local nodeflag = NodeFlags[Node.Name]
						if Node and nodeflag and Node:FindFirstChild('Main') then
							if not NodeChams[Node] then
								local Adornment = chams(Node.Main)
								NodeChams[Node] = Adornment
							end

							local Adornment = NodeChams[Node]
							Adornment.Color3 = flags["Chams" .. nodeflag .. "Color"].Color
							Adornment.Transparency = 1 - flags["Chams" .. nodeflag .. "Color"].Transparency
							Adornment.Visible = flags["Chams" .. nodeflag]
						end
					end
				else
					for _, cham in NodeChams do
						if cham and cham:IsA("BoxHandleAdornment") then
							cham.Visible = false
						end
					end
				end
			end
		end))

		local PathfindingService = game:GetService('PathfindingService')
		local character = Client.Character or Client.CharacterAdded:Wait()
		character:WaitForChild('Humanoid')
		character:WaitForChild('HumanoidRootPart')
		local humanoid = character.Humanoid

		local Controls = require(Client:WaitForChild('PlayerScripts'):WaitForChild('PlayerModule')):GetControls()

		local TARGET_REFRESH = 0.35
		local ARRIVE_DIST = 2.5
		local ARRIVE_DIST2 = ARRIVE_DIST * ARRIVE_DIST
		local WAYPOINT_TIMEOUT = 1.2
		local SPEED_BOOST = 26

		-- local nodes = {}
		-- do
		-- 	for _, n in ipairs(Nodes:GetChildren()) do
		-- 		if n:FindFirstChild('Main') then
		-- 			table.insert(nodes, n)
		-- 		end
		-- 	end
		-- end
		-- Nodes.ChildAdded:Connect(function(c)
		-- 	task.defer(function()
		-- 		nodes = {}
		-- 		for _, n in ipairs(Nodes:GetChildren()) do
		-- 			if n:FindFirstChild('Main') then
		-- 				table.insert(nodes, n)
		-- 			end
		-- 		end
		-- 	end)
		-- end)
		-- Nodes.ChildRemoved:Connect(function(c)
		-- 	task.defer(function()
		-- 		nodes = {}
		-- 		for _, n in ipairs(Nodes:GetChildren()) do
		-- 			if n:FindFirstChild('Main') then
		-- 				table.insert(nodes, n)
		-- 			end
		-- 		end
		-- 	end)
		-- end)

		Client.CharacterAdded:Connect(function(c)
			character = c
			humanoid = c:WaitForChild('Humanoid')
			Controls = require(Client:WaitForChild('PlayerScripts'):WaitForChild('PlayerModule')):GetControls()
			c:WaitForChild('HumanoidRootPart')
		end)

		task.spawn(function()
			local lastTarget = nil;
			local lastTargetAt = 0;

			while true do
				if (character and character.Parent and character.PrimaryPart and flags.AutoFarm) then
					local root = character.PrimaryPart;

					if ((time() - lastTargetAt) >= TARGET_REFRESH)
					or (not lastTarget or not lastTarget:IsDescendantOf(workspace))
					or (lastTarget and (flags.AutoFarmTargets ~= NodeFlags[lastTarget.Name])) then
						local best, bestd = nil, math.huge;
						for _, node in next, Nodes:GetChildren() do
							if (node and node:IsDescendantOf(workspace) and flags.AutoFarmTargets == NodeFlags[node.Name]) then
								local m = node:FindFirstChild('Main');
								if (m) then
									local d = (root.Position - m.Position).Magnitude;
									if (d < bestd) then
										bestd = d;
										best = node;
									end;
								end;
							end;
						end;
						lastTarget = best;
						lastTargetAt = time();
					end;

					if (lastTarget and lastTarget:IsDescendantOf(workspace)) then
						Controls:Disable();
						freeze = true;

						local reachedTarget = false;
						do
							local m = lastTarget:FindFirstChild('Main');
							if (m) then
								local path = PathfindingService:CreatePath({
									AgentRadius = 2,
									AgentHeight = 5,
									AgentCanJump = true,
									WaypointSpacing = 2,
								});
								path:ComputeAsync(root.Position, m.Position);
								if (path.Status == Enum.PathStatus.Success) then
									local waypoints = path:GetWaypoints();
									local failed = false;

									for i = 1, #waypoints do
										if (not flags.AutoFarm)
										or (not lastTarget or not lastTarget:IsDescendantOf(workspace))
										or (flags.AutoFarmTargets ~= NodeFlags[lastTarget.Name]) then
											failed = true;
											break;
										end;

										local wp = waypoints[i];
										if (wp.Action == Enum.PathWaypointAction.Jump) then
											humanoid.Jump = true;
										end;

										local startT = time();
										while true do
											if (not flags.AutoFarm)
											or (not character or not character.Parent or not character.PrimaryPart)
											or (not lastTarget or not lastTarget:IsDescendantOf(workspace))
											or (flags.AutoFarmTargets ~= NodeFlags[lastTarget.Name]) then
												failed = true;
												break;
											end;

											local curMain = lastTarget:FindFirstChild('Main');
											local goalPos = (curMain and curMain.Position) or wp.Position;

											local pos = character.PrimaryPart.Position;
											local to = goalPos - pos;
											local flat = Vector3.new(to.X, 0, to.Z);
											local dist = flat.Magnitude;

											if (to:Dot(to) <= ARRIVE_DIST2) then
												break;
											end;

											local dir = (dist > 0) and (flat / dist) or Vector3.new();
											local desired = tonumber(flags.AutoFarmSpeed) or 26;
											local curVel = character.PrimaryPart.AssemblyLinearVelocity;

											local speed = desired;
											if (dist < 8) then
												speed = math_max(4, math_min(desired, dist * 2));
											end;

											local newVel = dir * speed;
											character.PrimaryPart.AssemblyLinearVelocity = Vector3.new(newVel.X, curVel.Y, newVel.Z);

											if ((time() - startT) > WAYPOINT_TIMEOUT) then
												failed = true;
												break;
											end;

											RunService.Heartbeat:Wait();
										end;

										if (failed) then
											break;
										end;
									end;

									if (not failed) then
										reachedTarget = true;
									end;
								end;
							end;
						end;

						if (reachedTarget) then
							while (flags.AutoFarm)
							and (lastTarget and lastTarget:IsDescendantOf(workspace))
							and (flags.AutoFarmTargets == NodeFlags[lastTarget.Name]) do
								if (not character or not character.Parent or not character.PrimaryPart) then
									break;
								end;

								local m = lastTarget:FindFirstChild('Main');
								if (not m) then
									break;
								end;

								local pos = character.PrimaryPart.Position;
								local to = m.Position - pos;
								local flat = Vector3.new(to.X, 0, to.Z);
								local dist = flat.Magnitude;

								if (to:Dot(to) > ARRIVE_DIST2) then
									break;
								end;

								local dir = (dist > 0) and (flat / dist) or Vector3.new();
								local desired = tonumber(flags.AutoFarmSpeed) or 26;
								local curVel = character.PrimaryPart.AssemblyLinearVelocity;

								local speed = math_max(0, math_min(desired, dist * 2));
								local newVel = dir * speed;
								character.PrimaryPart.AssemblyLinearVelocity = Vector3.new(newVel.X, curVel.Y, newVel.Z);

								RunService.Heartbeat:Wait();
							end;
						end;

						do
							if character and character.PrimaryPart then
								local curVel = character.PrimaryPart.AssemblyLinearVelocity;
								character.PrimaryPart.AssemblyLinearVelocity = Vector3.new(0, curVel.Y, 0);
							end
						end;
						Controls:Enable();
						freeze = false;
					else
						Controls:Enable();
						freeze = false;
						task.wait(0.2);
					end;
				else
					task.wait(0.2);
				end;
				task.wait(0.03);
			end;
		end);
	end

	if Plants then
		local PlantsChams = {}
		local PlantsFlags = {
			["Wool Plant"] = "Wool",
			["Tomato Plant"] = "Tomato",
			['Pumpkin Plant'] = "Pumpkin"
		}
		local LastPlantsCheck = tick()
		local maxamt = 10
		RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function()
			if tick() - LastPlantsCheck > 5 then
				if flags["PlantsChams"] then
					LastPlantsCheck = tick()
					for _, Plant in Plants:GetChildren() do
						local Plantflag = PlantsFlags[Plant.Name]
						if Plant and Plantflag and Plant:FindFirstChild('Main') then
							if not PlantsChams[Plant] then
								local Adornment = chams(Plant.Main)
								PlantsChams[Plant] = Adornment
							end
							local Adornment = PlantsChams[Plant]
							if Plant:FindFirstChild('Item') then
								local Item = HttpService:JSONDecode(Plant.Item.Value)
								if Item and Item.Amount and Plant.Name == 'Wool Plant' then
									if Item.Amount >= maxamt then
										maxamt = Item.Amount
									end

									if maxamt > Item.Amount then
										Adornment.Visible = false
										continue
									end
								end
							end

							Adornment.Color3 = flags["Chams" .. Plantflag .. "Color"].Color
							Adornment.Transparency = 1 - flags["Chams" .. Plantflag .. "Color"].Transparency
							Adornment.Visible = flags["Chams" .. Plantflag]
						end
					end
				else
					for _, cham in PlantsChams do
						if cham and cham:IsA("BoxHandleAdornment") then
							cham.Visible = false
						end
					end
				end
			end
		end))
	end;
	if Bases then
		local BasesChams = {}
		local BaseFlags = {
			BodyBag = "BodyBag",
		}
		local bodyBags = Bases.Loners:FindFirstChild('Body Bag')
		if bodyBags then
			local LastBasesCheck = tick()
			RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function()
				if tick() - LastBasesCheck > 5 then
					if flags["BaseChams"] then
						LastBasesCheck = tick()
						for _, BodyBag in bodyBags:GetChildren() do
							local BaseFlag = 'BodyBags'
							if BodyBag and BaseFlag and BodyBag:FindFirstChild('Main') then
								if not BasesChams[BodyBag] then
									local Adornment = chams(BodyBag.Main)
									BasesChams[BodyBag] = Adornment
								end

								local Adornment = BasesChams[BodyBag]
								Adornment.Color3 = flags["Chams" .. BaseFlag .. "Color"].Color
								Adornment.Transparency = 1 - flags["Chams" .. BaseFlag .. "Color"].Transparency
								Adornment.Visible = flags["Chams" .. BaseFlag]
							end
						end
					else
						for _, cham in BasesChams do
							if cham and cham:IsA("BoxHandleAdornment") then
								cham.Visible = false
							end
						end
					end
				end
			end))
		end

	end
	-- --
	-- if Drops then
	-- 	local ItemColors = {
	-- 		["Misc"] = Color3.fromRGB(210, 210, 210),
	-- 		["Gun"] = Color3.fromRGB(214, 20, 20),
	-- 		["Ammo"] = Color3.fromRGB(214, 50, 50),
	-- 		["Consumable"] = Color3.fromRGB(50, 214, 50),
	-- 		["Bench"] = Color3.fromRGB(210, 210, 210),
	-- 		["Attachment"] = Color3.fromRGB(252, 215, 3),
	-- 		["Resource"] = Color3.fromRGB(3, 252, 161),
	-- 		["Lock"] = Color3.fromRGB(210, 210, 210),
	-- 		["Tool"] = Color3.fromRGB(255, 255, 255),
	-- 		["Armor"] = Color3.fromRGB(255, 0, 183)
	-- 	};

	-- 	EntityClass.Misc.Functions.AddListener({
	-- 		Parent = Drops,
	-- 		ClassName = "Model",
	-- 		Listener = "ItemListener",
	-- 		Flag = "Items",
	-- 		GetColor = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return  flags["ItemsColor"].Color;
	-- 		end);

	-- 		GetAlpha = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return flags["ItemsColor"].Transparency;
	-- 		end);

	-- 		GetName = LPH_NO_VIRTUALIZE(function(Data)
	-- 			if not Data.DecodedInformation then
	-- 				local Item = Data.Object:FindFirstChild("Item");
	-- 				Item = HttpService:JSONDecode(Item);
	-- 				local ID = Item.ID;
	-- 				local Amount = Item.Amount;

	-- 				local ItemInfo = Globals.ItemInfoTable[ID];
	-- 				local Type = ItemInfo.Type;
	-- 				Data.Type = Type;
	-- 				Data.DecodedInformation = {
	-- 					ID = ID,
	-- 					Amount = Amount,
	-- 				};
	-- 			end;

	-- 			local Color = ItemColors[Data.Type]
	-- 			local Name = Data.Object.Name;

	-- 			if Data.DecodedInformation.Amount > 1 then
	-- 				Name = Name .. " x"..tostring(Data.DecodedInformation.Amount)
	-- 			end;

	-- 			return Name
	-- 		end);

	-- 		GetPosition = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return Data.Object.PrimaryPart and Data.Object.PrimaryPart.CFrame.p
	-- 		end);

	-- 		GetDistance = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return Data.Object.PrimaryPart and math.floor((Camera.CFrame.p - Data.Object.PrimaryPart.CFrame.p).Magnitude);
	-- 		end);

	-- 		Validate    = LPH_NO_VIRTUALIZE(function(Data)
	-- 			if Data.Object:FindFirstChild("Item") then
	-- 				if not Data.DecodedInformation then
	-- 					local Item = Data.Object:FindFirstChild("Item");
	-- 					Item = HttpService:JSONDecode(Item);
	-- 					local ID = Item.ID;
	-- 					local Amount = Item.Amount;

	-- 					local ItemInfo = Globals.ItemInfoTable[ID];
	-- 					local Type = ItemInfo.Type;
	-- 					Data.Type = Type;
	-- 					Data.DecodedInformation = {
	-- 						ID = ID,
	-- 						Amount = Amount,
	-- 					};
	-- 				end;
	-- 				return flags["Include"..Data.Type];
	-- 			end;
	-- 		end);
	-- 	});

	-- 	EntityClass.Misc.Functions.AddListener({
	-- 		Parent = Globals.RaidsFolder,
	-- 		ClassName = "Part",
	-- 		Listener = "RaidListener",
	-- 		Flag = "Raids",
	-- 		GetName = LPH_NO_VIRTUALIZE(function(Data)
	-- 			local Object = Data.Object;
	-- 			local Type = Object.Name
	-- 			local Time = tostring(math.floor(tick() - Object.StartedAt));
	-- 			return "Potential Raid - "..Object.Name.."\n"..tostring(Time).." seconds ago";
	-- 		end);

	-- 		GetPosition = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return Data.Object and Data.Object.CFrame.p
	-- 		end);

	-- 		GetDistance = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return Data.Object and math.floor((Camera.CFrame.p - Data.Object.CFrame.p).Magnitude);
	-- 		end);

	-- 		Validate = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return true;
	-- 		end);
	-- 	});

	-- 	EntityClass.Misc.Functions.AddListener({
	-- 		Parent = Globals.AttackersFolder,
	-- 		ClassName = "Part",
	-- 		Listener = "AttackerListener",
	-- 		Flag = "Attackers",
	-- 		GetName = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return Data.Object.Name
	-- 		end);

	-- 		GetPosition = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return Data.Object and Data.Object.CFrame.p
	-- 		end);

	-- 		GetDistance = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return Data.Object and math.floor((Camera.CFrame.p - Data.Object.CFrame.p).Magnitude);
	-- 		end);

	-- 		Validate = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return true;
	-- 		end);
	-- 	})
	-- end;
	-- --
	-- if Bases then
	-- 	local Loners = Bases:FindFirstChild("Loners");
	-- 	local TimedCrate = Loners:FindFirstChild("Timed Crate");
	-- 	local Sleeper = Loners:FindFirstChild("Sleeper");

	-- 	if TimedCrate then
	-- 		EntityClass.Misc.Functions.AddListener({
	-- 			Parent = TimedCrate,
	-- 			ClassName = "Model",
	-- 			Listener = "TimedCrateListener",
	-- 			Flag = "TimedCrates",
	-- 			GetName = LPH_NO_VIRTUALIZE(function(Data)
	-- 				local Name = Data.Object.Name
	-- 				local Timer = Data.Object:FindFirstChild("Timer");
	-- 				local GuiHolder = Timer and Timer:FindFirstChild("GuiHolder");
	-- 				local SurfaceGui = GuiHolder and GuiHolder:FindFirstChild("Label");
	-- 				local TextLabel = SurfaceGui and SurfaceGui:FindFirstChild("TextLabel");
	-- 				local TimeRemaining = TextLabel and TextLabel.Text or "12:00";

	-- 				return Name .. " ["..TimeRemaining.."]"
	-- 			end);

	-- 			GetPosition = LPH_NO_VIRTUALIZE(function(Data)
	-- 				return Data.Object.PrimaryPart and Data.Object.PrimaryPart.CFrame.p
	-- 			end);

	-- 			GetDistance = LPH_NO_VIRTUALIZE(function(Data)
	-- 				return Data.Object.PrimaryPart and math.floor((Camera.CFrame.p - Data.Object.PrimaryPart.CFrame.p).Magnitude);
	-- 			end);

	-- 			Validate    = LPH_NO_VIRTUALIZE(function(Data)
	-- 				return true
	-- 			end);
	-- 		});

	-- 	end;
	-- 	--
	-- 	if Loners then
	-- 		local CarePackage = Loners:FindFirstChild("Care Package");
	-- 		local BodyBag = Loners:FindFirstChild("Body Bag")
	-- 		if CarePackage then
	-- 			EntityClass.Misc.Functions.AddListener({
	-- 				Parent = CarePackage,
	-- 				ClassName = "Model",
	-- 				Listener = "CarePackageListener",
	-- 				Flag = "CarePackages",
	-- 				GetName = LPH_NO_VIRTUALIZE(function(Data)
	-- 					local Name = Data.Object.Name
	-- 					return Name
	-- 				end);

	-- 				GetPosition = LPH_NO_VIRTUALIZE(function(Data)
	-- 					return Data.Object.PrimaryPart and Data.Object.PrimaryPart.CFrame.p
	-- 				end);

	-- 				GetDistance = LPH_NO_VIRTUALIZE(function(Data)
	-- 					return Data.Object.PrimaryPart and math.floor((Camera.CFrame.p - Data.Object.PrimaryPart.CFrame.p).Magnitude);
	-- 				end);

	-- 				Validate    = LPH_NO_VIRTUALIZE(function(Data)
	-- 					return true
	-- 				end);

	-- 			});
	-- 		end;

	-- 		if BodyBag then
	-- 			EntityClass.Misc.Functions.AddListener({
	-- 				Parent = BodyBag,
	-- 				ClassName = "Model",
	-- 				Name = "Body Bag",
	-- 				Listener = "BodyBagListener",
	-- 				Flag = "BodyBags",
	-- 				GetName = LPH_NO_VIRTUALIZE(function(Data)
	-- 					local Name = Data.Object.Name;
	-- 					local OwnerName = Data.Object:GetAttribute("OwnerName");

	-- 					local FixedName = Name .. " - "..OwnerName
	-- 					return FixedName
	-- 				end);

	-- 				GetPosition = LPH_NO_VIRTUALIZE(function(Data)
	-- 					return Data.Object.PrimaryPart and Data.Object.PrimaryPart.CFrame.p
	-- 				end);

	-- 				GetDistance = LPH_NO_VIRTUALIZE(function(Data)
	-- 					return Data.Object.PrimaryPart and math.floor((Camera.CFrame.p - Data.Object.PrimaryPart.CFrame.p).Magnitude);
	-- 				end);

	-- 				Validate    = LPH_NO_VIRTUALIZE(function(Data)
	-- 					return true
	-- 				end);
	-- 			});
	-- 		end;
	-- 	end;
	-- 	--
	-- 	if Sleeper then
	-- 		EntityClass.Misc.Functions.AddListener({
	-- 			Parent = Sleeper,
	-- 			ClassName = "Model",
	-- 			Listener = "SleeperListener",
	-- 			Flag = "Sleepers",
	-- 			GetName = LPH_NO_VIRTUALIZE(function(Data)
	-- 				local Name = Data.Object.Name;
	-- 				local OwnerName = "Owner";
	-- 				local NameTag = Data.Object:FindFirstChild("NameTag");
	-- 				local Label = NameTag and NameTag:FindFirstChild("Label");
	-- 				OwnerName = Label and Label.Text or OwnerName;

	-- 				local FixedName = Name .. " - "..OwnerName
	-- 				return FixedName
	-- 			end);

	-- 			GetPosition = LPH_NO_VIRTUALIZE(function(Data)
	-- 				return Data.Object.PrimaryPart and Data.Object.PrimaryPart.CFrame.p
	-- 			end);

	-- 			GetDistance = LPH_NO_VIRTUALIZE(function(Data)
	-- 				return Data.Object.PrimaryPart and math.floor((Camera.CFrame.p - Data.Object.PrimaryPart.CFrame.p).Magnitude);
	-- 			end);

	-- 			Validate    = LPH_NO_VIRTUALIZE(function(Data)
	-- 				return true
	-- 			end);
	-- 		});
	-- 	end;
	-- end;

	-- if Plants then
	-- 	EntityClass.Misc.Functions.AddListener({
	-- 		Parent = Plants,
	-- 		Name = "Wool Plant",
	-- 		Listener = "WoolListener",
	-- 		Flag = "WoolPlants",
	-- 		GetName = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return "Cloth Plant"
	-- 		end);

	-- 		GetPosition = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return Data.Object.PrimaryPart and Data.Object.PrimaryPart.CFrame.p
	-- 		end);

	-- 		GetDistance = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return Data.Object.PrimaryPart and math.floor((Camera.CFrame.p - Data.Object.PrimaryPart.CFrame.p).Magnitude);
	-- 		end);

	-- 		Validate    = LPH_NO_VIRTUALIZE(function(Data)
	-- 			return true
	-- 		end);
	-- 	});

	-- end;
	--

	--// Camera
	Camera:GetPropertyChangedSignal("FieldOfView"):Connect(LPH_NO_VIRTUALIZE(function()
		if flags.Zoom and flags["Zoom Activation"].Toggled then
			Camera.FieldOfView = flags.ZoomFOV
			return
		end;

		if flags.ChangeFOV then
			Camera.FieldOfView = flags.CustomFOV
		end;
	end));
	--

	--// Viewmodel
	local VFX = workspace:FindFirstChild("VFX")
	local VMs = VFX and VFX:FindFirstChild("VMs");

	if VMs then
		VMs.ChildAdded:Connect(LPH_NO_VIRTUALIZE(function(Viewmodel)
			task.wait()
			if Viewmodel:IsA("Model") then
				local Arms = Viewmodel:WaitForChild("Arms");
				local Weapon = Viewmodel:WaitForChild("Weapon");
				local Highlight = Viewmodel:WaitForChild("Highlight", 1);

				if Arms and Weapon then
					if flags.ViewmodelSandbox then
						if Highlight and flags.VMHighlight then
							Highlight.FillColor = flags.VMFillColor.Color;
							Highlight.FillTransparency = flags.VMFillColor.Transparency;

							Highlight.OutlineColor = flags.VMOutlineColor.Color;
							Highlight.OutlineTransparency = flags.VMOutlineColor.Transparency;
						end;

						for _, Part in Arms:GetDescendants() do
							if Part:IsA("MeshPart") then
								if (Part.Name == "Sleeve" or Part.Name == "Armor")  and flags.ShirtChams then
									Part.Material = flags.ShirtMaterial;
									Part.Color = flags.ShirtColor.Color;
									Part.Transparency = flags.ShirtColor.Transparency;
									Part.Reflectance = flags.ShirtReflectance
								end;

								if (Part.Name == "Sleeve" or Part.Name == "Armor") and flags.RemoveClothing then
									Part.Transparency = 1;
								end;

								if (Part.Name == "Glove" or Part.Name == "Wrap") and flags.GloveChams then
									Part.Material = flags.GloveMaterial;
									Part.Color = flags.GloveColor.Color;
									Part.Transparency = flags.GloveColor.Transparency;
									Part.Reflectance = flags.GloveReflectance
								end;

								if (Part.Name == "RightArm" or Part.Name == "LeftArm") and flags.ArmChams then
									Part.Material = flags.ArmMaterial;
									Part.Color = flags.ArmColor.Color;
									Part.Transparency = flags.ArmColor.Transparency;
									Part.Reflectance = flags.ArmReflectance
								end;

								if Part.Material == Enum.Material.SmoothPlastic or Part.Material == Enum.Material.Glass or Part.Material == Enum.Material.Neon then
									Part.TextureID = "";
								end;

								if Part.Material == Enum.Material.ForceField then
									Part.TextureID = "rbxassetid://5843010904";
								end;
							end;
						end;

						if flags.ItemChams then
							for _, Part in Weapon:GetDescendants() do
								if Part and Part:IsA("MeshPart") and Part.Transparency ~= 1 then
									if Weapon:FindFirstChild("Attachments") then
										if Part:IsDescendantOf(Weapon:FindFirstChild("Attachments")) then
											if not flags.IgnoreAttachments then
												Part.Material = flags.VMItemMaterial;
												Part.Color = flags.VMItemColor.Color;
												Part.Transparency = flags.VMItemColor.Transparency;
												-- Part.Reflectance = flags.ItemReflectance
											end;
										else
											-- Part.Reflectance = flags.ItemReflectance
											Part.Material = flags.VMItemMaterial;
											Part.Color = flags.VMItemColor.Color;
											Part.Transparency = flags.VMItemColor.Transparency;
										end;
									else
										-- Part.Reflectance = flags.ItemReflectance
										Part.Material = flags.VMItemMaterial;
										Part.Color = flags.VMItemColor.Color;
										Part.Transparency = flags.VMItemColor.Transparency;
									end;

									if Part.Material == Enum.Material.SmoothPlastic or Part.Material == Enum.Material.Glass or Part.Material == Enum.Material.Neon then
										Part.TextureID = "";
									end;

									if Part.Material == Enum.Material.ForceField then
										Part.TextureID = "rbxassetid://5843010904";
									end;
								end;
							end;
						end;
					end;

					if flags.ThirdPerson and flags["Third Person Activation"].Toggled then
						for Index, Part in Viewmodel:GetDescendants() do
							if Part:IsA("MeshPart") or Part:IsA("Part") then
								if Part.Transparency ~= 1 then
									Part:SetAttribute("OriginalTransparency", Part.Transparency)
								end;
								Part.Transparency = 1;
							end;
						end;
					end;
				end;
			end;
		end));
	end;
	--

	--// World
	local TouchCollisions = {};
	local DamageParts = {};
	local FireParts = {};
	local XRayParts = {};
	local NoclipParts = {};
	local AllowedBuildings = {
		"Wall",
		"Half Wall",
		"Low Wall",
		"Doorway",
		"Window",
		"Foundation",
		"Floor",
		"Triangle Floor",
		"Wall Frame",
		"Floor Frame",
		"Triangle Floor Frame",
		"L-Shaped Stairs",
		"U-Shaped Stairs",
		"Foundation Steps",
		"Foundation",
		"Triangle Foundation"
	};

	local BGrade = {
		["Wood"] = 1,
		["Stone"] = 2,
		["Metal"] = 3,
		["Steel"] = 4,
	};

	if Bases then
		LPH_NO_VIRTUALIZE(function()
			for _, Value in Bases:GetDescendants() do
				local Value_Name = Value.Name
				local Value_Parent = Value.Parent
				if not Value_Parent then continue end

				if Value:IsA("MeshPart") and Value.Name == "Detail" then
					if Value_Parent and table.find(AllowedBuildings, Value_Parent.Name) then
						insert(XRayParts, Value)
					end;
				end;

				if Value_Name == "TouchCollision" and Value_Parent.Name == "Shotgun Turret" then
					insert(TouchCollisions, Value)
				end;

				if Value_Name == "DamagePart" then
					insert(DamageParts, Value);
				end;

				if Value:IsA('BasePart') and Value_Name == 'Collision' and Value_Parent.Name == 'FirePart' then
					insert(FireParts, Value)
				end;
			end;
			for _, Part in workspace.RocketFactoryPinkCardInvisWalls:GetChildren() do
				insert(NoclipParts, Part)
				Part.CanCollide = not flags.CardsNoclip
			end
			for _, Part in workspace.Monuments:GetDescendants() do
				if Part:IsA("MeshPart") and Part.Name:find('FallenShippingContainer') then
					insert(NoclipParts, Part)
					Part.CanCollide = not flags.ShippingCrateNoclip
				end
			end
		end)();
		workspace.Monuments.DescendantAdded:Connect(LPH_NO_VIRTUALIZE(function(Part)
			if Part:IsA("MeshPart") and Part.Name:find('FallenShippingContainer') then
				insert(NoclipParts, Part)
				Part.CanCollide = not flags.ShippingCrateNoclip
			end
		end))
		workspace.RocketFactoryPinkCardInvisWalls.ChildAdded:Connect(LPH_NO_VIRTUALIZE(function(Part)
			insert(NoclipParts, Part)
			Part.CanCollide = not flags.CardsNoclip
		end))

		Bases.DescendantAdded:Connect(LPH_NO_VIRTUALIZE(function(Value)
			if not Value then return end
			if Value.ClassName == 'Model' and Client.Character and Client.Character:FindFirstChild("Blueprint") and table.find(AllowedBuildings, Value.Name) and flags.AutoUpgrade then
				task.spawn(function()
					if not Globals.BuildingNetworkPointer then return end
					if not Value.PrimaryPart then
						local StartTime = tick()
						repeat
							task.wait()
						until Value.PrimaryPart or tick() - StartTime > 2
					end

					local Main = Value.PrimaryPart;
					if Main and (Main.CFrame.p - Camera.CFrame.p).Magnitude < flags.AutoUpgradeDistance then
						local BuildingGrade = BGrade[flags.UpgradeMaterial];
						if (not BuildingGrade) then
								return;
						end;

						-- '\223\155\187BG2\179\190\204\146\219\194<\001c\152\005\141:?';
						-- 'NM\182\001\154\155j\149\231\163\004\179F\180\232\247\208\a\221\217';

						-- 'NM\182\1\154\155j\149\231\163\4\179F\180\232\247\208\7\221\217'

						Globals.BuildingNetworkPointer(
							"Fire",
							"NM\182\1\154\155j\149\231\163\4\179F\180\232\247\208\7\221\217",
							"\223\155\187BG2\179\190\204\146\219\194<\1c\152\5\141:?",
							Value,
							BuildingGrade
						);
					end;
				end);
			end;

			--task.wait(0.5);
			local Value_Name = Value.Name
			local Value_Parent = Value.Parent
			if not Value_Parent then return end
			local Value_Parent_Name = Value_Parent.Name

			if Value_Name == 'Collision' and Value_Parent_Name == 'FirePart' then
				insert(FireParts, Value)
				Value.CanTouch = not flags.DisableFireParts
			end;

			--task.wait(4)
			if Value:IsA("MeshPart") and Value_Name == "Detail" then
				if Value.Parent and table.find(AllowedBuildings, Value_Parent_Name) then
					insert(XRayParts, Value)

					if flags.XRay and flags["XRay Activation"].Toggled then
						Value.Transparency = flags.XRayTransparency
					end;
				end;
			end;

			if Value_Name == "TouchCollision" and Value_Parent_Name == "Shotgun Turret"  then
				insert(TouchCollisions, Value)
				Value.CanTouch = not flags.DisableTurrets
			end;

			if Value_Name == "DamagePart" then
				insert(DamageParts, Value);
				Value.CanTouch = not flags.DisableDamageParts
			end;

		end));
	end;

	Globals.TouchCollisions = TouchCollisions;
	Globals.DamageParts = DamageParts;
	Globals.FireParts = FireParts
	Globals.XRayParts = XRayParts
	Globals.NoclipParts = NoclipParts
	--
end)()

Lighting:GetPropertyChangedSignal("Brightness"):Connect(LPH_NO_VIRTUALIZE(function()
	if flags.Fullbright then
		Lighting.Brightness = flags.Brightness;
	end;
end));

Lighting:GetPropertyChangedSignal("Ambient"):Connect(LPH_NO_VIRTUALIZE(function()
	if flags.Ambient then
		Lighting.Ambient = flags.AmbientColor.Color
	end
end))

Lighting:GetPropertyChangedSignal("OutdoorAmbient"):Connect(LPH_NO_VIRTUALIZE(function()
	if flags.Ambient then
		Lighting.OutdoorAmbient = flags["AmbientColor"].Color
	end
end));

local Terrain = workspace.Terrain;
local Clouds = Terrain:FindFirstChild("Clouds")
local Atmosphere = Lighting:FindFirstChild("Atmosphere");

if Clouds then
	Clouds:GetPropertyChangedSignal("Density"):Connect(LPH_NO_VIRTUALIZE(function()
		if flags.ChangeCloudDensity then
			Clouds.Density = flags.CloudDensity;
		end;
	end))

	Clouds:GetPropertyChangedSignal("Cover"):Connect(LPH_NO_VIRTUALIZE(function()
		if flags.ChangeCloudCover then
			Clouds.Cover = flags.CloudCover;
		end;
	end))
	Clouds:GetPropertyChangedSignal("Color"):Connect(LPH_NO_VIRTUALIZE(function()
		if flags.ChangeCloudColor then
			Clouds.Color = flags.CloudColor.Color;
		end;
	end));
end;

if Atmosphere then
	Atmosphere:GetPropertyChangedSignal("Density"):Connect(LPH_NO_VIRTUALIZE(function()
		if flags.ChangeFogDensity then
			Atmosphere.Density = flags.FogDensity
		end;
	end));

	Atmosphere:GetPropertyChangedSignal("Color"):Connect(LPH_NO_VIRTUALIZE(function()
		if flags.ChangeFogColor then
			Atmosphere.Color = flags.FogColor.Color
		end;
	end));

	Atmosphere:GetPropertyChangedSignal("Decay"):Connect(LPH_NO_VIRTUALIZE(function()
		if flags.ChangeFogDecay then
			Atmosphere.Decay = flags.FogDecay.Color
		end;
	end));

	Atmosphere:GetPropertyChangedSignal("Haze"):Connect(LPH_NO_VIRTUALIZE(function()
		if flags.ChangeFogHaze then
			Atmosphere.Haze = flags.FogHaze
		end;
	end));

	Atmosphere:GetPropertyChangedSignal("Glare"):Connect(LPH_NO_VIRTUALIZE(function()
		if flags.ChangeFogGlare then
			Atmosphere.Glare = flags.FogGlare
		end;
	end));
end;

--#endregion Connections

EntityClass.LastTarget = EntityClass.LastTarget or nil
EntityClass.LastArmorData = EntityClass.LastArmorData or {}

local reloadGun = LPH_JIT_MAX(function()
	if not Client or not Globals.ClientCharacter or not Globals.ClientCharacter:FindFirstChild("ViewmodelController") then return end
	local ViewmodelController = Globals.ClientCharacter.ViewmodelController
	if not ViewmodelController then return end
	if not Globals.VMNetworkPointer then return end
	if not Globals.ClientCharacter then Globals.ClientCharacter = Client.Character end
	if not Globals.ClientCharacter then return end
	if not Globals.ClientCharacter:FindFirstChild("InventoryController") then return end
	local inv = Globals.ClientCharacter.InventoryController.Fetch:Invoke()
	if not inv or not inv.Toolbar then return end
	local equipped = inv.Toolbar[ViewmodelController:GetAttribute("Equipped")]
	if not equipped or equipped == 0 then return end

	local gun = Globals.ItemsModule[equipped.ID]
	local ammoType = gun and gun.AmmoType
	if not ammoType then return end

	local ammoId = "None"
	for _, containerName in {"Inventory", "Toolbar"} do
		for _, item in inv[containerName] do
			if item ~= 0 and item.Amount > 0 then
				local def = Globals.ItemsModule[item.ID]
				if def.Type:find("Ammo") and def.AmmoType == ammoType then
					ammoId = item.ID
					break
				end
			end
		end
		if ammoId ~= "None" then break end
	end

	Globals.VMNetworkPointer(
		"Fire",
		"d\147e\001R\169#o\249,9\133\153`B4q^W\006",
		"\197s5m:\246\237\135\220Hr\235\001\239\214\\\209\212\219\219",
		workspace:GetServerTimeNow(),
		ammoId
	)
end)

local meleeHit = LPH_JIT_MAX(function(attackCFrame, hitInstance, weaponName)
	local ServerTime = workspace:GetServerTimeNow();
	local Seed = ServerTime * 10000
	local RoundedSeed = math.round(Seed)
	local RandomCode1 = Random.new(RoundedSeed):NextInteger(1, 1000000000)
	local RandomCode2 = Random.new(RoundedSeed):NextInteger(1, 10000000000)

	local attackOrigin = attackCFrame.Position;

	local hitCharacter = hitInstance.Parent;

	local Params = RaycastParams.new();
	Params.FilterType = Enum.RaycastFilterType.Include;
	Params.FilterDescendantsInstances = { hitCharacter };

	local RaycastResult =  workspace:Raycast(attackOrigin, hitInstance.Position - attackOrigin, Params);
	if (not RaycastResult) then
		return;
	end;

	Globals.VMNetworkPointer(
		'Fire',
		'd\147e\001R\169#o\249,9\133\153`B4q^W\006',
		'#\250)\215\028\001U\143\237}\154\218\231Cl-\015H\001\147',
		ServerTime,
		weaponName
	);

	task.wait();

	local hitInfo = {
		[1] = RandomCode2;
		[2] = RandomCode1;
		[3] = RaycastResult.Material.Name;
		[4] = RaycastResult.Normal;
		[5] = hitInstance.CFrame:PointToObjectSpace(RaycastResult.Position);
		[6] = hitInstance;
		[7] = CFrame.new( attackOrigin, hitInstance.Position );
		[8] = 3;
	};
	Globals.Killauraing = true
	Globals.VMNetworkPointer(
		'Fire',
		'd\147e\001R\169#o\249,9\133\153`B4q^W\006',
		'\160\029\229\248\031\016pJ\140]\137-\250\171Z_\001\135\223#',
		unpack(hitInfo)
	);
end);

local LastArmorTick = tick();
local LastSwing = tick();

local function _asset(v)
	local obj_type = typeof(v)

	if obj_type == "number" then return "rbxassetid://"..v end
	if obj_type == "string" then
		if v:find("^rbxassetid://") or v:find("^https?://") then return v end
		local id = v:match("%d+"); return id and ("rbxassetid://"..id) or v
	end
	if obj_type == "Instance" and v:IsA("ImageLabel") then return v.Image end
	if obj_type == "table" and v.Image ~= nil then return _asset(v.Image) end

	return "rbxassetid://0"
end

local function make_icon(parent, image)
	local icon = Instance.new("Frame")
	icon.AnchorPoint = Vector2.new(0.5, 0.5)
	icon.BackgroundColor3 = Color3.new(0.0392157, 0.0392157, 0.0392157)
	icon.BorderSizePixel = 0
	icon.Size = UDim2.new(0, 50, 0, 50)
	icon.Name = "icon"
	icon.Parent = parent

	local f1 = Instance.new("Frame")
	f1.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	f1.BorderSizePixel = 0
	f1.Position = UDim2.new(0, 1, 0, 1)
	f1.Size = UDim2.new(1, -2, 1, -2)
	f1.Parent = icon

	local f2 = Instance.new("Frame")
	f2.BackgroundColor3 = Color3.new(1, 1, 1)
	f2.BorderSizePixel = 0
	f2.Position = UDim2.new(0, 1, 0, 1)
	f2.Size = UDim2.new(1, -2, 1, -2)
	f2.Parent = f1

	local img = Instance.new("ImageLabel")
	img.Image = _asset(image)
	img.BackgroundTransparency = 1
	img.BorderSizePixel = 0
	img.Size = UDim2.new(1, 0, 1, 0)
	img.Parent = f2

	local grad = Instance.new("UIGradient")
	grad.Color = ColorSequence.new(Color3.new(0.117647, 0.117647, 0.117647), Color3.new(0.0784314, 0.0784314, 0.0784314))
	grad.Parent = f2

	return icon
end

local measure = LPH_NO_VIRTUALIZE(function(container)
	local n, first = 0, nil
	for _, c in container:GetChildren() do
		if c:IsA("Frame") and c.Name == "icon" then
			n += 1
			first = first or c
		end
	end
	local w = first and first.Size.X.Offset or 50
	local h = first and first.Size.Y.Offset or 50
	return n, w, h
end)

local bogus = {}
bogus.__index = bogus
local recompute = LPH_NO_VIRTUALIZE(function(self)
	if not self then
		return
	end

	local container = self.container
	local root_frame = self.rootFrame

	if not (container and root_frame) then
		return
	end

	local layout = self.containerList or container:FindFirstChildOfClass("UIListLayout")
	local n, w, h = measure(container)
	local pad = (layout and layout.Padding and layout.Padding.Offset) or 0
	if self.mode == "vertical" then
		local total = n > 0 and (n * h + math_max(0, n - 1) * pad) or 0
		if container.Size.Y.Scale == 0 then
			container.Size = UDim2.new(container.Size.X.Scale, container.Size.X.Offset, 0, total)
		end
		if root_frame.Size.Y.Scale == 0 then
			root_frame.Size = UDim2.new(root_frame.Size.X.Scale, root_frame.Size.X.Offset, 0, total + 20)
		end
	else
		local total = n > 0 and (n * w + math_max(0, n - 1) * pad) or 0
		if container.Size.X.Scale == 0 then
			container.Size = UDim2.new(0, total, container.Size.Y.Scale, container.Size.Y.Offset > 0 and container.Size.Y.Offset or h)
		end
		if container.AnchorPoint == Vector2.new(0.5, 0.5) then
			container.Position = UDim2.new(0.5, 0, 0.5, 0)
		end
		if root_frame.Size.X.Scale == 0 then
			root_frame.Size = UDim2.new(0, total + 40, root_frame.Size.Y.Scale, root_frame.Size.Y.Offset)
		end
	end
end)

bogus.new = LPH_NO_VIRTUALIZE(function(container, root, containerList, mode)
	local self = setmetatable({}, bogus)
	self.container = container
	self.rootFrame = root
	self.containerList = containerList or container:FindFirstChildOfClass("UIListLayout")
	self.mode = (mode == "vertical") and "vertical" or "horizontal"
	self._added = container.ChildAdded:Connect(function() recompute(self) end)
	self._removed = container.ChildRemoved:Connect(function() recompute(self) end)
	recompute(self)
	return self
end)

bogus.Add = LPH_NO_VIRTUALIZE(function(self, image)
	make_icon(self.container, image)
	recompute(self)
end)

bogus.Set = LPH_NO_VIRTUALIZE(function(self, images)
	self:Reset()
	for _, img in images do
		self:Add(img)
	end
end)

bogus.Reset = LPH_NO_VIRTUALIZE(function(self)
	for _, c in self.container:GetChildren() do
		if c:IsA("Frame") and c.Name == "icon" then c:Destroy() end
	end
	recompute(self)
end)

bogus.SetVisibility = LPH_NO_VIRTUALIZE(function(self, b)
	self.rootFrame.Visible = not not b
end)

local bar; do
	local sgui = Instance.new("ScreenGui")
	sgui.Enabled = true
	sgui.Parent = CoreGui
	sgui.Name = ""

	local frame = Instance.new("Frame")
	frame.AnchorPoint = Vector2.new(0.5, 0.15)
	frame.BackgroundColor3 = Color3.new(0.0392157, 0.0392157, 0.0392157)
	frame.BorderSizePixel = 0
	frame.Position = UDim2.new(0.5, 0, 0.15, 0)
	frame.Size = UDim2.new(0, 305, 0, 110)
	frame.Visible = true
	frame.Active = true
	frame.Draggable = true
	frame.Parent = sgui
	Instances:draggify(frame)

	local f2 = Instances:Create("Frame", {
		BackgroundColor3 = Themes.Preset.Accent,
		BorderSizePixel = 0,
		Position = UDim2.new(0, 1, 0, 1),
		Size = UDim2.new(1, -2, 1, -2),
		Parent = frame
	})
	f2:AddToTheme({BackgroundColor3 = 'Accent'})

	local f3 = Instance.new("Frame")
	f3.BackgroundColor3 = Color3.new(0.117647, 0.117647, 0.117647)
	f3.BorderSizePixel = 0
	f3.Position = UDim2.new(0, 1, 0, 1)
	f3.Size = UDim2.new(1, -2, 1, -2)
	f3.Parent = f2.Instance

	local f4 = Instance.new("Frame")
	f4.BackgroundTransparency = 1
	f4.BorderSizePixel = 0
	f4.Position = UDim2.new(0, 1, 0, 2)
	f4.Size = UDim2.new(1, -2, 1, -4)
	f4.Parent = f3

	local uipadding = Instance.new("UIPadding")
	uipadding.PaddingLeft = UDim.new(0, 6)
	uipadding.PaddingBottom = UDim.new(0, 6)
	uipadding.Parent = f4

	local holder = Instance.new("Frame")
	holder.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	holder.BorderSizePixel = 0
	holder.Position = UDim2.new(0, -3, 0, 16)
	holder.Size = UDim2.new(1, 0, 1, -18)
	holder.Parent = f4

	local f5 = Instance.new("Frame")
	f5.BackgroundColor3 = Color3.new(0.0392157, 0.0392157, 0.0392157)
	f5.BorderSizePixel = 0
	f5.Position = UDim2.new(0, 1, 0, 1)
	f5.Size = UDim2.new(1, -2, 1, -2)
	f5.Parent = holder

	local f6 = Instance.new("Frame")
	f6.BackgroundColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314)
	f6.BorderSizePixel = 0
	f6.Position = UDim2.new(0, 1, 0, 1)
	f6.Size = UDim2.new(1, -2, 1, -2)
	f6.Parent = f5

	local uipadding2 = Instance.new("UIPadding")
	uipadding2.PaddingLeft = UDim.new(0, 4)
	uipadding2.PaddingTop = UDim.new(0, 4)
	uipadding2.Parent = f6

	local f7 = Instance.new("Frame")
	f7.BackgroundColor3 = Color3.new(0.0392157, 0.0392157, 0.0392157)
	f7.BorderSizePixel = 0
	f7.Size = UDim2.new(1, -4, 1, -4)
	f7.Parent = f6

	local f8 = Instance.new("Frame")
	f8.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	f8.BorderSizePixel = 0
	f8.Position = UDim2.new(0, 1, 0, 1)
	f8.Size = UDim2.new(1, -2, 1, -2)
	f8.Parent = f7

	local f9 = Instance.new("Frame")
	f9.BackgroundColor3 = Color3.new(1, 1, 1)
	f9.BorderSizePixel = 0
	f9.Position = UDim2.new(0, 1, 0, 1)
	f9.Size = UDim2.new(1, -2, 1, -2)
	f9.Parent = f8

	local uigradient = Instance.new("UIGradient")
	uigradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.new(0.117647, 0.117647, 0.117647)), ColorSequenceKeypoint.new(1, Color3.new(0.0784314, 0.0784314, 0.0784314))})
	uigradient.Parent = f9

	local uipadding3 = Instance.new("UIPadding")
	uipadding3.PaddingBottom = UDim.new(0, 3)
	uipadding3.PaddingLeft = UDim.new(0, 4)
	uipadding3.PaddingRight = UDim.new(0, 3)
	uipadding3.PaddingTop = UDim.new(0, 4)
	uipadding3.Parent = f9

	local strip = Instance.new("Frame")
	strip.BackgroundTransparency = 1
	strip.BorderSizePixel = 0
	strip.AnchorPoint = Vector2.new(0.5, 0.5)
	strip.Position = UDim2.new(0.5, 0, 0.5, 0)
	strip.Size = UDim2.new(0, 0, 0, 50)
	strip.Name = "Strip"
	strip.Parent = f9

	local stripList = Instance.new("UIListLayout")
	stripList.FillDirection = Enum.FillDirection.Horizontal
	stripList.HorizontalAlignment = Enum.HorizontalAlignment.Left
	stripList.VerticalAlignment = Enum.VerticalAlignment.Center
	stripList.Padding = UDim.new(0, 2)
	stripList.SortOrder = Enum.SortOrder.LayoutOrder
	stripList.Parent = strip

	local top = Instance.new("Frame")
	top.BackgroundTransparency = 1
	top.BorderSizePixel = 0
	top.Size = UDim2.new(1, -4, 0, 20)
	top.Name = "top"
	top.Parent = f4

	local text_label = Instance.new("TextLabel")
	text_label.FontFace = Library.Font
	text_label.Text = "Equipment"
	text_label.TextColor3 = Color3.new(0.705882, 0.705882, 0.705882)
	text_label.TextSize = 12
	text_label.TextXAlignment = Enum.TextXAlignment.Left
	text_label.BackgroundTransparency = 1
	text_label.BorderSizePixel = 0
	text_label.Size = UDim2.new(0.5, 0, 1, 0)
	text_label.Parent = top

	bar = bogus.new(strip, frame, stripList, "horizontal")
end

local weapons do
	local sgui = Instance.new("ScreenGui")
	sgui.Enabled = true
	sgui.Parent = CoreGui
	sgui.Name = ""

	local frame = Instance.new("Frame")
	frame.AnchorPoint = Vector2.new(0.5, 0.4000000059604645)
	frame.BackgroundColor3 = Color3.new(0.0392157, 0.0392157, 0.0392157)
	frame.BorderColor3 = Color3.new(0, 0, 0)
	frame.BorderSizePixel = 0
	frame.Position = UDim2.new(0.9, 0, 0.4, 0)
	frame.Size = UDim2.new(0, 110, 0, 250)
	frame.Visible = true
	frame.Active = true
	frame.Draggable = true
	frame.Parent = sgui
	Instances:draggify(frame)

	local frame_2 = Instance.new("Frame")
	frame_2.BackgroundColor3 = Color3.new(0.376471, 0.470588, 0.745098)
	frame_2.BorderColor3 = Color3.new(0, 0, 0)
	frame_2.BorderSizePixel = 0
	frame_2.Position = UDim2.new(0, 1, 0, 1)
	frame_2.Size = UDim2.new(1, -2, 1, -2)
	frame_2.Visible = true
	frame_2.Parent = frame

	RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function()
		frame_2.BackgroundColor3 = Themes.Preset.Accent
	end))

	local frame_3 = Instance.new("Frame")
	frame_3.BackgroundColor3 = Color3.new(0.117647, 0.117647, 0.117647)
	frame_3.BorderColor3 = Color3.new(0, 0, 0)
	frame_3.BorderSizePixel = 0
	frame_3.Position = UDim2.new(0, 1, 0, 1)
	frame_3.Size = UDim2.new(1, -2, 1, -2)
	frame_3.Visible = true
	frame_3.Parent = frame_2

	local frame_4 = Instance.new("Frame")
	frame_4.BackgroundColor3 = Color3.new(1, 1, 1)
	frame_4.BackgroundTransparency = 1
	frame_4.BorderColor3 = Color3.new(0, 0, 0)
	frame_4.BorderSizePixel = 0
	frame_4.Position = UDim2.new(0, 1, 0, 2)
	frame_4.Size = UDim2.new(1, -2, 1, -4)
	frame_4.Visible = true
	frame_4.Parent = frame_3

	local uipadding = Instance.new("UIPadding")
	uipadding.PaddingLeft = UDim.new(0, 6)
	uipadding.PaddingBottom = UDim.new(0, 4)
	uipadding.Parent = frame_4

	local holder = Instance.new("Frame")
	holder.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	holder.BorderColor3 = Color3.new(0, 0, 0)
	holder.BorderSizePixel = 0
	holder.Position = UDim2.new(0, -3, 0, 16)
	holder.Size = UDim2.new(1, 0, 1, -18)
	holder.Visible = true
	holder.Name = "holder"
	holder.Parent = frame_4

	local frame_5 = Instance.new("Frame")
	frame_5.BackgroundColor3 = Color3.new(0.0392157, 0.0392157, 0.0392157)
	frame_5.BorderColor3 = Color3.new(0, 0, 0)
	frame_5.BorderSizePixel = 0
	frame_5.Position = UDim2.new(0, 1, 0, 1)
	frame_5.Size = UDim2.new(1, -2, 1, -2)
	frame_5.Visible = true
	frame_5.Parent = holder

	local frame_6 = Instance.new("Frame")
	frame_6.BackgroundColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314)
	frame_6.BorderColor3 = Color3.new(0, 0, 0)
	frame_6.BorderSizePixel = 0
	frame_6.Position = UDim2.new(0, 1, 0, 1)
	frame_6.Size = UDim2.new(1, -2, 1, -2)
	frame_6.Visible = true
	frame_6.Parent = frame_5

	local uipadding_2 = Instance.new("UIPadding")
	uipadding_2.PaddingLeft = UDim.new(0, 4)
	uipadding_2.PaddingTop = UDim.new(0, 4)
	uipadding_2.Parent = frame_6

	local frame_7 = Instance.new("Frame")
	frame_7.BackgroundColor3 = Color3.new(0.0392157, 0.0392157, 0.0392157)
	frame_7.BorderColor3 = Color3.new(0, 0, 0)
	frame_7.BorderSizePixel = 0
	frame_7.Size = UDim2.new(1, -4, 1, -4)
	frame_7.Visible = true
	frame_7.Parent = frame_6

	local frame_8 = Instance.new("Frame")
	frame_8.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	frame_8.BorderColor3 = Color3.new(0, 0, 0)
	frame_8.BorderSizePixel = 0
	frame_8.Position = UDim2.new(0, 1, 0, 1)
	frame_8.Size = UDim2.new(1, -2, 1, -2)
	frame_8.Visible = true
	frame_8.Parent = frame_7

	local frame_9 = Instance.new("Frame")
	frame_9.BackgroundColor3 = Color3.new(1, 1, 1)
	frame_9.BorderColor3 = Color3.new(0, 0, 0)
	frame_9.BorderSizePixel = 0
	frame_9.Position = UDim2.new(0, 1, 0, 1)
	frame_9.Size = UDim2.new(1, -2, 1, -2)
	frame_9.Visible = true
	frame_9.Parent = frame_8

	local uigradient = Instance.new("UIGradient")
	uigradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.new(0.117647, 0.117647, 0.117647)), ColorSequenceKeypoint.new(1, Color3.new(0.0784314, 0.0784314, 0.0784314))})
	uigradient.Parent = frame_9

	local uipadding_3 = Instance.new("UIPadding")
	uipadding_3.PaddingBottom = UDim.new(0, 3)
	uipadding_3.PaddingLeft = UDim.new(0, 4)
	uipadding_3.PaddingRight = UDim.new(0, 3)
	uipadding_3.PaddingTop = UDim.new(0, 4)
	uipadding_3.Parent = frame_9

	local frame_10 = Instance.new("Frame")
	frame_10.BackgroundColor3 = Color3.new(1, 1, 1)
	frame_10.BackgroundTransparency = 1
	frame_10.BorderColor3 = Color3.new(0, 0, 0)
	frame_10.BorderSizePixel = 0
	frame_10.Size = UDim2.new(1, 0, 1, 3)
	frame_10.Visible = true
	frame_10.Parent = frame_9

	local uilist_layout = Instance.new("UIListLayout")
	uilist_layout.Padding = UDim.new(0, 4)
	uilist_layout.FillDirection = Enum.FillDirection.Horizontal
	uilist_layout.SortOrder = Enum.SortOrder.LayoutOrder
	uilist_layout.Parent = frame_10

	local uipadding_4 = Instance.new("UIPadding")
	uipadding_4.PaddingBottom = UDim.new(0, 4)
	uipadding_4.Parent = frame_10

	local frame_11 = Instance.new("Frame")
	frame_11.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	frame_11.BorderColor3 = Color3.new(0, 0, 0)
	frame_11.BorderSizePixel = 0
	frame_11.Size = UDim2.new(1, -1, 1, 0)
	frame_11.Visible = true
	frame_11.Parent = frame_10

	local frame_12 = Instance.new("Frame")
	frame_12.BackgroundColor3 = Color3.new(0.0392157, 0.0392157, 0.0392157)
	frame_12.BorderColor3 = Color3.new(0, 0, 0)
	frame_12.BorderSizePixel = 0
	frame_12.Position = UDim2.new(0, 1, 0, 1)
	frame_12.Size = UDim2.new(1, -2, 1, -2)
	frame_12.Visible = true
	frame_12.Parent = frame_11

	local frame_13 = Instance.new("Frame")
	frame_13.BackgroundColor3 = Color3.new(1, 1, 1)
	frame_13.BorderColor3 = Color3.new(0, 0, 0)
	frame_13.BorderSizePixel = 0
	frame_13.Position = UDim2.new(0, 1, 0, 1)
	frame_13.Size = UDim2.new(1, -2, 1, -2)
	frame_13.Visible = true
	frame_13.Parent = frame_12

	local uigradient_2 = Instance.new("UIGradient")
	uigradient_2.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.new(0.117647, 0.117647, 0.117647)), ColorSequenceKeypoint.new(1, Color3.new(0.0784314, 0.0784314, 0.0784314))})
	uigradient_2.Parent = frame_13

	local uilist_layout_2 = Instance.new("UIListLayout")
	uilist_layout_2.Padding = UDim.new(0, 2)
	uilist_layout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uilist_layout_2.SortOrder = Enum.SortOrder.LayoutOrder
	uilist_layout_2.VerticalAlignment = Enum.VerticalAlignment.Center
	uilist_layout_2.Parent = frame_13

	local top = Instance.new("Frame")
	top.BackgroundColor3 = Color3.new(1, 1, 1)
	top.BackgroundTransparency = 1
	top.BorderColor3 = Color3.new(0, 0, 0)
	top.BorderSizePixel = 0
	top.Size = UDim2.new(1, -4, 0, 20)
	top.Visible = true
	top.Name = "top"
	top.Parent = frame_4

	local text_label = Instance.new("TextLabel")
	text_label.FontFace = Library.Font
	text_label.Text = "Hotbar"
	text_label.TextColor3 = Color3.new(0.705882, 0.705882, 0.705882)
	text_label.TextSize = 12
	text_label.TextXAlignment = Enum.TextXAlignment.Left
	text_label.BackgroundColor3 = Color3.new(1, 1, 1)
	text_label.BackgroundTransparency = 1
	text_label.BorderColor3 = Color3.new(0, 0, 0)
	text_label.BorderSizePixel = 0
	text_label.Size = UDim2.new(0.5, 0, 1, 0)
	text_label.Visible = true
	text_label.Parent = top

	local uipadding_5 = Instance.new("UIPadding")
	uipadding_5.PaddingBottom = UDim.new(0, 4)
	uipadding_5.PaddingLeft = UDim.new(0, -2)
	uipadding_5.PaddingTop = UDim.new(0, -4)
	uipadding_5.Parent = text_label

	local uistroke = Instance.new("UIStroke")
	uistroke.LineJoinMode = Enum.LineJoinMode.Miter
	uistroke.Parent = text_label

	uilist_layout_2.FillDirection = Enum.FillDirection.Vertical
	uilist_layout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uilist_layout_2.VerticalAlignment = Enum.VerticalAlignment.Top

	local function AutoY(...)
		for _, f in {...} do
			f.AutomaticSize = Enum.AutomaticSize.Y
			f.Size = UDim2.new(f.Size.X.Scale, f.Size.X.Offset, 0, f.Size.Y.Offset)
		end
	end

	AutoY(frame_13, frame_12, frame_11, frame_10, frame_9, frame_8, frame_7, frame_6, holder, frame)

	weapons = bogus.new(frame_13, frame, uilist_layout_2, "vertical")
end

bar:SetVisibility(false)
weapons:SetVisibility(false)


local textureToInfoMap = {}
local GunTable = {}
if Globals.ItemsModule then
	for _, gun in next, Globals.ItemsModule do
		if typeof(gun.Image) == 'table' then
			GunTable[gun.Name] = gun.Image
		else
			GunTable[gun.Name] = {['Default'] = gun.Image}
		end
	end

	for _, gunModel in ReplicatedStorage:WaitForChild("VMs"):GetChildren() do
		for _, skinModel in gunModel:GetChildren() do
			local weaponFolder = skinModel:FindFirstChild("Weapon")
			if weaponFolder and weaponFolder:IsA("Folder") then
				for _, part in weaponFolder:GetChildren() do
					local textureId = nil
					pcall(function()
						textureId = part.TextureID
					end)
					if textureId then
						textureToInfoMap[textureId] = {
							gun = gunModel.Name,
							skin = skinModel.Name,
						}
					end
				end
			end
		end
	end
end

local getGun = LPH_NO_VIRTUALIZE(function(character)
	if not character then return 'None', nil end

	local matchCount = {}

	for _, v in character:GetChildren() do
		if not v:IsA('Model') or v.Name == 'Hair' or v.Name == 'HolsterModel' or not v.PrimaryPart then
			continue
		end

		if v:FindFirstChild('Detail') or v:FindFirstChild('Main') or v:FindFirstChild('Handle') or v:FindFirstChild('Attachments') or v:FindFirstChild('ArrowAttach') or v:FindFirstChild('Attach') then
			for _, part2 in v:GetDescendants() do
				local textureId = nil

				pcall(function()
					if part2:IsA("BasePart") and part2.TextureID and part2.TextureID ~= "" then
						textureId = part2.TextureID
					elseif part2:IsA("Decal") or part2:IsA("Texture") then
						textureId = part2.Texture
					end
				end)

				if textureId and textureToInfoMap[textureId] then
					local info = textureToInfoMap[textureId]
					local key = info.gun .. "::" .. info.skin
					matchCount[key] = (matchCount[key] or 0) + 1
				end
			end
		end
	end

	local bestKey, highestCount = nil, 0
	for key, count in matchCount do
		if count > highestCount then
			bestKey, highestCount = key, count
		end
	end

	if bestKey then
		local gun, skin = bestKey:match("^(.-)::(.-)$")
		return gun, GunTable and GunTable[gun] and GunTable[gun][skin] or skin
	end

	return 'None', nil
end)

local getSecondary = LPH_NO_VIRTUALIZE(function(chr)
	if not chr then return 'None', nil end
	if chr:FindFirstChild('HolsterModel') then
		for _, part in chr.HolsterModel:GetChildren() do
			local textureId = nil

			pcall(function()
				textureId = part.TextureID
			end)

			if textureId and textureToInfoMap[textureId] then
				local info = textureToInfoMap[textureId]
				return info.gun, GunTable[info.gun][info.skin]
			end
		end
		return 'None', nil
	end
end)

local GetArmor = LPH_NO_VIRTUALIZE(function(Character)
	local final = {}
	local names = {}
	if not Character then return {} end
	if type(Character) == 'string' then
		return {}
	end
	for _, child in Character:GetChildren() do
		local armorNumber, skinName = child.Name:match('Armor_(%d+)/(.*)')

		if armorNumber then
			local key = tonumber(armorNumber)
			if key then
				local item = Globals.ItemsModule[key]
				if item and item.Type == 'Armor' and not table.find(names, item.Name) then
					local image = ''
					if type(item.Image) == 'table' then
						if skinName and item.Image[skinName] then
							image = item.Image[skinName]
						elseif item.Image.Default then
							image = item.Image.Default
						end
					elseif type(item.Image) == 'string' then
						image = item.Image
					end

					local id = string.match(image or '', '%d+')
					local imageData = ''

					insert(names, item.Name)
					insert(final, {
						['Skin'] = skinName,
						['Name'] = item.Name,
						['Type'] = item.ArmorType,
						['Image'] = id
					})
				end
			end
		end
	end

	return final
end)
local CircleHolders = Instance.new("Model")
CircleHolders.Parent = workspace

local killauracircle; do
	killauracircle = Instance.new("Attachment")
	killauracircle.Visible = false
	killauracircle.Parent = CircleHolders

	local ring = Instance.new("ParticleEmitter")
	ring.Brightness = 2
	ring.Color = ColorSequence.new(Themes.Preset.Accent)
	ring.EmissionDirection = Enum.NormalId.Bottom
	ring.Lifetime = NumberRange.new(1, 1)
	ring.LightEmission = 1
	ring.LockedToPart = true
	ring.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
	ring.Rate = 10
	ring.RotSpeed = NumberRange.new(150, 150)
	ring.Rotation = NumberRange.new(-360, 360)
	ring.ShapePartial = 100
	ring.Size = NumberSequence.new(5)
	ring.Speed = NumberRange.new(0.001, 0.001)
	ring.SpreadAngle = Vector2.new(5, 5)
	ring.Squash = NumberSequence.new(0.01)
	ring.Texture = "rbxassetid://10558425570"
	ring.Name = "Ring"
	ring.Parent = killauracircle
end

local autofarmcircle; do
	autofarmcircle = Instance.new("Attachment")
	autofarmcircle.Visible = false
	autofarmcircle.Parent = CircleHolders

	local ring = Instance.new("ParticleEmitter")
	ring.Brightness = 2
	ring.Color = ColorSequence.new(Themes.Preset.Accent)
	ring.EmissionDirection = Enum.NormalId.Bottom
	ring.Lifetime = NumberRange.new(1, 1)
	ring.LightEmission = 1
	ring.LockedToPart = true
	ring.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
	ring.Rate = 10
	ring.RotSpeed = NumberRange.new(150, 150)
	ring.Rotation = NumberRange.new(-360, 360)
	ring.ShapePartial = 100
	ring.Size = NumberSequence.new(5)
	ring.Speed = NumberRange.new(0.001, 0.001)
	ring.SpreadAngle = Vector2.new(5, 5)
	ring.Squash = NumberSequence.new(0.01)
	ring.Texture = "rbxassetid://10558425570"
	ring.Name = "Ring"
	ring.Parent = autofarmcircle
end

local manipBeam, manipPart0, manipPart1; do
	local function CreateAnchorPart()
		local p = Instance.new("Part")
		p.Name = "Anchor"
		p.Size = Vector3.new(0.0001, 0.0001, 0.0001)
		p.Anchored = true
		p.CanCollide = false
		p.CanQuery = false
		p.Transparency = 1
		p.Position = Vector3.new(0, 0, 0)
		p.Parent = workspace
		return p
	end

	manipPart0 = CreateAnchorPart()
	manipPart1 = CreateAnchorPart()
	local att0 = Instance.new("Attachment", manipPart0)
	local att1 = Instance.new("Attachment", manipPart1)

	manipBeam = Instance.new("Beam")
	manipBeam.Enabled = false
	manipBeam.Attachment0 = att0
	manipBeam.Attachment1 = att1
	manipBeam.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.new(0.0313726, 0, 1)), ColorSequenceKeypoint.new(0.8408305048942566, Color3.new(0.0218739, 0.302768, 0.96438)), ColorSequenceKeypoint.new(1, Color3.new(0, 1, 0.882353))})
	manipBeam.Transparency = NumberSequence.new(0)
	manipBeam.CurveSize0 = 1
	manipBeam.CurveSize1 = 1
	manipBeam.FaceCamera = true
	manipBeam.LightInfluence = 1
	manipBeam.Segments = 1
	manipBeam.Texture = "rbxassetid://12781758219"
	manipBeam.TextureLength = 1
	manipBeam.TextureMode = Enum.TextureMode.Stretch
	manipBeam.TextureSpeed = 2
	manipBeam.Width0 = 0.2
	manipBeam.Width1 = 0.2
	manipBeam.Parent = workspace
end

local compareTables = LPH_NO_VIRTUALIZE(function(t1, t2)
	for k, v in t1 do
		if t2[k] ~= v then
			return false, k, v, t2[k]
		end
	end
	for k, v in t2 do
		if t1[k] ~= v then
			return false, k, t1[k], v
		end
	end
	return true
end)

local last_armor = {}
local last_guns = {}
local lastpos, lasttarg

Globals.RaycastParams = RaycastParams.new()
Globals.RaycastParams.FilterType = Enum.RaycastFilterType.Blacklist
Globals.RaycastParams.FilterDescendantsInstances = {Camera, Globals.ClientCharacter, workspace:FindFirstChild("VFX"), workspace:FindFirstChild("RocketFactoryPinkCardInvisWalls")}

local VISIBLE_PART_NAMES = { "HumanoidRootPart", "RightLowerLeg", "LeftLowerLeg", "RightUpperArm", "LeftUpperArm" }

RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function()
	Globals.RaycastParams.FilterDescendantsInstances = {Camera, Globals.ClientCharacter, workspace:FindFirstChild("VFX"), workspace:FindFirstChild("RocketFactoryPinkCardInvisWalls")}

	local baseRadius = flags.FOVRadius
	local currentFOV = (flags.ChangeFOV and flags.CustomFOV) or 90
	local circleSize = baseRadius * (flags.DynamicFOV and (currentFOV / Camera.FieldOfView) or 1)
	local dynRadius  = circleSize * 0.5

	local LastDistance = dynRadius
	local ClosestTarget, EntityCharacter, EntityData, EntityInstance = nil, nil, nil, nil
	local Visible, Manipulated, Wallbanged, HitScanned, ManipulatedPosition, ManipulatedPart, ManipulatedPlayer = false, false, false, false, nil, nil, nil
	local ScannedPosition, ScannedPart = nil, nil

	local AimbotEnabled = flags.Aimbot
	local ActivationActive = flags["Aimbot Activation"].Toggled
	local AlwaysTarget = flags.AlwaysTarget
	local UseVisibleCheck = flags.VisibleCheck
	local RandomizeHitPart = flags.RandomizeHitPart
	local AimbotPart = flags.AimbotPart
	local HitScanActive = flags.HitScan
	local ManipulationActive = flags.Manipulation
	local WallbangActive = flags.Wallbang
	local DownCheck = flags.DownCheck

	local FOVOutline = Visuals.FOVOutline

	if flags.DynamicFOV then
		Globals:Tween(FOVOutline, TweenInfo.new(0.15, Enum.EasingStyle.Linear), {
			Size = UDim2.new(0, circleSize, 0, circleSize)
		})
	else
		FOVOutline.Size = UDim2.new(0, circleSize, 0, circleSize)
	end

	local ClientRoot = Globals.ClientCharacter and Globals.ClientCharacter:FindFirstChild("HumanoidRootPart")
	if not ClientRoot then return end
	local ClientHead = Globals.ClientCharacter:FindFirstChild("Head")
	if not ClientHead then return end

	local now = tick()

	for Entity, Object in EntityClass.Main.Cache do
		if not Object.Update then
			continue
		end

		local character = Object.Character
		local pointer = Object.Pointer

		if not character or not pointer then
			Object.Character = pointer:IsA('Player') and pointer.Character and pointer.Character or pointer
			Object.CoreInformation = {}
			continue
		end

		if now - Object.LastUpdate > 0.0145 then
			Object.LastUpdate = now;
			local Humanoid = character:FindFirstChildOfClass("Humanoid")
			if Humanoid then
				Object.Humanoid = Humanoid
			end

			if Object.Class == "Player" or Object.Class == "AI" then
				Object.Root = Humanoid and Humanoid.RootPart or character:FindFirstChild("HumanoidRootPart")
			end

			if not Object.Root then
				Object.Root = character:FindFirstChild("RootPart") or character:FindFirstChild("HumanoidRootPart")
			end

			local root = Object.Root

			if (not root) then
				Object.CoreInformation = { Visible = false, OnScreen = false, Root = nil }
			elseif ((Camera.CFrame.Position - root.Position).Magnitude > 2000) then
				Object.CoreInformation = { Visible = false, OnScreen = false, Root = root }
			else
				local Parts = typeof(character) == "Instance" and character:GetChildren() or character

				local Inf = math.huge
				local MinX, MinY, MinZ = Inf, Inf, Inf
				local MaxX, MaxY, MaxZ = -Inf, -Inf, -Inf

				local rootCFrame = root.CFrame

				for _, Part in Parts do
					if Part:IsA("BasePart") then
						local Cf = rootCFrame:ToObjectSpace(Part.CFrame)
						local Sx, Sy, Sz = Part.Size.X, Part.Size.Y, Part.Size.Z
						local X, Y, Z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = Cf:components()

						local Wsx = 0.5 * (math_abs(R00) * Sx + math_abs(R01) * Sy + math_abs(R02) * Sz)
						local Wsy = 0.5 * (math_abs(R10) * Sx + math_abs(R11) * Sy + math_abs(R12) * Sz)
						local Wsz = 0.5 * (math_abs(R20) * Sx + math_abs(R21) * Sy + math_abs(R22) * Sz)

						MinX = math_min(MinX, X - Wsx)
						MinY = math_min(MinY, Y - Wsy)
						MinZ = math_min(MinZ, Z - Wsz)

						MaxX = math_max(MaxX, X + Wsx)
						MaxY = math_max(MaxY, Y + Wsy)
						MaxZ = math_max(MaxZ, Z + Wsz)
					end
				end

				local MinVec = Vector3.new(MinX, MinY, MinZ)
				local MaxVec = Vector3.new(MaxX, MaxY, MaxZ)
				local Middle = (MaxVec + MinVec) / 2
				local cf = rootCFrame - rootCFrame.Position + rootCFrame * Middle
				local size = MaxVec - MinVec

				local half = size * 0.5
				local hx, hy, hz = math_min(half.X, 5), math_min(half.Y, 10), math_min(half.Z, 5)

				local offsets = {
					Vector3.new( hx,  hy,  hz), Vector3.new( hx,  hy, -hz),
					Vector3.new( hx, -hy,  hz), Vector3.new( hx, -hy, -hz),
					Vector3.new(-hx,  hy,  hz), Vector3.new(-hx,  hy, -hz),
					Vector3.new(-hx, -hy,  hz), Vector3.new(-hx, -hy, -hz),
				}

				local on = false
				for i = 1, 8 do
					local _, s = Camera:WorldToViewportPoint(cf * offsets[i])
					if (s) then on = true; break; end
				end

				if (not on) then
					local head = character:FindFirstChild("Head")
					local vis = head and Visuals.IsPartVisible(head) or false
					Object.CoreInformation = { Root = root, RootPosition = root.Position, OnScreen = false, Visible = vis, VisiblePart = vis and head or nil }
				else
					local visPart = nil
					for _, name in VISIBLE_PART_NAMES do
						local p = character:FindFirstChild(name)
						if (p and p:IsA("BasePart") and Visuals.IsPartVisible(p)) then visPart = p; break end
					end

					Object.CoreInformation = {
						Visible = visPart ~= nil,
						VisiblePart = visPart,
						Root = root,
						RootPosition = root.Position,
						OnScreen = on,
					}
				end
			end
			task.spawn(Object.Update)
		end;

		local Core = Object.CoreInformation
		if not flags.IncludeTeam and Globals.isTeam(Entity) then continue end
		-- if not flags.IncludeTeam and Library.playerlist_data[tostring(Entity)] and Library.playerlist_data[tostring(Entity)].priority == "Teammate" then continue end
		if not (Core and Core.Root and Entity ~= Client) then continue end
		if not (Core.OnScreen and not Object.Teammate and AimbotEnabled) then continue end

		local humanoid = character:FindFirstChildOfClass("Humanoid")
		if not humanoid or humanoid.Health <= 0 then continue end
		if DownCheck and humanoid:GetAttribute('Downed') then continue end

		local TargetingFlag = flags["Target" .. Object.ClassType]
		if not (TargetingFlag and (ActivationActive or AlwaysTarget)) then continue end

		local Distance = Visuals.GetDistanceFromCenter(Core.Root)
		if Distance >= LastDistance then continue end

		local TargetPart
		if UseVisibleCheck and Core.Visible then
			TargetPart = Core.VisiblePart
		elseif not UseVisibleCheck then
			TargetPart = character:FindFirstChild(AimbotPart)
		end

		if Core.Visible and RandomizeHitPart then
			local Parts = {}
			for _, Part in character:GetChildren() do
				if Part:IsA("BasePart") and Visuals.IsPartVisible(Part) then
					insert(Parts, Part)
				end
			end
			if #Parts > 0 then
				TargetPart = Parts[math.random(1, #Parts)]
			end
		end

		if character.Name == "BTR" then
			TargetPart = character:FindFirstChild("HumanoidRootPart")
		end

		if TargetPart then
			LastDistance = Distance
			ClosestTarget  = TargetPart
			EntityCharacter = character
			EntityData      = Object
			EntityInstance  = Entity
			Visible         = Core.Visible
		end
	end
	
	if not Visible and ClientHead and ClosestTarget then
		if now - EntityData.LastManipHitScan > 0.1 then
			EntityData.LastManipHitScan = now
			local StartPos = ClientHead.CFrame
			if HitScanActive then
				local VisiblePos3 = EntityClass.Global.GetHitScanPos(StartPos, ClosestTarget)
				if VisiblePos3 then
					HitScanned = true
					ScannedPart = ClosestTarget
					ScannedPosition = VisiblePos3
					ManipulatedPlayer = EntityData.Pointer
				end
			end
			if not HitScanned then
				if WallbangActive then
					local VisiblePos2 = EntityClass.Global.FindVisiblePosition2(StartPos, ClosestTarget)
					if VisiblePos2 then
						Wallbanged = true
						ManipulatedPart = ClosestTarget
						ManipulatedPosition = VisiblePos2
						ManipulatedPlayer = EntityData.Pointer
					end
				end
				if ManipulationActive and not Wallbanged then
					local VisiblePos, HitScanPos = EntityClass.Global.FindVisiblePosition(StartPos, ClosestTarget)
					if VisiblePos then
						Manipulated = true
						ManipulatedPart = ClosestTarget
						ManipulatedPosition = VisiblePos
						ManipulatedPlayer = EntityData.Pointer
						if HitScanPos then
							HitScanned = true
							ScannedPart = ClosestTarget
							ScannedPosition = HitScanPos
						end
					end
				end
			end
			EntityData.LastManipCFG = {
				Manipulated = Manipulated,
				Wallbanged = Wallbanged,
				HitScanned = HitScanned,
				ManipulatedPosition = ManipulatedPosition,
				ManipulatedPart = ManipulatedPart,
				ManipulatedPlayer = ManipulatedPlayer,
				ScannedPosition = ScannedPosition,
				ScannedPart = ScannedPart
			}
		elseif EntityData.LastManipCFG then
			Manipulated = EntityData.LastManipCFG.Manipulated
			Wallbanged = EntityData.LastManipCFG.Wallbanged
			HitScanned = EntityData.LastManipCFG.HitScanned
			ManipulatedPosition = EntityData.LastManipCFG.ManipulatedPosition
			ManipulatedPart = EntityData.LastManipCFG.ManipulatedPart
			ManipulatedPlayer = EntityData.LastManipCFG.ManipulatedPlayer
			ScannedPosition = EntityData.LastManipCFG.ScannedPosition
			ScannedPart = EntityData.LastManipCFG.ScannedPart
		end
	end

	EntityClass.Manipulated = Manipulated
	EntityClass.Wallbanged = Wallbanged
	EntityClass.HitScanned = HitScanned
	EntityClass.ScannedPosition = ScannedPosition
	EntityClass.ScannedPart = ScannedPart
	EntityClass.ManipulatedPart = ManipulatedPart
	EntityClass.ManipulatedPosition = ManipulatedPosition
	EntityClass.ManipulatedPlayer = ManipulatedPlayer
	EntityClass.TargetPart = ClosestTarget
	EntityClass.TargetData = EntityData
	EntityClass.TargetInstance = EntityInstance
	EntityClass.TargetCharacter = EntityCharacter

	local FOVColor = flags.FOVColor

	local targetColor = Color3.new(1, 1, 1)
	local fillAlpha = 0

	if FOVColor then
		targetColor = FOVColor.Color
		fillAlpha = FOVColor.Transparency
	end

	if flags.CopyTargetColorFOV then
		local copy_color
		
		if Manipulated then
			copy_color = flags.ManipColor and flags.ManipColor.Color
		elseif Wallbanged then
			copy_color = flags.WallbangColor and flags.WallbangColor.Color
		elseif EntityClass.TargetData
			and EntityClass.TargetData.CoreInformation
			and EntityClass.TargetData.CoreInformation.Visible then
			copy_color = flags.TargetColor and flags.TargetColor.Color
		elseif HitScanned then
			copy_color = flags.HitScanColor and flags.HitScanColor.Color
		end

		if copy_color then
			targetColor = copy_color
		end
	end

	local FOVCircleStroke = Visuals.FOVCircleStroke

	if FOVCircleStroke then
		FOVCircleStroke.Color = FOVCircleStroke.Color:Lerp(targetColor, 0.1)
	end

	local FOVInline = Visuals.FOVInline

	if FOVInline then
		FOVInline.BackgroundColor3 = FOVInline.BackgroundColor3:Lerp(targetColor, 0.1)
		FOVInline.BackgroundTransparency = fillAlpha
	end

	-- {
	-- 	"Visible",
	-- 	"Manipulated",
	-- 	"Wallbangable",
	-- 	"Hitscanned",
	-- },

	if flags.AutoShoot then
		local ShouldShoot = false

		-- if table.find(autoshootif, "Manipulated") and Manipulated then
		-- 	EntityClass.ShouldAutoShoot = true
		-- elseif table.find(autoshootif, "Wallbangable") and Wallbanged then
		-- 	EntityClass.ShouldAutoShoot = true
		-- elseif table.find(autoshootif, "Visible") and ClosestTarget and EntityData and EntityData.CoreInformation and EntityData.CoreInformation.Visible then
		-- 	EntityClass.ShouldAutoShoot = true
		-- elseif table.find(autoshootif, "Hitscanned") and HitScanned then
		-- 	EntityClass.ShouldAutoShoot = true
		-- else
		-- 	EntityClass.ShouldAutoShoot = false
		-- end
		local autoshootif = Globals.AutoShootIfOptions

		if (autoshootif.Manipulated and Manipulated)
		or (autoshootif.Wallbangable and Wallbanged)
		or (autoshootif.Visible and ClosestTarget and EntityData and EntityData.CoreInformation and EntityData.CoreInformation.Visible)
		or (autoshootif.Hitscanned and HitScanned) then
			ShouldShoot = true
		end

		EntityClass.ShouldAutoShoot = ShouldShoot
	end

	local VisibleText = Visuals.VisibleText

	if ClosestTarget and EntityData and EntityData.CoreInformation and EntityData.CoreInformation.Visible and not Wallbanged and not Manipulated and flags.VisibleText then
		VisibleText.Text = "TARGET VISIBLE"
		VisibleText.Visible = true
		VisibleText.FontFace = Library.Font
		VisibleText.TextColor3 = flags.VisibleTextColor.Color
		VisibleText.Position = UDim2.new(0.5, 0, 0.5, dynRadius + 10)
	else
		VisibleText.Visible = false
	end

	local ManipulationText = Visuals.ManipulationText

	if Manipulated and flags.ManipulationText then
		local dist = math.round((ClientRoot.CFrame.Position - ManipulatedPosition).Magnitude)
		ManipulationText.Text = "MANIPULATING * " .. tostring(dist) .. " STUDS"
		ManipulationText.Visible = true
		ManipulationText.FontFace = Library.Font
		ManipulationText.TextColor3 = flags.ManipulationTextColor.Color
		ManipulationText.Position = UDim2.new(0.5, 0, 0.5, dynRadius + 10)
	else
		ManipulationText.Visible = false
	end

	local WallbangText = Visuals.WallbangText

	if Wallbanged and flags.WallbangText then
		WallbangText.Text = "WALLBANGABLE"
		WallbangText.Visible = true
		WallbangText.FontFace = Library.Font
		WallbangText.TextColor3 = flags.WallbangTextColor.Color
		WallbangText.Position = UDim2.new(0.5, 0, 0.5, dynRadius + 10)
	else
		WallbangText.Visible = false
	end

	local HitscanText = Visuals.HitScanText

	if HitScanned and flags.HitScanText then
		local dist = math.round((ScannedPart.Position - ScannedPosition).Magnitude)
		HitscanText.Text = "SCANNED * "..tostring(dist) .. " STUDS"
		HitscanText.Visible = true
		HitscanText.FontFace = Library.Font
		HitscanText.TextColor3 = flags.HitScanTextColor.Color
		HitscanText.Position = UDim2.new(0.5, 0, 0.5, dynRadius + 20)
	else
		HitscanText.Visible = false
	end

	if Manipulated and ManipulatedPart and ManipulatedPosition and flags.ManipulationVisualizer then
		manipBeam.Enabled = true
		manipPart0.Position = ManipulatedPosition
		manipPart1.Position = ManipulatedPart.Position
		manipBeam.Color = ColorSequence.new(flags.ManipulationVisualizerColor.Color)
	else
		manipBeam.Enabled = false
	end

	if ClosestTarget and flags.AimbotMode == "Memory" then
		Camera.CFrame = CFrame.new(Camera.CFrame.Position, ClosestTarget.Position)
	end

	if EntityClass.TargetCharacter and EntityClass.TargetData.Class == "Player" and flags.Backtrack and flags['Backtrack Activation'].Toggled then
		if now - Globals.LastBackTrackCheck > 0.01 then
			if not Globals.CurrentBackTrackTarget or Globals.CurrentBackTrackTarget == EntityClass.TargetCharacter then
				Globals.LastBackTrackCheck = now
				local isVisible = false;

				if not Globals.BackTrackDisabled then
					local p = EntityClass.TargetCharacter:FindFirstChild('HumanoidRootPart');
					if (p and p:IsA('BasePart') and Visuals.IsPartVisible(p, EntityClass.ManipulatedPosition)) then
						isVisible = true
					end
					if not isVisible then
						if not (not lastpos or not lasttarg or lasttarg ~= EntityClass.TargetCharacter) then
							if Globals.BacktrackJustWasVis then
								Globals.CurrentBackTrackTarget = EntityClass.TargetCharacter
								Globals.BacktrackJustWasVis = false
								EntityClass.TargetCharacter:PivotTo(lastpos);
								p.Anchored = true
								Globals.BackTrackDisabled = true
								task.delay(0.4, function()
									pcall(function()
										p.Anchored = false
									end)
									Globals.BackTrackDisabled = false
									Globals.CurrentBackTrackTarget = nil
								end);
							end
						end
					else
						lasttarg = EntityClass.TargetCharacter
						lastpos = EntityClass.TargetCharacter:GetPivot();
						Globals.BacktrackJustWasVis = true
					end
				end
			end
		end
	end


	if EntityData and EntityClass.TargetCharacter and EntityClass.TargetCharacter and flags.ArmorViewer then
		if now - Globals.LastArmorCheck > 0.2 then
			Globals.LastArmorCheck = now
			local armor = GetArmor(EntityClass.TargetCharacter)
			local armorImages = {}
			for _, v in armor do
				if v and v.Image then
					insert(armorImages, v.Image)
				end
			end
			if #armorImages ~= 0 then
				if not compareTables(armorImages, last_armor) then
					last_armor = armorImages
					if #armorImages > 0 then
						bar:Set(armorImages)
						bar:SetVisibility(true)
					else
						bar:SetVisibility(false)
					end
				end
			else
				bar:SetVisibility(false)
				bar:Reset()
			end
		end
	else
		bar:SetVisibility(false)
		bar:Reset()
	end

	if EntityData and EntityClass.TargetCharacter and EntityClass.TargetCharacter and flags.WeaponViewer then
		if now - Globals.LastWeaponCheck > 0.2 then
			Globals.LastWeaponCheck = now
			weapons:SetVisibility(true)
			local gun, gunImage = getGun(EntityClass.TargetCharacter)
			local gunOnBack, gunOnBackImage = getSecondary(EntityClass.TargetCharacter)
			local gunImages = {gunImage, gunOnBackImage}
			if not compareTables(gunImages, last_guns) then
				weapons:Reset()

				last_guns = gunImages
				if gunImage then
					weapons:Add(gunImage)
				end
				if gunOnBackImage then
					weapons:Add(gunOnBackImage)
				end
			end
			if not gunImage and not gunOnBackImage then
				weapons:SetVisibility(false)
			end
		end
	else
		weapons:SetVisibility(false)
		weapons:Reset()
	end

	if flags.AutoReload then
		if now - Globals.LastAutoReload > flags.AutoReloadDelay then
			Globals.LastAutoReload = now
			reloadGun()
		end
	end

	local feet = CFrame.new(ClientRoot.Position - Vector3.new(0, ClientRoot.Size.Y / 2, 0)) * CFrame.Angles(0, math.rad((now * flags.SpinSpeed) % 360), 0)
	local client_character = Globals.ClientCharacter

	if flags.KillauraToggle and flags["Killaura Activation"].Toggled and client_character then
		local root = client_character:FindFirstChild('HumanoidRootPart');

		local radius = flags.KillauraRadius
		killauracircle.WorldCFrame = feet

		local ring = killauracircle.Ring
		ring.Color = ColorSequence.new(flags.KillAuraColor.Color)
		ring.Transparency = NumberSequence.new(flags.KillAuraColor.Transparency)
		ring.Size = NumberSequence.new(radius)

		local KillAuraTarget, best = nil, radius;

		for _, plr in Players:GetPlayers() do
			if plr == Client then
				continue
			end

			local ch = plr.Character;

			if (ch and ch.Parent) then
				local target = ch:FindFirstChild('Head') or ch:FindFirstChild('HumanoidRootPart') or ch:FindFirstChildWhichIsA('BasePart');

				if (target) then
					local d = (target.Position - root.Position).Magnitude;
					if (d < best) then
						best = d;
						KillAuraTarget = target;
					end;
				end;
			end;
		end;

		if KillAuraTarget then
			local Weapon = workspace.VFX.VMs:GetChildren()[1]
			local WeaponData = Weapon and Globals.ToolInfo[Weapon.Name]
			if KillAuraTarget:IsA("Player") then
				KillAuraTarget = KillAuraTarget.Character
			end

			if client_character and KillAuraTarget and WeaponData and rawget(WeaponData, "Weapon") and rawget(WeaponData, "Melee") and rawget(WeaponData.Weapon, "Cooldown") then
				local Root = client_character:FindFirstChild("HumanoidRootPart")

				local Cooldown = WeaponData.Weapon.Cooldown
				local Tip = Weapon:FindFirstChild("Weapon") and Weapon.Weapon:FindFirstChild("Main") or Weapon.Weapon:FindFirstChild("Handle")
				local Target = KillAuraTarget
				if Target then
					local AttackCFrame = CFrame.new(Root.Position + Vector3.new(0, 3, 0), Target.Position)
					if (Root.CFrame.p - Target.CFrame.p).Magnitude <= 7 and now - LastSwing > Cooldown then
						LastSwing = now

						task.spawn(function()
							-- local Time = workspace:GetServerTimeNow()

							-- local RootToTip = Root.CFrame:PointToObjectSpace(Tip.Position)
							-- local Angle = (Globals.ClientCharacter.Head.Position - Target.Position).Unit

							if flags.ThirdPerson and flags["Third Person Activation"].Toggled then
								local WorldModel = Globals.ClientCharacter:FindFirstChild(Weapon.Name)
								Tip = WorldModel and WorldModel:FindFirstChild("Handle")
								if not Tip then
									return
								end
								-- RootToTip = Root.CFrame:PointToObjectSpace(Tip.Position) / 10
							end

							if AttackCFrame and Target and Weapon then
								meleeHit(AttackCFrame, Target, Weapon.Name)
							end
						end)
					end
				end
			end
		end
	else
		killauracircle.Ring.Transparency = NumberSequence.new(1)
	end

	if flags.AutoFarmToggle and flags["AutoFarm Activation"].Toggled then
		local radius = flags.AutoFarmRadius
		autofarmcircle.WorldCFrame = feet

		local ring = autofarmcircle.Ring

		ring.Color = ColorSequence.new(flags.AutoFarmColor.Color)
		ring.Transparency = NumberSequence.new(flags.AutoFarmColor.Transparency)
		ring.Size = NumberSequence.new(radius)

		local AutoFarmTarget, best = nil, radius
		for _, folder in {workspace.Nodes, workspace.Trees} do
			if folder and folder:IsA("Folder") then
				for _, inst in folder:GetChildren() do
					if inst:IsA("Model") then
						local t = inst:FindFirstChild("NodeSpark") or inst:FindFirstChild("TreeX") or inst
						local part = (t:IsA("Model") and t.PrimaryPart or t:FindFirstChild('Main')) or (t:IsA("BasePart") and t) or nil
						if part then
							local d = (part.Position - Globals.ClientCharacter.HumanoidRootPart.Position).Magnitude
							if d < best then
								best = d
								AutoFarmTarget = part
							end
						end
					end
				end
				if best ~= nil then
					break
				end
			end
		end
		if AutoFarmTarget then
			local Weapon = workspace.VFX.VMs:GetChildren()[1]
			local WeaponData = Weapon and Globals.ToolInfo[Weapon.Name]
			if Globals.ClientCharacter and WeaponData and rawget(WeaponData, "Weapon") and rawget(WeaponData, "Melee") and rawget(WeaponData.Weapon, "Cooldown") then
				local Root = Globals.ClientCharacter:FindFirstChild("HumanoidRootPart")
				local Cooldown = WeaponData.Weapon.Cooldown
				--local Tip = Weapon:FindFirstChild("Weapon") and Weapon.Weapon:FindFirstChild("Main") or Weapon.Weapon:FindFirstChild("Handle")
				local AttackCFrame = CFrame.new(Root.Position + Vector3.new(0, 3, 0), AutoFarmTarget.Position)
				if (Root.Position - AutoFarmTarget.Position).Magnitude <= 10 and now - LastSwing > Cooldown then
					LastSwing = now
					task.spawn(function()
						if AttackCFrame and Weapon then
							meleeHit(AttackCFrame, AutoFarmTarget, Weapon.Name)
						end
					end)
				end
			end
		end
	else
		autofarmcircle.Ring.Transparency = NumberSequence.new(1)
	end
end))

local Protected = Instance.new("ScreenGui", CoreGui)
Protected.IgnoreGuiInset = true

local CrosshairHolder = Instances.Create2("Frame", {BorderColor3 = Color3.fromRGB(0, 0, 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, Position = UDim2.new(0.5, 0, 0.5, 0), Parent = Protected})
local CrosshairTop = Instances.Create2("Frame", {AnchorPoint = Vector2.new(0.5, 1), BorderColor3 = Color3.fromRGB(0, 0, 0), Parent = CrosshairHolder})
local CrosshairRight = Instances.Create2("Frame", {AnchorPoint = Vector2.new(0, 0.5), BorderColor3 = Color3.fromRGB(0, 0, 0), Parent = CrosshairHolder})
local CrosshairLeft = Instances.Create2("Frame", {AnchorPoint = Vector2.new(1, 0.5), BorderColor3 = Color3.fromRGB(0, 0, 0), Parent = CrosshairHolder})
local CrosshairBottom = Instances.Create2("Frame", { AnchorPoint = Vector2.new(0.5, 0), BorderColor3 = Color3.fromRGB(0, 0, 0), Parent = CrosshairHolder})
local target_hud = {} do
	local G2L = {};
	G2L["1"] = Instance.new("ScreenGui", CoreGui);
	G2L["1"]["Name"] = [[target hud]];
	G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
	G2L["1"]["IgnoreGuiInset"] = true;
	target_hud.sgui = G2L['1'];
	G2L["2"] = Instance.new("Frame", G2L["1"]);
	G2L["2"]["BorderSizePixel"] = 0;
	G2L["2"]["BackgroundColor3"] = Color3.fromRGB(11, 11, 11);
	G2L["2"]["AnchorPoint"] = Vector2.new(0.5, 0.75);
	G2L["2"]["Size"] = UDim2.new(0, 322, 0, 147);
	G2L["2"]["Position"] = UDim2.new(0.5, 0, 0.85, 0);
	G2L["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);

	local f = G2L['2'];
	f.Active = true;
	f.Draggable = true;
	G2L["3"] = Instance.new("Frame", G2L["2"]);
	G2L["3"]["BorderSizePixel"] = 0;
	G2L["3"]["BackgroundColor3"] = Themes.Preset.Accent;
	G2L["3"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["3"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["4"] = Instance.new("Frame", G2L["3"]);
	G2L["4"]["BorderSizePixel"] = 0;
	G2L["4"]["BackgroundColor3"] = Color3.fromRGB(31, 31, 31);
	G2L["4"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["4"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["5"] = Instance.new("Frame", G2L["4"]);
	G2L["5"]["BorderSizePixel"] = 0;
	G2L["5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["5"]["Size"] = UDim2.new(1, -2, 1, -4);
	G2L["5"]["Position"] = UDim2.new(0, 1, 0, 2);
	G2L["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["5"]["BackgroundTransparency"] = 1;
	G2L["6"] = Instance.new("UIPadding", G2L["5"]);
	G2L["6"]["PaddingLeft"] = UDim.new(0, 6);
	G2L["7"] = Instance.new("Frame", G2L["5"]);
	G2L["7"]["BorderSizePixel"] = 0;
	G2L["7"]["BackgroundColor3"] = Color3.fromRGB(46, 46, 46);
	G2L["7"]["Size"] = UDim2.new(1, 0, 1, -18);
	G2L["7"]["Position"] = UDim2.new(0, -3, 0, 16);
	G2L["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["7"]["Name"] = [[holder]];
	G2L["8"] = Instance.new("Frame", G2L["7"]);
	G2L["8"]["BorderSizePixel"] = 0;
	G2L["8"]["BackgroundColor3"] = Color3.fromRGB(11, 11, 11);
	G2L["8"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["8"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["9"] = Instance.new("Frame", G2L["8"]);
	G2L["9"]["BorderSizePixel"] = 0;
	G2L["9"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
	G2L["9"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["9"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["a"] = Instance.new("UIPadding", G2L["9"]);
	G2L["a"]["PaddingTop"] = UDim.new(0, 4);
	G2L["a"]["PaddingLeft"] = UDim.new(0, 4);
	G2L["b"] = Instance.new("Frame", G2L["9"]);
	G2L["b"]["BorderSizePixel"] = 0;
	G2L["b"]["BackgroundColor3"] = Color3.fromRGB(11, 11, 11);
	G2L["b"]["Size"] = UDim2.new(1, -4, 1, -4);
	G2L["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["c"] = Instance.new("Frame", G2L["b"]);
	G2L["c"]["BorderSizePixel"] = 0;
	G2L["c"]["BackgroundColor3"] = Color3.fromRGB(46, 46, 46);
	G2L["c"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["c"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["d"] = Instance.new("Frame", G2L["c"]);
	G2L["d"]["BorderSizePixel"] = 0;
	G2L["d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["d"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["d"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["e"] = Instance.new("UIGradient", G2L["d"]);
	G2L["e"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(30, 30, 30)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(21, 21, 21))};
	G2L["f"] = Instance.new("UIPadding", G2L["d"]);
	G2L["f"]["PaddingTop"] = UDim.new(0, 4);
	G2L["f"]["PaddingRight"] = UDim.new(0, 3);
	G2L["f"]["PaddingLeft"] = UDim.new(0, 4);
	G2L["f"]["PaddingBottom"] = UDim.new(0, 3);
	G2L["10"] = Instance.new("Frame", G2L["d"]);
	G2L["10"]["BorderSizePixel"] = 0;
	G2L["10"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["10"]["Size"] = UDim2.new(1, 0, 1, 3);
	G2L["10"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["10"]["BackgroundTransparency"] = 1;
	G2L["11"] = Instance.new("UIListLayout", G2L["10"]);
	G2L["11"]["Padding"] = UDim.new(0, 4);
	G2L["11"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
	G2L["12"] = Instance.new("UIPadding", G2L["10"]);
	G2L["12"]["PaddingBottom"] = UDim.new(0, 4);
	G2L["13"] = Instance.new("Frame", G2L["10"]);
	G2L["13"]["BorderSizePixel"] = 0;
	G2L["13"]["BackgroundColor3"] = Color3.fromRGB(46, 46, 46);
	G2L["13"]["Size"] = UDim2.new(1, -1, 1, 0);
	G2L["13"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["14"] = Instance.new("Frame", G2L["13"]);
	G2L["14"]["BorderSizePixel"] = 0;
	G2L["14"]["BackgroundColor3"] = Color3.fromRGB(11, 11, 11);
	G2L["14"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["14"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["14"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["15"] = Instance.new("Frame", G2L["14"]);
	G2L["15"]["BorderSizePixel"] = 0;
	G2L["15"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["15"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["15"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["15"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["16"] = Instance.new("UIGradient", G2L["15"]);
	G2L["16"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(30, 30, 30)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(21, 21, 21))};
	G2L["17"] = Instance.new("Frame", G2L["15"]);
	G2L["17"]["BorderSizePixel"] = 0;
	G2L["17"]["BackgroundColor3"] = Themes.Preset.Accent;
	G2L["17"]["Size"] = UDim2.new(1, 0, 0, 2);
	G2L["17"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["17"]["Name"] = [[bar]];

	-- Themes.Preset.Accent isnt updating due to the fucking new samet trash ass INSTANCES fucking OOP shit
	-- it's so retarded..
	-- RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function()
	-- 	G2L['3'].BackgroundColor3 = Themes.Preset.Accent;
	-- 	G2L['17'].BackgroundColor3 = Themes.Preset.Accent;
	-- end));

	G2L["19"] = Instance.new("Frame", G2L["15"]);
	G2L["19"]["BorderSizePixel"] = 0;
	G2L["19"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["19"]["Size"] = UDim2.new(1, -2, 1, -24);
	G2L["19"]["Position"] = UDim2.new(0, 1, 0, 22);
	G2L["19"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["19"]["Name"] = [[holder]];
	G2L["19"]["BackgroundTransparency"] = 1;
	G2L["1a"] = Instance.new("UIPadding", G2L["19"]);
	G2L["1a"]["PaddingTop"] = UDim.new(0, -1);
	G2L["1a"]["PaddingRight"] = UDim.new(0, 3);
	G2L["1a"]["PaddingLeft"] = UDim.new(0, 3);
	G2L["1a"]["PaddingBottom"] = UDim.new(0, 2);
	G2L["1b"] = Instance.new("Frame", G2L["19"]);
	G2L["1b"]["BorderSizePixel"] = 0;
	G2L["1b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["1b"]["Size"] = UDim2.new(1, 0, 1, 0);
	G2L["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["1b"]["Name"] = [[playerinfo]];
	G2L["1b"]["BackgroundTransparency"] = 1;
	G2L["1c"] = Instance.new("Frame", G2L["1b"]);
	G2L["1c"]["BorderSizePixel"] = 0;
	G2L["1c"]["BackgroundColor3"] = Color3.fromRGB(11, 11, 11);
	G2L["1c"]["Size"] = UDim2.new(0, 68, 1, 0);
	G2L["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["1c"]["Name"] = [[icon]];
	G2L["1d"] = Instance.new("Frame", G2L["1c"]);
	G2L["1d"]["BorderSizePixel"] = 0;
	G2L["1d"]["BackgroundColor3"] = Color3.fromRGB(46, 46, 46);
	G2L["1d"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["1d"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["1d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["1e"] = Instance.new("Frame", G2L["1d"]);
	G2L["1e"]["BorderSizePixel"] = 0;
	G2L["1e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["1e"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["1e"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["1e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["1f"] = Instance.new("ImageLabel", G2L["1e"]);
	G2L["1f"]["BorderSizePixel"] = 0;
	G2L["1f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["1f"]["Image"] = [[http://www.roblox.com/asset/?id=119472238324544]];
	G2L["1f"]["Size"] = UDim2.new(1, 0, 1, 0);
	G2L["1f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["1f"]["BackgroundTransparency"] = 1;
	target_hud.playericon = G2L['1f'];
	G2L["20"] = Instance.new("UIGradient", G2L["1e"]);
	G2L["20"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(30, 30, 30)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(21, 21, 21))};
	G2L["21"] = Instance.new("Frame", G2L["1b"]);
	G2L["21"]["BorderSizePixel"] = 0;
	G2L["21"]["BackgroundColor3"] = Color3.fromRGB(11, 11, 11);
	G2L["21"]["AnchorPoint"] = Vector2.new(0, 1);
	G2L["21"]["Size"] = UDim2.new(1, -72, 0, 14);
	G2L["21"]["Position"] = UDim2.new(0, 72, 1, 0);
	G2L["21"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["21"]["Name"] = [[health]];
	G2L["22"] = Instance.new("Frame", G2L["21"]);
	G2L["22"]["BorderSizePixel"] = 0;
	G2L["22"]["BackgroundColor3"] = Color3.fromRGB(46, 46, 46);
	G2L["22"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["22"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["22"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["23"] = Instance.new("Frame", G2L["22"]);
	G2L["23"]["BorderSizePixel"] = 0;
	G2L["23"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["23"]["Size"] = UDim2.new(1, -2, 1, -2);
	G2L["23"]["Position"] = UDim2.new(0, 1, 0, 1);
	G2L["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["24"] = Instance.new("UIGradient", G2L["23"]);
	G2L["24"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(30, 30, 30)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(21, 21, 21))};
	G2L["25"] = Instance.new("Frame", G2L["23"]);
	G2L["25"]["BorderSizePixel"] = 0;
	G2L["25"]["BackgroundColor3"] = Color3.fromRGB(46, 196, 46);
	G2L["25"]["Size"] = UDim2.new(1, 0, 1, 0);
	G2L["25"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["25"]["Name"] = [[healthbarvalue]];
	target_hud.hlthframe = G2L['25']
	G2L["26"] = Instance.new("UIGradient", G2L["25"]);
	G2L["26"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(125, 125, 125))};
	G2L["27"] = Instance.new("TextLabel", G2L["23"]);
	G2L["27"]["BorderSizePixel"] = 0;
	G2L["27"]["TextSize"] = 12;
	G2L["27"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["27"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L["27"]["TextColor3"] = Color3.fromRGB(181, 181, 181);
	G2L["27"]["BackgroundTransparency"] = 1;
	G2L["27"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
	G2L["27"]["Size"] = UDim2.new(1, 0, 1, 0);
	G2L["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["27"]["Text"] = [[100/100]];
	G2L["27"]["Name"] = [[healthvalue]];
	G2L["27"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
	target_hud.hlthlabel = G2L['27'];
	G2L["28"] = Instance.new("UIStroke", G2L["27"]);
	G2L["28"]["LineJoinMode"] = Enum.LineJoinMode.Miter;
	G2L["29"] = Instance.new("Frame", G2L["1b"]);
	G2L["29"]["BorderSizePixel"] = 0;
	G2L["29"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["29"]["Size"] = UDim2.new(0, 198, 0, 31);
	G2L["29"]["Position"] = UDim2.new(0.27007, 0, 0.02941, 0);
	G2L["29"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["29"]["BackgroundTransparency"] = 1;
	G2L["2a"] = Instance.new("UIListLayout", G2L["29"]);
	G2L["2a"]["Padding"] = UDim.new(0, 2);
	G2L["2a"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
	G2L["2b"] = Instance.new("TextLabel", G2L["29"]);
	G2L["2b"]["BorderSizePixel"] = 0;
	G2L["2b"]["TextSize"] = 12;
	G2L["2b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
	G2L["2b"]["TextYAlignment"] = Enum.TextYAlignment.Top;
	G2L["2b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["2b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L["2b"]["TextColor3"] = Color3.fromRGB(181, 181, 181);
	G2L["2b"]["BackgroundTransparency"] = 1;
	G2L["2b"]["Size"] = UDim2.new(0.39152, 0, 0.41935, 0);
	G2L["2b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["2b"]["Text"] = [[finobe]];
	G2L["2b"]["Name"] = [[name]];
	target_hud.namelabel = G2L['2b'];
	G2L["2c"] = Instance.new("UIStroke", G2L["2b"]);
	G2L["2c"]["LineJoinMode"] = Enum.LineJoinMode.Miter;
	G2L["2d"] = Instance.new("TextLabel", G2L["29"]);
	G2L["2d"]["BorderSizePixel"] = 0;
	G2L["2d"]["TextSize"] = 12;
	G2L["2d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
	G2L["2d"]["TextYAlignment"] = Enum.TextYAlignment.Top;
	G2L["2d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["2d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L["2d"]["TextColor3"] = Color3.fromRGB(181, 181, 181);
	G2L["2d"]["BackgroundTransparency"] = 1;
	G2L["2d"]["Size"] = UDim2.new(0.39152, 0, 0.41935, 0);
	G2L["2d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["2d"]["Text"] = [[finobe studs]];
	G2L["2d"]["Name"] = [[studs]];
	target_hud.distlabel = G2L['2d'];
	G2L["2e"] = Instance.new("UIStroke", G2L["2d"]);
	G2L["2e"]["LineJoinMode"] = Enum.LineJoinMode.Miter;
	G2L["37"] = Instance.new("Frame", G2L["15"]);
	G2L["37"]["BorderSizePixel"] = 0;
	G2L["37"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["37"]["Size"] = UDim2.new(1, 0, 0, 20);
	G2L["37"]["Position"] = UDim2.new(0, 0, 0, 2);
	G2L["37"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["37"]["Name"] = [[top]];
	G2L["37"]["BackgroundTransparency"] = 1;
	G2L["38"] = Instance.new("TextLabel", G2L["37"]);
	G2L["38"]["BorderSizePixel"] = 0;
	G2L["38"]["TextSize"] = 12;
	G2L["38"]["TextXAlignment"] = Enum.TextXAlignment.Left;
	G2L["38"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["38"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L["38"]["TextColor3"] = Color3.fromRGB(137, 137, 137);
	G2L["38"]["BackgroundTransparency"] = 1;
	G2L["38"]["Size"] = UDim2.new(1, 0, 1, 0);
	G2L["38"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["38"]["Text"] = [[Info]];
	G2L["39"] = Instance.new("UIPadding", G2L["38"]);
	G2L["39"]["PaddingLeft"] = UDim.new(0, 5);
	G2L["3a"] = Instance.new("UIStroke", G2L["38"]);
	G2L["3a"]["LineJoinMode"] = Enum.LineJoinMode.Miter;
	G2L["3b"] = Instance.new("Frame", G2L["5"]);
	G2L["3b"]["BorderSizePixel"] = 0;
	G2L["3b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["3b"]["Size"] = UDim2.new(1, -4, 0, 20);
	G2L["3b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["3b"]["Name"] = [[top]];
	G2L["3b"]["BackgroundTransparency"] = 1;
	G2L["3c"] = Instance.new("TextLabel", G2L["3b"]);
	G2L["3c"]["BorderSizePixel"] = 0;
	G2L["3c"]["TextSize"] = 12;
	G2L["3c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
	G2L["3c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
	G2L["3c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L["3c"]["TextColor3"] = Color3.fromRGB(181, 181, 181);
	G2L["3c"]["BackgroundTransparency"] = 1;
	G2L["3c"]["Size"] = UDim2.new(0.5, 0, 1, 0);
	G2L["3c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
	G2L["3c"]["Text"] = [[Indicator]];
	G2L["3d"] = Instance.new("UIPadding", G2L["3c"]);
	G2L["3d"]["PaddingTop"] = UDim.new(0, -4);
	G2L["3d"]["PaddingLeft"] = UDim.new(0, -2);
	G2L["3d"]["PaddingBottom"] = UDim.new(0, 4);
	G2L["3e"] = Instance.new("UIStroke", G2L["3c"]);
	G2L["3e"]["LineJoinMode"] = Enum.LineJoinMode.Miter;

	for _, obj in G2L do
		if obj:IsA('TextLabel') then
			obj.FontFace = Library.Font
		end;
	end;
end;

local VFX = require(Modules.VFXModule);
local RaycastUtil = require(Modules.RaycastUtil);
local SoundModule = require(Modules.SoundModule)
local __curve_t = 0

RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function()
	--/ LP Chams
	if Globals.ClientCharacter then
		local IsThirdPerson = flags.ThirdPerson and flags["Third Person Activation"].Toggled
		local usedChams = {}
		for _, Part in Globals.ClientCharacter:GetChildren() do
			if Part.Name == 'ignoreme' then continue end
			if Part:IsA("Model") and Part.Name:find("Armor") then
				for _, MeshPart in Part:GetChildren() do
					if MeshPart:IsA("MeshPart") and MeshPart.Transparency ~= 1 then
						if IsThirdPerson then
							MeshPart:SetAttribute("OriginalMaterial", MeshPart.Material)
							MeshPart:SetAttribute("OriginalColor", MeshPart.Color)
							MeshPart:SetAttribute("OriginalTextureId", MeshPart.TextureID)
							MeshPart:SetAttribute("OriginalReflectance", MeshPart.Reflectance)
							MeshPart.CanQuery = false

							if flags["SandboxClient"] then
								MeshPart.Color = flags["ClientArmorColor"].Color
								MeshPart.Reflectance = 10
								MeshPart.Material = flags["ClientArmorMaterial"]
								if MeshPart.Material == Enum.Material.ForceField then
									MeshPart.TextureID = "rbxassetid://10913193650"
								else
									MeshPart.TextureID = ""
								end
							else
								MeshPart.Color = MeshPart:GetAttribute("OriginalColor")
								MeshPart.Material = MeshPart:GetAttribute("OriginalMaterial")
								MeshPart.Reflectance = MeshPart:GetAttribute("OriginalReflectance")
								MeshPart.TextureID = MeshPart:GetAttribute("OriginalTextureId")
							end
						else
							MeshPart.Transparency = 1
						end
					end
				end
			end

			if Part:IsA("BasePart") and not EntityClass.IgnoreNames[Part.Name] then
				insert(usedChams, Part)
				if not Globals.LPAdornments[Part] then
					local LPAdornments = {}
					for Vis = 1, 2 do
						local Adornment
						if Part.Name == "Head" then
							Adornment = Globals:Instance("CylinderHandleAdornment", {
								Adornee = Part,
								Parent = CoreGui,
								ZIndex = Vis == 1 and 2 or 1,
								Height = Vis == 1 and 0.87 or 1.02,
								Radius = Vis == 1 and 0.5 or 0.65,
								CFrame = CFrame.new(Vector3.new(), Vector3.new(0, 1, 0)),
								Visible = false,
								AlwaysOnTop = Vis == 1
							})
						else
							local SizeOffset = Vis == 1 and -0.05 or 0.05
							Adornment = Globals:Instance("BoxHandleAdornment", {
								Adornee = Part,
								Parent = CoreGui,
								ZIndex = Vis == 1 and 2 or 1,
								AlwaysOnTop = Vis == 1,
								Size = Part.Size + Vector3.new(SizeOffset, SizeOffset, SizeOffset),
								Visible = false
							})
						end
						LPAdornments[Vis] = Adornment
					end
					Globals.LPAdornments[Part] = LPAdornments
				else
					local LPAdornments = Globals.LPAdornments[Part]
					for i = 1, 2 do
						LPAdornments[i].Visible = IsThirdPerson and flags["ClientChams"] or false
					end
					if IsThirdPerson then
						local OccludedColor = flags["ClientChamsColor1"].Color
						local OccludedTransparency = flags["ClientChamsColor1"].Transparency
						local VisibleColor = flags["ClientChamsColor2"].Color
						local VisibleTransparency = flags["ClientChamsColor2"].Transparency

						LPAdornments[1].Color3 = OccludedColor
						LPAdornments[1].Transparency = OccludedTransparency

						LPAdornments[2].ZIndex = 9e9
						LPAdornments[2].AlwaysOnTop = true
						LPAdornments[2].Color3 = VisibleColor
						LPAdornments[2].Transparency = VisibleTransparency
					end
				end
			end
		end

		for Part, Adornments in Globals.LPAdornments do
			if not table.find(usedChams, Part) then
				for _, Adornment in Adornments do
					Adornment:Destroy()
				end
				Globals.LPAdornments[Part] = nil
			end
		end
	end


	--// Crosshair
	if flags["Crosshair Enabled"] then
		CrosshairHolder.Rotation = flags["Crosshair Spin"] and (CrosshairHolder.Rotation + flags["Crosshair Speed"] / 100) or 0
		local targetUDim
		if EntityClass.TargetPart and flags.MoveCrosshairToTarget then
			local pos, onScreen = Camera:WorldToViewportPoint(EntityClass.TargetPart.Position)
			targetUDim = onScreen and UDim2.fromOffset(pos.X, pos.Y) or UDim2.fromScale(0.5, 0.5)
		else
			local dt = (Globals and Globals.Delta) or 0
			local speed = (flags and flags.BounceSpeed) or 1
			local rx = (flags and (flags.BounceRadiusX or flags.BounceLimit)) or 10
			local ry = (flags and flags.BounceRadiusY) or math_max(2, rx * 0.5)
			local mode = (flags and flags.BounceMode) or 'ellipse'
			local phaseY = 1.2
			__curve_t = __curve_t + dt * speed * (2 * math.pi)
			local ox, oy
			if mode == 'figure8' then
				ox = math.sin(__curve_t) * rx
				oy = (math.sin(2 * __curve_t) * 0.5) * ry
			elseif mode == 'sway' then
				ox = math.sin(__curve_t) * rx
				oy = ((math.sin(__curve_t + math.pi/2)^2 - 0.5) * 2) * ry
			else
				ox = math.cos(__curve_t) * rx
				oy = math.sin(__curve_t * phaseY) * ry
			end
			local mp = UserInputService:GetMouseLocation()
			targetUDim = UDim2.fromOffset(mp.X + ox, mp.Y + oy)
		end
		CrosshairHolder.Position = CrosshairHolder.Position:Lerp(targetUDim, 0.1)

		local CrosshairSpread = flags["Crosshair Spread"]

		CrosshairTop.Position = UDim2.new(0.5, 0, 0, -CrosshairSpread / 2)
		CrosshairRight.Position = UDim2.new(1, CrosshairSpread / 2, 0.5, 0)
		CrosshairLeft.Position = UDim2.new(0, -CrosshairSpread / 2, 0.5, 0)
		CrosshairBottom.Position = UDim2.new(0.5, 0, 1, CrosshairSpread / 2)

		local CrosshairWidth, CrosshairLength = flags["Crosshair Width"], flags["Crosshair Length"]

		CrosshairTop.Size = UDim2.new(0, CrosshairWidth, 0, CrosshairLength)
		CrosshairRight.Size = UDim2.new(0, CrosshairLength, 0, CrosshairWidth)
		CrosshairLeft.Size = UDim2.new(0, CrosshairLength, 0, CrosshairWidth)
		CrosshairBottom.Size = UDim2.new(0, CrosshairWidth, 0, CrosshairLength)

		local tc = flags["Crosshair Color"]
		local tgtCol  = Color3.new(1,1,1)
		local tgtTran = 0

		if tc then
			tgtCol  = tc.Color
			tgtTran = tc.Transparency
		end

		if flags.CopyTargetColorCrosshair then
			if EntityClass.Manipulated then
				local ManipColor = flags.ManipColor

				if ManipColor then
					tgtCol = ManipColor.Color
				end
			elseif EntityClass.Wallbanged then
				local WallbangColor = flags.WallbangColor

				if WallbangColor then
					tgtCol = WallbangColor.Color
				end
			elseif EntityClass.TargetData
				and EntityClass.TargetData.CoreInformation
				and EntityClass.TargetData.CoreInformation.Visible then
				local TargetColor = flags.TargetColor

				if TargetColor then
					tgtCol = TargetColor.Color
				end
			elseif EntityClass.HitScanned then
				local HitScanColor = flags.HitScanColor

				if HitScanColor then
					tgtCol = HitScanColor.Color
				end
			end
		end

		local function lerpArm(arm)
			arm.BackgroundColor3 = arm.BackgroundColor3:Lerp(tgtCol, 0.1)
			arm.BackgroundTransparency = tgtTran
		end

		lerpArm(CrosshairTop)
		lerpArm(CrosshairRight)
		lerpArm(CrosshairLeft)
		lerpArm(CrosshairBottom)

		CrosshairTop.Visible    = true
		CrosshairRight.Visible  = true
		CrosshairLeft.Visible   = true
		CrosshairBottom.Visible = true
	else
		CrosshairTop.Visible    = false
		CrosshairRight.Visible  = false
		CrosshairLeft.Visible   = false
		CrosshairBottom.Visible = false
	end


	--// Target HUD
	target_hud.sgui.Enabled = (EntityClass.TargetInstance ~= nil and EntityClass.TargetInstance:IsA("Player") and flags['Enable TargetHUD']);

	if EntityClass.TargetInstance and EntityClass.TargetInstance:IsA("Player") and EntityClass.TargetInstance.Character then
		local character = EntityClass.TargetInstance.Character;
		local humanoid = character:FindFirstChildOfClass('Humanoid');
		if not humanoid or not character:FindFirstChild('HumanoidRootPart') then return end;

		target_hud.hlthlabel.Text = math.round(humanoid.Health) .. '/' .. humanoid.MaxHealth;
		target_hud.hlthframe.Size = target_hud.hlthframe.Size:Lerp(UDim2.fromScale(math_max(humanoid.Health / humanoid.MaxHealth, 0), 1), 0.1);

		target_hud.namelabel.Text = EntityClass.TargetInstance.Name .. ' (@' .. EntityClass.TargetInstance.DisplayName .. ')';
		target_hud.distlabel.Text = Library:Round((character.HumanoidRootPart.Position - Camera.CFrame.Position).Magnitude, 1) .. 'st';

		task.spawn(function()
			local content, ready = Players:GetUserThumbnailAsync(EntityClass.TargetInstance.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size60x60);
			target_hud.playericon.Image = content;
		end);
	end

	--// Skin changer
	if tick() - LastArmorTick > 2 then
		LastArmorTick = tick();
		local ArmorSleeves = Client:GetAttribute("ArmorSleeves") or ""
		local Split = string.split(ArmorSleeves, "^");

		if type(Split) == "table" and Split[1] then
			local ShirtSplit = Split[1]:split("/")
			local GloveSplit = Split[2] and Split[2]:split("/") or {}

			local Shirt = ShirtSplit[1] or ""
			local ShirtSkin = ShirtSplit[2] or "Default"
			local Glove = GloveSplit[1] or ""
			local GloveSkin = GloveSplit[2] or "Default"

			if flags["EnableSkin_"..Shirt] and flags["EnableSkin_"..Shirt] then
				local ClientSkin = flags["Skin_"..Shirt];
				local SleeveFolder = ReplicatedStorage.Sleeves:FindFirstChild(Shirt)
				if SleeveFolder and SleeveFolder:FindFirstChild(ClientSkin) then
					ShirtSkin = ClientSkin
				end
			end

			if flags["EnableSkin_"..Glove] and flags["EnableSkin_"..Glove] then
				local ClientSkin = flags["Skin_"..Glove];
				local SleeveFolder = ReplicatedStorage.Sleeves:FindFirstChild(Glove)
				if SleeveFolder and SleeveFolder:FindFirstChild(ClientSkin) then
					GloveSkin = ClientSkin
				end
			end

			local NewArmor = ""

			if Shirt ~= "" then
				NewArmor = Shirt.."/"..ShirtSkin;
			end;

			if Glove ~= "" then

				if Shirt ~= "" then
					NewArmor = NewArmor.."^"
				end;

				NewArmor = NewArmor.. Glove.."/"..GloveSkin
			end;

			if NewArmor ~= "/^/" then
				Client:SetAttribute("ArmorSleeves", NewArmor)
			end;
		end;

		local ToolbarFunc = Globals.ToolbarFunc
		if ToolbarFunc then
			local Toolbar = debug.getupvalue(ToolbarFunc, 2)
			for ItemIndex, ItemData in Toolbar do
				if (type(ItemData) ~= 'table' or not ItemData[1] or type(ItemData[1]) ~= 'table') then
					continue
				end;
				local def = Globals.ItemsModule[ItemData[1].ID]

				local name = def.Name
				if flags["EnableSkin_"..name] and name then
					local ClientSkin = flags["Skin_"..name];
					Toolbar[ItemIndex][1]['Skin'] = ClientSkin;
				else
					continue
				end;
			end;
			debug.setupvalue(ToolbarFunc, 2, Toolbar)
		end
	end;
end));

Lighting:GetPropertyChangedSignal('ClockTime'):Connect(LPH_NO_VIRTUALIZE(function()
	if flags.ChangeTime then
		Lighting.ClockTime = flags.Time
	end;
end))

RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function()
	local Character = Globals.ClientCharacter;
	local Root = Character and Character:FindFirstChild("HumanoidRootPart");
	local Humanoid = Character and Character:FindFirstChild("Humanoid")
	if Humanoid and Root then
		--// Auto Shoot

		if flags.AutoShoot and flags["Auto Shoot Activation"].Toggled and Humanoid.Health > 0 and Humanoid:GetState() ~= Enum.HumanoidStateType.Dead and EntityClass.ShouldAutoShoot then
			if not Character:WaitForChild("WheelController"):GetAttribute("Open")
				and not Character:WaitForChild("InventoryController"):GetAttribute("Open")
				and not Character.WaterController:GetAttribute("IsSwim")
				and not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
				and UserInputService.MouseBehavior == Enum.MouseBehavior.LockCenter
				and Character.ViewmodelController:GetAttribute("LocalAmmo") > 0
			then
				local vp = Camera.ViewportSize
				local x, y = vp.X / 2, vp.Y / 2

				VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 0)
				VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 0)
			end
		end
		if Library and not Library.Unloaded then

			--// Third person
			if flags.ThirdPerson and flags["Third Person Activation"].Toggled then
				local ThirdPersonDistance = flags.ThirdPersonDistance
				Client.CameraMaxZoomDistance = ThirdPersonDistance
				Client.CameraMinZoomDistance = ThirdPersonDistance
				Client.CameraMode = Enum.CameraMode.Classic

				if flags.AntiAim and not flags.AntiAim then
					local LookVector = Camera.CFrame.LookVector
					local Angle = -math.atan2(LookVector.Z, LookVector.X) + math.rad(-90)
					local Angled = CFrame.new(Root.Position) * CFrame.Angles(0, Angle, 0)
					local _, Y, _ = Angled:ToOrientation()
					Globals.AntiAimAngle = CFrame.new(Angled.Position) * CFrame.Angles(0, Y, 0)
					Root.CFrame = Globals.AntiAimAngle
					Humanoid.AutoRotate = false
				end
			else
				Client.CameraMode = Enum.CameraMode.LockFirstPerson
				if not (flags.AntiAim and flags.AntiAim) then
					Humanoid.AutoRotate = true
				end
			end
			--
		end
		--// AntiAim
		if flags.AntiAim and flags.AntiAim then
			--// Yaw calculation
			local LookVector = Camera.CFrame.LookVector
			local Angle = -math.atan2(LookVector.Z, LookVector.X) + math.rad(-90)

			local YawBase = flags.YawBase

			if YawBase == "Random" then
				Angle = -math.atan2(LookVector.Z, LookVector.X + math.rad(math.random(-180, 120)))
			elseif YawBase == "Spin" then
				Angle = -math.atan2(LookVector.Z, LookVector.X) + (tick() * 10) % 360
			end

			local Offset = math.rad(flags.YawModifier)
			local Angled = CFrame.new(Root.Position) * CFrame.Angles(0, Angle + Offset, 0)

			if (flags.YawBase == "Targets") and EntityClass.TargetPart  then
				Angled = CFrame.new(Root.Position, EntityClass.TargetPart.Position) * CFrame.Angles(0, Offset, 0)
			end

			local _, Y, _ = Angled:ToOrientation()
			Globals.AntiAimAngle = CFrame.new(Angled.Position) * CFrame.Angles(0, Y, 0)

			Root.CFrame = Globals.AntiAimAngle
			Humanoid.AutoRotate = false
			--

			--// Pitch calculation
			local Pitch = flags.PitchModifier
			local PitchBase = flags.PitchBase

			if PitchBase == "Down" then
				Pitch = 0.7
			elseif PitchBase == "Up" then
				Pitch = -0.7
			elseif PitchBase == "Nod" then
				Pitch = math.sin(tick() * 3)
			elseif PitchBase == "Random" then
				Pitch = math.random() / 10
			end

			Pitch = math.clamp(Pitch, -0.7, 0.7)

			local TorsoController = Character:FindFirstChild("TorsoController")
			local Look = TorsoController and TorsoController:FindFirstChild("Look")
			if Look then
				Look:FireServer(Pitch, 0)
			end
			--
		else
			local CameraController = Character:FindFirstChild("CameraController")
			if CameraController and not CameraController:GetAttribute("FreeLooking") then
				Humanoid.AutoRotate = true
			end;
		end
		--

		--// Bunny hop
		if flags.Bunnyhop and Humanoid.FloorMaterial ~= Enum.Material.Air and UserInputService:IsKeyDown(Enum.KeyCode.Space) then
			Humanoid.Jump = true
		end;

		--// Omnisprint
		local DirectionTable = Globals.DirectionTable

		if DirectionTable and flags.Omnisprint and UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then

			--// Direction setting
			DirectionTable.Left, DirectionTable.Right, DirectionTable.Backward, DirectionTable.Crouch = false, false, false, false
			DirectionTable.Forward, DirectionTable.Sprint = true, true
			DirectionTable.BackwardLeft, DirectionTable.BackwardRight = false, false
			DirectionTable.ForwardLeft, DirectionTable.ForwardRight = false, false
			--

			Humanoid.WalkSpeed = 19

			local StateController = Character:FindFirstChild("StateController")

			if StateController then
				StateController:SetAttribute("IsSprint", true);
				StateController:SetAttribute("Direction", "Forward");
			end;
		end

		--// Debug Camera
		local IsFlying = flags.Fly and flags["Fly Activation"].Toggled
		if flags.DebugCamera and flags["Debug Camera Activation"].Toggled and not IsFlying then
			task.spawn(function()
				if not Root then return end

				Globals.NeedToReturn = true

				local CameraLookVector = Camera.CFrame.LookVector
				local NormalCameraLookVector = CameraLookVector

				if not Globals.SavedPosition then
					Globals.SavedPosition = Root.CFrame
				end

				sethiddenproperty(Root, "NetworkIsSleeping", true);

				local UpPos = Vector3.new(0, 1, 0)
				local DownPos = Vector3.new(0, -1, 0)
				local NonePos = Vector3.new(0, 0, 0)

				local BaseCFrame = Root.CFrame
				local IsUpPressed = UserInputService:IsKeyDown(Enum.KeyCode.E)
				local IsDownPressed = UserInputService:IsKeyDown(Enum.KeyCode.Q)
				local IsForwardPressed = UserInputService:IsKeyDown(119) -- W
				local IsBackwardPressed = UserInputService:IsKeyDown(115) -- S

				Root.Anchored = true
				Root.Velocity = NonePos

				local Delta = Globals.Delta * flags.DebugCameraSpeed * 3

				local MovementVector = (
					Humanoid.MoveDirection +
						(IsUpPressed and UpPos or NonePos) +
						(IsDownPressed and DownPos or NonePos) +
						(IsForwardPressed and Vector3.new(0, NormalCameraLookVector.Y, 0) or NonePos) +
						(IsBackwardPressed and Vector3.new(0, -NormalCameraLookVector.Y, 0) or NonePos)
				) * Delta
				if not (flags.HideTerrain and flags["HideTerrain Activation"].Toggled) then
					BaseCFrame += MovementVector
					local Position = BaseCFrame.p
					Root.CFrame = CFrame.new(Position, Position + Vector3.new(CameraLookVector.X, 0, CameraLookVector.Z))
				end
				Humanoid.AutoRotate = false
			end)
		else
			if Globals.NeedToReturn then
				Humanoid.AutoRotate = true
				Globals.NeedToReturn = false
				sethiddenproperty(Root, "NetworkIsSleeping", false)

				for _, Value in Character:GetChildren() do
					if Value:IsA("BasePart") then
						sethiddenproperty(Value, "NetworkIsSleeping", false)
					end
				end

				Root.CFrame = Globals.SavedPosition
				if not (flags.HideTerrain and flags["HideTerrain Activation"].Toggled) then
					Root.Anchored = false
				end
				Globals.SavedPosition = nil
			end
		end

		if flags.Speed and flags['Speed Activation'].Toggled and not IsFlying and Root then
			local x, z = 0, 0
			if UserInputService:IsKeyDown(Enum.KeyCode.D) then x += 1 end
			if UserInputService:IsKeyDown(Enum.KeyCode.A) then x -= 1 end
			if UserInputService:IsKeyDown(Enum.KeyCode.W) then z += 1 end
			if UserInputService:IsKeyDown(Enum.KeyCode.S) then z -= 1 end

			if x ~= 0 or z ~= 0 then
				local cf = Camera.CFrame
				local forward = Vector3.new(cf.LookVector.X, 0, cf.LookVector.Z).Unit
				local right = Vector3.new(cf.RightVector.X, 0, cf.RightVector.Z).Unit

				local move = (right * x + forward * z).Unit
				local hv = move * flags.SpeedAmount
				Root.Velocity = Vector3.new(hv.X, Root.Velocity.Y, hv.Z)
			end
		end
		--
	end;
end));

local hrppos, hrpvel
local oldIndex; oldIndex = hookmetamethod(game, '__index', newcclosure(function(self, key)
	if flags.AntiVector then
		if not checkcaller() then
			if
				key == 'CFrame'
				and Client.Character
				and Client.Character:FindFirstChild('Head')
				and Client.Character:FindFirstChild('HumanoidRootPart')
				and Client.Character:FindFirstChild('Humanoid')
				and Client.Character:FindFirstChild('Humanoid').Health > 0
			then
				if self == Client.Character.HumanoidRootPart then
					return hrppos or CFrame.new()
				elseif self == Client.Character.Head then
					return hrppos
						and hrppos + Vector3.new(
							0,
							Client.Character.HumanoidRootPart.Size
									/ 2
								+ 0.5,
							0
						)
					or CFrame.new()
				end
			end
		end
	end
	return oldIndex(self, key)
end))

function randomnum(a)
	return math.random(-a * 100, a * 100) / 100
end

RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function()
	local Character = Globals.ClientCharacter;
	local Root = Character and Character:FindFirstChild("HumanoidRootPart");
	local Humanoid = Character and Character:FindFirstChild("Humanoid")
	local IsFlying;
	if not Globals.Delta then return end
	if Humanoid and Root and Humanoid.Health > 0 then
		--// Fly
		local no = false
		if flags.AntiVector then
			hrppos = Client.Character.HumanoidRootPart.CFrame
			hrpvel = Client.Character.HumanoidRootPart.AssemblyLinearVelocity

			local SpoofThis = Client.Character.HumanoidRootPart.CFrame
			a = not a

			SpoofThis = SpoofThis
				* CFrame.new(
					Vector3.new(
						randomnum(1),
						randomnum(2) + 1.5,
						randomnum(1)
					)
				)
			SpoofThis = SpoofThis
				* CFrame.Angles(
					math.rad(a and -90 or 90),
					0,
					math.rad(a and -90 or 90)
				)

			Client.Character.HumanoidRootPart.CFrame = SpoofThis

			Client.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(
				1,
				1,
				1
			) * 9999

			RunService.RenderStepped:Wait()

			Client.Character.HumanoidRootPart.CFrame = hrppos
			Client.Character.HumanoidRootPart.AssemblyLinearVelocity = hrpvel
			no = true
		end

		if (flags.Fly and flags["Fly Activation"].Toggled) and not (flags.HideTerrain and flags["HideTerrain Activation"].Toggled) and not no then
			task.spawn(function()
				IsFlying = true;
				if (Humanoid and Humanoid.Health > 0) then
					local Delta = Globals.Delta * flags.FlySpeed * 3;
					local MoveVector = Vector3.zero;

					local look = Camera.CFrame.LookVector;
					local right = Camera.CFrame.RightVector;

					if (UserInputService:IsKeyDown(Enum.KeyCode.W)) then
						MoveVector += Vector3.new(look.X, 0, look.Z);
					end;
					if (UserInputService:IsKeyDown(Enum.KeyCode.S)) then
						MoveVector -= Vector3.new(look.X, 0, look.Z);
					end;
					if (UserInputService:IsKeyDown(Enum.KeyCode.A)) then
						MoveVector -= Vector3.new(right.X, 0, right.Z);
					end;
					if (UserInputService:IsKeyDown(Enum.KeyCode.D)) then
						MoveVector += Vector3.new(right.X, 0, right.Z);
					end;

					if (UserInputService:IsKeyDown(Enum.KeyCode.Space)) then
						MoveVector += Vector3.new(0, 1, 0);
					end;
					if (UserInputService:IsKeyDown(Enum.KeyCode.LeftControl)) then
						MoveVector += Vector3.new(0, -1, 0);
					end;

					if (MoveVector.Magnitude > 0) then
						MoveVector = MoveVector.Unit;
					end;

					local MovementDelta = MoveVector * Delta;
					local Position = Root.CFrame.Position + MovementDelta;

					Humanoid.PlatformStand = false;
					Root.Velocity = Vector3.zero;
					Root.CFrame = CFrame.new(Position, Position + Vector3.new(look.X, 0, look.Z));
				end;
			end);
		end;


		--// Infinite Fly Fall Correction
		if flags.InfiniteFly and IsFlying and not no then
			local Origin = Root.Position;
			local Result = workspace:Raycast(Origin, Vector3.new(0, -1000, 0), Globals.RaycastParams);
			if Result and Result.Distance > 4 then
				task.spawn(function()
					local OldVel = Root.Velocity;
					for _, Part in Character:GetChildren() do
						if Part:IsA("BasePart") then
							Part.Velocity = Vector3.new(0, -9999, 0);
						end;
					end;
					RunService.RenderStepped:Wait()
					for _, Part in Character:GetChildren() do
						if Part:IsA("BasePart") then
							Part.Velocity = OldVel;
						end;
					end;
				end);
			end;
		end;

		--// NoFall
		if flags.NoFall and not IsFlying and not no then
			local Origin = Root.Position;
			local Result = workspace:Raycast(Origin, Vector3.new(0, -1000, 0), Globals.RaycastParams);

			if Result and Result.Distance > 10 then
				task.spawn(function()
					local OldVel = Root.Velocity;
					for _, Part in Character:GetChildren() do
						if Part:IsA("BasePart") then
							Part.Velocity = Vector3.new(0, 9999, 0);
						end;
					end;
					RunService.RenderStepped:Wait()
					for _, Part in Character:GetChildren() do
						if Part:IsA("BasePart") then
							Part.Velocity = OldVel;
						end;
					end;
				end);
			end;
		end;
	end;
end));

--#region RunService
RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function(Delta)
	Globals.Delta = Delta
end))

--#endregion RunService

--#region Hooks

--// Bindable Events
local ClientSignals = ReplicatedStorage:FindFirstChild("ClientSignals")

local HitEvent = Instance.new("BindableEvent", ClientSignals);
local TracerEvent = Instance.new("BindableEvent", ClientSignals);
local HitEffectEvent = Instance.new("BindableEvent", ClientSignals);
local RaidEvent = Instance.new("BindableEvent", ReplicatedStorage.ClientSignals);

TracerEvent.Event:Connect(LPH_NO_VIRTUALIZE(function(Origin, Destination)
	if not flags.BulletTracers then return end
	local TracerModel = Instance.new("Model")
	TracerModel.Name = "TracerModel"
	TracerModel.Parent = workspace

	local function CreateAnchorPart(position)
		local p = Instance.new("Part")
		p.Name = "Anchor"
		p.Size = Vector3.new(0.0001, 0.0001, 0.0001)
		p.Anchored = true
		p.CanCollide = false
		p.CanQuery = false
		p.Transparency = 1
		p.Position = position
		p.Parent = TracerModel
		return p
	end

	local Part0 = CreateAnchorPart(Origin)
	local Part1 = CreateAnchorPart(Destination)

	local Attachment0 = Instance.new("Attachment", Part0)
	local Attachment1 = Instance.new("Attachment", Part1)

	local Beam = Instance.new("Beam")
	Beam.Name = "MainBeam"
	Beam.Attachment0 = Attachment0
	Beam.Attachment1 = Attachment1
	Beam.Texture = 'http://www.roblox.com/asset/?id=446111271'
	Beam.Width0 = 1
	Beam.Width1 = 1
	Beam.Segments = 10
	Beam.FaceCamera = true
	Beam.Transparency = NumberSequence.new(0, 1)
	Beam.TextureLength = 1
	Beam.TextureMode = Enum.TextureMode.Stretch
	Beam.LightInfluence = 1
	Beam.LightEmission = 1
	Beam.Enabled = true
	Beam.Color = ColorSequence.new(flags.TracerColor1.Color, flags.TracerColor2.Color)
	Beam.Brightness = 1
	Beam.Parent = TracerModel


	task.delay(flags.TracerLifetime, function()
		local fade = TweenService:Create(Beam, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {
			Width0 = 0, Width1 = 0, TextureSpeed = 0, Brightness = 0
		})
		fade:Play()
		fade.Completed:Wait()
		TracerModel:Destroy()
	end)
end))

HitEvent.Event:Connect(LPH_NO_VIRTUALIZE(function(HitData, startPos)
	local HitPart = HitData[1];
	local HitPos = HitData[2];
	--local HitMaterial = HitData[4];
	if HitData[8] then return end
	task.spawn(function()
		if flags.HitNotifications then
			if HitPart and HitPart.Parent and HitPart.Parent:FindFirstChild('Head') then
				local gun = getGun(Globals.ClientCharacter)
				if gun and gun ~= 'None' then
					Library:Notification({
						text = "Hit "..tostring(HitPart.Parent.Name).." in their " .. tostring(HitPart.Name) .. " with ".. gun.. " from " .. tostring(math.floor((startPos - HitPos).Magnitude)) .. " studs away",
						time = 5
					})
				end
			end;
		end
	end)
	task.spawn(function()
		if not flags.HitSounds then
			return
		end

		local HitSound = Globals.HitSounds[flags.HitSound]

		if not HitSound then
			return
		end

		if HitSound then
			if HitPart and HitPart.Parent and HitPart.Parent:FindFirstChild('Head') then
				local sound = Instance.new("Sound")
				sound.SoundId = HitSound
				sound.Volume = flags.HitSoundVolume
				sound.PlaybackSpeed = flags.HitSoundSpeed
				sound.Parent = workspace
				sound:Play()
				sound.Ended:Connect(function()
					sound:Destroy()
				end)
			end
		end
	end)

	if flags.Hitmarkers then
		if HitPart and HitPart.Parent and HitPart.Parent:FindFirstChild('Head') then
			local bars = {}
			local bar_length = 10
			local gap = 4
			local thickness = 2
			local running = true

			for i = 1, 4 do
				local line = Drawing.new('Line')
				line.Thickness = thickness
				line.Color = flags.HitmarkerColor.Color
				line.Transparency = 1
				line.ZIndex = 2
				line.Visible = true
				table.insert(bars, line)
			end

			task.spawn(function()
				while running do
					local screen_pos, on_screen = Camera:WorldToViewportPoint(HitPos)
					if not on_screen then
						for _, bar in bars do
							bar.Visible = false
						end
					else
						local cx, cy = screen_pos.X, screen_pos.Y
						local center = Vector2.new(cx, cy)

						for i = 0, 3 do
							local angle = math.rad(45 + i * 90)
							local dir = Vector2.new(math.cos(angle), math.sin(angle))
							local start = center + dir * gap
							local finish = center + dir * (gap + bar_length)

							local bar = bars[i + 1]
							bar.From = start
							bar.To = finish
						end
					end
					RunService.RenderStepped:Wait()
				end
			end)

			task.delay(flags.HitmarkerTime, function()
				for t = 10, 1, -1 do
					for _, bar in bars do
						bar.Transparency = t / 10
					end
					task.wait(0.03)
				end

				running = false

				for _, bar in bars do
					pcall(function() bar:Remove() end)
				end
			end);
		end;
	end;
end));

HitEffectEvent.Event:Connect(LPH_NO_VIRTUALIZE(function(pos)
	if not flags.HitEffects then return end
	local Color = flags.HitEffectColor.Color
	local purple, delay
	if flags['Hit Effect Type'] == 'Black Hole' then
		delay = 0.5
		purple = Instance.new("Part")
		purple.BottomSurface = Enum.SurfaceType.Smooth
		purple.CFrame = CFrame.fromMatrix(pos, Vector3.new(1, 0, 0), Vector3.new(0, 1, 0), Vector3.new(0, 0, 1))
		purple.Size = Vector3.new(9 / 5, 1 / 5, 9 / 5)
		purple.TopSurface = Enum.SurfaceType.Smooth
		purple.Name = "purple"
		purple.Transparency = 1
		purple.Parent = workspace
		purple.Anchored = true
		purple.CanCollide = false

		local attachment = Instance.new("Attachment")
		attachment.Name = "attachment"
		attachment.Visible = false
		attachment.CFrame = purple.CFrame:ToObjectSpace(CFrame.new(pos))
		attachment.Parent = purple

		local spec1 = Instance.new("ParticleEmitter")
		spec1.Brightness = 10
		spec1.Color = ColorSequence.new(Color)
		spec1.Drag = 11
		spec1.Lifetime = NumberRange.new(0.30000001192092896, 1.5)
		spec1.LockedToPart = true
		spec1.Size = NumberSequence.new(0.6000000238418579, 0)
		spec1.Speed = NumberRange.new(35, 110)
		spec1.SpreadAngle = Vector2.new(130, 130)
		spec1.Texture = "rbxassetid://16878181512"
		spec1.ZOffset = 1
		spec1.Name = "Spec1"
		spec1.Parent = attachment

		local spec1_2 = Instance.new("ParticleEmitter")
		spec1_2.Brightness = 10
		spec1_2.Color = ColorSequence.new(Color)
		spec1_2.Drag = 11
		spec1_2.Lifetime = NumberRange.new(0.30000001192092896, 0.47999998927116394)
		spec1_2.LockedToPart = true
		spec1_2.Orientation = Enum.ParticleOrientation.VelocityParallel
		spec1_2.Rate = 0
		spec1_2.Rotation = NumberRange.new(90, 90)
		spec1_2.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 3), NumberSequenceKeypoint.new(0.3090185523033142, 1.1250001192092896), NumberSequenceKeypoint.new(1, 0)})
		spec1_2.Speed = NumberRange.new(35, 100)
		spec1_2.SpreadAngle = Vector2.new(130, 130)
		spec1_2.Squash = NumberSequence.new(1)
		spec1_2.Texture = "rbxassetid://16878181512"
		spec1_2.ZOffset = 1
		spec1_2.Name = "Spec1"
		spec1_2.Parent = attachment


		local attachment_2 = Instance.new("Attachment")
		attachment_2.Name = "attachment_2"
		attachment_2.Visible = false
		attachment_2.CFrame = purple.CFrame:ToObjectSpace(CFrame.new(pos))
		attachment_2.Parent = purple

		local circular_smack_2 = Instance.new("ParticleEmitter")
		circular_smack_2.Brightness = 21
		circular_smack_2.Color = ColorSequence.new(Color)
		circular_smack_2.FlipbookLayout = Enum.ParticleFlipbookLayout.Grid4x4
		circular_smack_2.FlipbookMode = Enum.ParticleFlipbookMode.OneShot
		circular_smack_2.Lifetime = NumberRange.new(0.25, 0.6499999761581421)
		circular_smack_2.Rotation = NumberRange.new(-360, 360)
		circular_smack_2.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.10000000149011612, 7.064182758331299), NumberSequenceKeypoint.new(0.20000000298023224, 10.684243202209473), NumberSequenceKeypoint.new(0.30000001192092896, 12.396157264709473), NumberSequenceKeypoint.new(0.4000000059604645, 13.239100456237793), NumberSequenceKeypoint.new(0.5, 13.666389465332031), NumberSequenceKeypoint.new(0.6000000238418579, 13.881112098693848), NumberSequenceKeypoint.new(0.699999988079071, 13.983055114746094), NumberSequenceKeypoint.new(0.800000011920929, 14.025410652160645), NumberSequenceKeypoint.new(0.8999999761581421, 14.038399696350098), NumberSequenceKeypoint.new(1, 14.039999961853027), NumberSequenceKeypoint.new(1, 14.039999961853027)})
		circular_smack_2.Speed = NumberRange.new(0.0019500001799315214, 0.0019500001799315214)
		circular_smack_2.Texture = "rbxassetid://18140248952"
		circular_smack_2.ZOffset = 1
		circular_smack_2.Name = "Circular Smack"
		circular_smack_2.Parent = attachment_2

		local white_ripple = Instance.new("ParticleEmitter")
		white_ripple.Brightness = 21
		white_ripple.Color = ColorSequence.new(Color)
		white_ripple.FlipbookLayout = Enum.ParticleFlipbookLayout.Grid4x4
		white_ripple.FlipbookMode = Enum.ParticleFlipbookMode.OneShot
		white_ripple.Lifetime = NumberRange.new(0.25, 0.6499999761581421)
		white_ripple.Rotation = NumberRange.new(-360, 360)
		white_ripple.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.10000000149011612, 14.128365516662598), NumberSequenceKeypoint.new(0.20000000298023224, 21.368486404418945), NumberSequenceKeypoint.new(0.30000001192092896, 24.792314529418945), NumberSequenceKeypoint.new(0.4000000059604645, 26.478200912475586), NumberSequenceKeypoint.new(0.5, 27.332778930664062), NumberSequenceKeypoint.new(0.6000000238418579, 27.762224197387695), NumberSequenceKeypoint.new(0.699999988079071, 27.966110229492188), NumberSequenceKeypoint.new(0.800000011920929, 28.05082130432129), NumberSequenceKeypoint.new(0.8999999761581421, 28.076799392700195), NumberSequenceKeypoint.new(1, 28.079999923706055), NumberSequenceKeypoint.new(1, 28.079999923706055)})
		white_ripple.Speed = NumberRange.new(0.003900000359863043, 0.003900000359863043)
		white_ripple.Texture = "rbxassetid://16504340270"
		white_ripple.ZOffset = 1
		white_ripple.Name = "White Ripple"
		white_ripple.Parent = attachment_2

		local white_ripple_2 = Instance.new("ParticleEmitter")
		white_ripple_2.Brightness = 21
		white_ripple_2.Color = ColorSequence.new(Color)
		white_ripple_2.FlipbookLayout = Enum.ParticleFlipbookLayout.Grid4x4
		white_ripple_2.FlipbookMode = Enum.ParticleFlipbookMode.OneShot
		white_ripple_2.Lifetime = NumberRange.new(0.25, 0.6499999761581421)
		white_ripple_2.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
		white_ripple_2.Rotation = NumberRange.new(-360, 360)
		white_ripple_2.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.10000000149011612, 14.128365516662598), NumberSequenceKeypoint.new(0.20000000298023224, 21.368486404418945), NumberSequenceKeypoint.new(0.30000001192092896, 24.792314529418945), NumberSequenceKeypoint.new(0.4000000059604645, 26.478200912475586), NumberSequenceKeypoint.new(0.5, 27.332778930664062), NumberSequenceKeypoint.new(0.6000000238418579, 27.762224197387695), NumberSequenceKeypoint.new(0.699999988079071, 27.966110229492188), NumberSequenceKeypoint.new(0.800000011920929, 28.05082130432129), NumberSequenceKeypoint.new(0.8999999761581421, 28.076799392700195), NumberSequenceKeypoint.new(1, 28.079999923706055), NumberSequenceKeypoint.new(1, 28.079999923706055)})
		white_ripple_2.Speed = NumberRange.new(0.003900000359863043, 0.003900000359863043)
		white_ripple_2.Texture = "rbxassetid://16504340270"
		white_ripple_2.ZOffset = 1
		white_ripple_2.Name = "White Ripple"
		white_ripple_2.Parent = attachment_2

		local blackhole_ripple = Instance.new("ParticleEmitter")
		blackhole_ripple.Brightness = 21
		blackhole_ripple.Color = ColorSequence.new(Color)
		blackhole_ripple.FlipbookLayout = Enum.ParticleFlipbookLayout.Grid4x4
		blackhole_ripple.FlipbookMode = Enum.ParticleFlipbookMode.OneShot
		blackhole_ripple.Lifetime = NumberRange.new(0.25, 0.6499999761581421)
		blackhole_ripple.LightEmission = 1
		blackhole_ripple.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
		blackhole_ripple.Rotation = NumberRange.new(-360, 360)
		blackhole_ripple.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.10000000149011612, 7.064182758331299), NumberSequenceKeypoint.new(0.20000000298023224, 10.684243202209473), NumberSequenceKeypoint.new(0.30000001192092896, 12.396157264709473), NumberSequenceKeypoint.new(0.4000000059604645, 13.239100456237793), NumberSequenceKeypoint.new(0.5, 13.666389465332031), NumberSequenceKeypoint.new(0.6000000238418579, 13.881112098693848), NumberSequenceKeypoint.new(0.699999988079071, 13.983055114746094), NumberSequenceKeypoint.new(0.800000011920929, 14.025410652160645), NumberSequenceKeypoint.new(0.8999999761581421, 14.038399696350098), NumberSequenceKeypoint.new(1, 14.039999961853027), NumberSequenceKeypoint.new(1, 14.039999961853027)})
		blackhole_ripple.Speed = NumberRange.new(0.0019500001799315214, 0.0019500001799315214)
		blackhole_ripple.Texture = "rbxassetid://13826100764"
		blackhole_ripple.ZOffset = 1
		blackhole_ripple.Name = "Blackhole Ripple"
		blackhole_ripple.Parent = attachment_2

		local flare141_new = Instance.new("ParticleEmitter")
		flare141_new.Color = ColorSequence.new(Color)
		flare141_new.FlipbookMode = Enum.ParticleFlipbookMode.OneShot
		flare141_new.Lifetime = NumberRange.new(1.5, 1.5)
		flare141_new.Rotation = NumberRange.new(-360, 360)
		flare141_new.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 15.600000381469727), NumberSequenceKeypoint.new(1, 15.600000381469727)})
		flare141_new.Speed = NumberRange.new(0.0019500001799315214, 0.0019500001799315214)
		flare141_new.Texture = "rbxassetid://17230437889"
		flare141_new.ZOffset = 1
		flare141_new.Name = "Flare141New"
		flare141_new.Parent = attachment_2

		local flare272_new = Instance.new("ParticleEmitter")
		flare272_new.Color = ColorSequence.new(Color)
		flare272_new.FlipbookFramerate = NumberRange.new(1.649999976158142, 1.649999976158142)
		flare272_new.FlipbookMode = Enum.ParticleFlipbookMode.OneShot
		flare272_new.Lifetime = NumberRange.new(0.9090909361839294, 0.9090909361839294)
		flare272_new.Rate = 33
		flare272_new.Rotation = NumberRange.new(-360, 360)
		flare272_new.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 15.600000381469727), NumberSequenceKeypoint.new(1, 15.600000381469727)})
		flare272_new.Speed = NumberRange.new(0.0032175001688301563, 0.0032175001688301563)
		flare272_new.Texture = "rbxassetid://10637682258"
		flare272_new.ZOffset = 1
		flare272_new.Name = "Flare272New"
		flare272_new.Parent = attachment_2

		local blackhole_ripple_2 = Instance.new("ParticleEmitter")
		blackhole_ripple_2.Brightness = 21
		blackhole_ripple_2.Color = ColorSequence.new(Color)
		blackhole_ripple_2.FlipbookLayout = Enum.ParticleFlipbookLayout.Grid4x4
		blackhole_ripple_2.FlipbookMode = Enum.ParticleFlipbookMode.OneShot
		blackhole_ripple_2.Lifetime = NumberRange.new(0.25, 0.6499999761581421)
		blackhole_ripple_2.LightEmission = 1
		blackhole_ripple_2.Rotation = NumberRange.new(-360, 360)
		blackhole_ripple_2.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.10000000149011612, 7.064182758331299), NumberSequenceKeypoint.new(0.20000000298023224, 10.684243202209473), NumberSequenceKeypoint.new(0.30000001192092896, 12.396157264709473), NumberSequenceKeypoint.new(0.4000000059604645, 13.239100456237793), NumberSequenceKeypoint.new(0.5, 13.666389465332031), NumberSequenceKeypoint.new(0.6000000238418579, 13.881112098693848), NumberSequenceKeypoint.new(0.699999988079071, 13.983055114746094), NumberSequenceKeypoint.new(0.800000011920929, 14.025410652160645), NumberSequenceKeypoint.new(0.8999999761581421, 14.038399696350098), NumberSequenceKeypoint.new(1, 14.039999961853027), NumberSequenceKeypoint.new(1, 14.039999961853027)})
		blackhole_ripple_2.Speed = NumberRange.new(0.0019500001799315214, 0.0019500001799315214)
		blackhole_ripple_2.Texture = "rbxassetid://13826100764"
		blackhole_ripple_2.ZOffset = 1
		blackhole_ripple_2.Name = "Blackhole Ripple"
		blackhole_ripple_2.Parent = attachment_2

		local scaleFactor = 0.15
		purple.Size *= scaleFactor

		for _, desc in purple:GetDescendants() do
			if desc:IsA('Attachment') then
				desc.Position *= scaleFactor
			elseif desc:IsA('ParticleEmitter') then
				local newSize = {}
				for _, keypoint in desc.Size.Keypoints do
					insert(newSize, NumberSequenceKeypoint.new(keypoint.Time, keypoint.Value * scaleFactor))
				end
				desc.Size = NumberSequence.new(newSize)
				desc.Speed = NumberRange.new(desc.Speed.Min * scaleFactor, desc.Speed.Max * scaleFactor)
			end
		end
	end
	if flags['Hit Effect Type'] == 'Sparkles' then
		delay = 1
		local X, Y, Z = Vector3.new(1, 0, 0), Vector3.new(0, 1, 0), Vector3.new(0, 0, 1);
		local baseCF = CFrame.fromMatrix(pos, X, Y, Z);

		purple = Instance.new('Part');
		purple.Anchored = true;
		purple.BottomSurface = Enum.SurfaceType.Smooth;
		purple.Color = Color3.new(1, 1, 1);
		purple.Size = Vector3.new(0.72, 0.72, 0.72);
		purple.TopSurface = Enum.SurfaceType.Smooth;
		purple.CFrame = baseCF;
		purple.Transparency = 1
		purple.Parent = workspace;

		local attachment = Instance.new('Attachment');
		attachment.Visible = false;
		attachment.CFrame = CFrame.new();
		attachment.Parent = purple;

		local shards = Instance.new('ParticleEmitter');
		shards.Brightness = 4;
		shards.Color = ColorSequence.new(Color)
		shards.Drag = 7.5;
		shards.Lifetime = NumberRange.new(0.5, 1);
		shards.Orientation = Enum.ParticleOrientation.VelocityParallel;
		shards.Rate = 10;
		shards.Rotation = NumberRange.new(90, 90);
		shards.Size = NumberSequence.new({
			NumberSequenceKeypoint.new(0, 0),
			NumberSequenceKeypoint.new(0.24537815153598785, 0.675000011920929),
			NumberSequenceKeypoint.new(1, 0)
		});
		shards.Speed = NumberRange.new(10, 15);
		shards.SpreadAngle = Vector2.new(-360, 360);
		shards.Squash = NumberSequence.new(0.10999999940395355);
		shards.Texture = 'rbxassetid://8030734851';
		shards.Parent = attachment;

		local slash = Instance.new('ParticleEmitter');
		slash.Brightness = 4;
		slash.Color = ColorSequence.new(Color)
		slash.FlipbookLayout = Enum.ParticleFlipbookLayout.Grid4x4;
		slash.FlipbookMode = Enum.ParticleFlipbookMode.OneShot;
		slash.Lifetime = NumberRange.new(0.8, 1.5);
		slash.LightEmission = 1;
		slash.Orientation = Enum.ParticleOrientation.VelocityPerpendicular;
		slash.Rate = 10;
		slash.RotSpeed = NumberRange.new(-360, 360);
		slash.Rotation = NumberRange.new(-180, 180);
		slash.Size = NumberSequence.new({
			NumberSequenceKeypoint.new(0, 1.6918035745620728),
			NumberSequenceKeypoint.new(0.45546218752861023, 2.3400001525878906),
			NumberSequenceKeypoint.new(0.7042016983032227, 1.350000023841858),
			NumberSequenceKeypoint.new(1, 1.2600001096725464)
		});
		slash.Speed = NumberRange.new(2.880000114440918, 4.320000171661377);
		slash.SpreadAngle = Vector2.new(6, 6);
		slash.Texture = 'rbxassetid://17853203150';
		slash.TimeScale = 0.7;
		slash.Parent = attachment;

		local sparkles = Instance.new('ParticleEmitter');
		sparkles.Acceleration = Vector3.new(0, 18, 0);
		sparkles.Brightness = 5;
		sparkles.Color = ColorSequence.new(Color)
		sparkles.Drag = 6;
		sparkles.EmissionDirection = Enum.NormalId.Back;
		sparkles.FlipbookFramerate = NumberRange.new(0, 0);
		sparkles.FlipbookMode = Enum.ParticleFlipbookMode.Random;
		sparkles.Lifetime = NumberRange.new(0.2, 0.5);
		sparkles.LightEmission = 1;
		sparkles.Rate = 25;
		sparkles.RotSpeed = NumberRange.new(-100, 100);
		sparkles.Rotation = NumberRange.new(0, 360);
		sparkles.ShapeInOut = Enum.ParticleEmitterShapeInOut.Inward;
		sparkles.ShapeStyle = Enum.ParticleEmitterShapeStyle.Surface;
		sparkles.Size = NumberSequence.new({
			NumberSequenceKeypoint.new(0, 0),
			NumberSequenceKeypoint.new(0.48067227005958557, 0.5114758014678955),
			NumberSequenceKeypoint.new(1, 0)
		});
		sparkles.Speed = NumberRange.new(10.8, 18);
		sparkles.SpreadAngle = Vector2.new(360, 360);
		sparkles.Texture = 'rbxassetid://10598374841';
		sparkles.TimeScale = 0.8;
		sparkles.ZOffset = -1;
		sparkles.Parent = purple;
	end

	Debris:AddItem(purple, delay);

	task.delay(delay, function()
		local startTime = tick()
		local originalSize = purple.Size

		local emitters = {}
		for _, v in purple:GetDescendants() do
			if v:IsA("ParticleEmitter") then
				v.Enabled = false
				emitters[v] = v.Size
			end
		end

		local conn
		conn = RunService.Heartbeat:Connect(function()
			local elapsed = tick() - startTime
			local alpha = math.clamp(elapsed / 0.1, 0, 1)
			local scale = 1 - alpha

			purple.Size = originalSize * scale

			for emitter, originalSequence in emitters do
				local newKeypoints = {}
				for _, kp in originalSequence.Keypoints do
					insert(newKeypoints, NumberSequenceKeypoint.new(kp.Time, kp.Value * scale))
				end
				emitter.Size = NumberSequence.new(newKeypoints)
			end

			if alpha >= 1 then
				purple:Destroy()
				if conn then
					conn:Disconnect()
				end
			end
		end)
	end)
end));

local raidGui = CoreGui:FindFirstChild("RaidESP") or Instance.new("ScreenGui")
raidGui.Name = "RaidESP"; raidGui.IgnoreGuiInset = true; raidGui.ResetOnSpawn = false; raidGui.Parent = CoreGui

local clusters = {}

local function destroyUI(cl)
	local ui = cl.ui
	if ui then ui:Destroy(); cl.ui = nil end
end

local function buildUI(cl)
	destroyUI(cl)
	local root = Instance.new("Frame")
	root.Name = "RaidGroup"
	root.BackgroundTransparency = 1
	root.AnchorPoint = Vector2.new(0.5, 0.5)
	root.Size = UDim2.fromOffset(64, 64)
	root.Parent = raidGui

	local list = Instance.new("UIListLayout")
	list.FillDirection = Enum.FillDirection.Horizontal
	list.HorizontalAlignment = Enum.HorizontalAlignment.Center
	list.VerticalAlignment = Enum.VerticalAlignment.Center
	list.Padding = UDim.new(0, 4)
	list.Parent = root

	local counts = {}
	for i=1, #cl.items do
		local img = cl.items[i].image
		counts[img] = (counts[img] or 0) + 1
	end
	local order = {}
	for img,_ in counts do insert(order, img) end
	table.sort(order, function(a,b) return counts[a] > counts[b] end)

	for i=1,#order do
		local img = order[i]
		local holder = Instance.new("Frame")
		holder.Size = UDim2.fromOffset(36, 36)
		holder.BackgroundTransparency = 1
		holder.Parent = root

		local icon = Instance.new("ImageLabel")
		icon.Size = UDim2.fromScale(1, 1)
		icon.BackgroundTransparency = 1
		icon.Image = img
		icon.Parent = holder

		local c = counts[img]
		if c > 1 then
			local badge = Instance.new("TextLabel")
			badge.AnchorPoint = Vector2.new(1, 0)
			badge.Position = UDim2.new(1, 0, 0, 0)
			badge.Size = UDim2.fromOffset(18, 14)
			badge.BackgroundTransparency = 0.2
			badge.BackgroundColor3 = Color3.fromRGB(20,20,20)
			badge.TextColor3 = Color3.new(1,1,1)
			badge.TextScaled = true
			badge.FontFace = Library.Font
			badge.Text = tostring(c)
			badge.Parent = holder
			local ui_corner = Instance.new("UICorner")
			ui_corner.CornerRadius = UDim.new(0,4)
			ui_corner.Parent = badge
		end
	end

	local distLabel = Instance.new("TextLabel")
	distLabel.Name = "Distance"
	distLabel.AnchorPoint = Vector2.new(0.5, 0)
	distLabel.Position = UDim2.new(0.5, 0, 1, 4)
	distLabel.Size = UDim2.fromOffset(64, 16)
	distLabel.BackgroundTransparency = 1
	distLabel.TextColor3 = Color3.new(1,1,1)
	distLabel.TextScaled = true
	distLabel.FontFace = Library.Font
	distLabel.Text = ""
	distLabel.Parent = root

	insert(Globals.RaidEsps, {cluster=cl,gui=root,distLabel=distLabel})
	cl.ui = root
	cl.distLabel = distLabel
end

RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function()
	local camCF = Camera.CFrame;
	local camPos = camCF.Position;

	local n = #clusters;
	for i = 1, n do
		local cl = clusters[i];
		local ui = cl.ui;
		if (ui) then
			local v3, on = Camera:WorldToViewportPoint(cl.center);
			on = on and (v3.Z > 0);

			if (ui.Visible ~= on) then
				ui.Visible = on;
			end;

			if (on) then
				local d = (cl.center - camPos).Magnitude
				local s = math.clamp(64 + d * 0.02, 48, 128)

				if (cl._lastSize ~= s) then
					cl._lastSize = s
					ui.Size = UDim2.fromOffset(s, s)
				end

				local x, y = v3.X, v3.Y
				if (cl._lastX ~= x or cl._lastY ~= y) then
					cl._lastX, cl._lastY = x, y
					ui.Position = UDim2.fromOffset(x, y)
				end

				local dist_label = cl.distLabel
				if dist_label then
					dist_label.Text = string.format("%ds", math.floor(d + 0.5))
				end
			end
		end;
	end;
end));

local gcIndex = 1;
RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function()
	local now = tick();
	local n = #clusters;
	if (n == 0) then return; end;

	local checks = math_min(n, 32);
	for _ = 1, checks do
		if (n == 0) then break; end;

		if (gcIndex > n) then
			gcIndex = 1;
		end;

		local cl = clusters[gcIndex];
		if (now - cl.lastUpdate >= flags.clusterTTL) then
			destroyUI(cl);
			table.remove(clusters, gcIndex);
			n -= 1;
		else
			gcIndex += 1;
		end;
	end;
end));

local boom = {
	['C4'] = {image = "rbxassetid://13169199238", name = 'Timed Explosive Charge'},
	['DynamiteBundle'] = {image = "rbxassetid://15127431071", name = 'Dynamite Bundle'},
	['DynamiteStick'] = {image = "rbxassetid://15127430886", name = 'Dynamite Stick'},
	['Rocket'] = {image = "rbxassetid://15132772763", name = 'Rocket'}
}

RaidEvent.Event:Connect(LPH_NO_VIRTUALIZE(function(Type, cf)
	local pos = (typeof(cf) == "CFrame") and cf.Position or cf
	local info = boom[Type]
	if not info then return end
	if flags.ESPRaids then
		local now = tick()
		local best, bestDist = nil, flags.clusterRadius
		for _, cl in clusters do
			local dist = (pos - cl.center).Magnitude
			if dist < bestDist then best, bestDist = cl, dist end
		end
		if best then
			insert(best.items, {pos = pos, image = info['image']})
			best.sum += pos
			best.n += 1
			best.center = best.sum / best.n
			best.lastUpdate = now
			buildUI(best)
		else
			local cl = {items={{pos=pos,image=info['image']}}, sum=pos, n=1, center=pos, lastUpdate=now, ui=nil}
			insert(clusters, cl)
			buildUI(cl)
		end
	end
	if flags.RaidNotifications then
		local p = pos
		local coords = math.floor(p.X)..", "..math.floor(p.Y)..", "..math.floor(p.Z)
		Library:Notification({ text = "A "..info['name'].." has been placed at "..coords, time = 10 })
	end
end))

local PG = Client:WaitForChild('PlayerGui');

local NAME, DNAME = Client.Name, Client.DisplayName;

local isText = LPH_NO_VIRTUALIZE(function(x)
	return x and (x:IsA('TextLabel') or x:IsA('TextBox') or x:IsA('TextButton'));
end);

local markOnce = LPH_NO_VIRTUALIZE(function(obj, key)
	if (obj:GetAttribute(key)) then return false end;
	obj:SetAttribute(key, true);
	return true;
end);

local chatFilter = LPH_NO_VIRTUALIZE(function(obj)
	if (not markOnce(obj, '__chat_bind')) then return end;
	local function apply()
		task.defer(function()
			local t = obj.Text;
			if (t) then obj.Text = t:gsub(NAME, 'vanity'):gsub(DNAME, 'vanity'); end;
		end)
	end;
	apply();
	obj:GetPropertyChangedSignal('Text'):Connect(apply);
end);

local teamFilter = LPH_NO_VIRTUALIZE(function(tag)
	if (not markOnce(tag, '__team_bind')) then return end;
	local function apply()
		local target = (flags.GhostMode and 'vanity' or NAME);
		local t = tag.Text;
		if (t and (t == NAME or t == DNAME or t == 'vanity')) then tag.Text = target; end;
	end;
	apply();
	tag:GetPropertyChangedSignal('Text'):Connect(apply);
end);

local under = LPH_NO_VIRTUALIZE(function(containerName, obj)
	local p = obj;
	while (p and p ~= PG) do
		if (p.Name == containerName) then return true end;
		p = p.Parent;
	end;
	return false;
end);

local route = LPH_NO_VIRTUALIZE(function(obj)
	if (not isText(obj)) then return end;
	if (under('Messages', obj)) then chatFilter(obj); return end;
	if (under('Team', obj) or under('TeamList', obj)) then teamFilter(obj); return end;
end);

pcall(function()
	for _, d in PG:GetDescendants() do route(d) end;

	PG.DescendantAdded:Connect(LPH_NO_VIRTUALIZE(function(d)
		route(d);
	end));

	PG.ChildAdded:Connect(LPH_NO_VIRTUALIZE(function(ch)
		if (ch.Name == 'CustomChat' or ch.Name == 'Main' or ch.Name == 'Team' or ch.Name == 'TeamList') then
			for _, d in ch:GetDescendants() do route(d) end;
		end;
	end));

	PG:GetPropertyChangedSignal('Parent'):Connect(LPH_NO_VIRTUALIZE(function()
		for _, d in PG:GetDescendants() do route(d) end;
	end));
end);

--

--// Hooks
setreadonly(getgenv().Random, false)
local old = getgenv().Random.new
getgenv().Random.new = newcclosure(LPH_NO_VIRTUALIZE(function(...)
	local real_random = old(...)

	local spoofed = newproxy(true)
	local mt = getmetatable(spoofed)

	mt.__index = function(_, key)
		local val = real_random[key]
		if typeof(val) == "function" then
			return function(_, ...)
				if tostring(key) == 'NextNumber' then
					local tb = debug.traceback()
					if tb:find('.ViewmodelController:1072') or tb:find('.ViewmodelController:1071') and flags.SpreadModifier then
						return val(real_random, ...) * flags.SpreadPercent / 100
					end
				end
				return val(real_random, ...)
			end
		end
		return val
	end

	mt.__tostring = function()
		return tostring(real_random)
	end

	return spoofed
end))
setreadonly(getgenv().Random, true)

setreadonly(getgenv().task, false)
local old_task_spawn = getgenv().task.spawn
getgenv().task.spawn = newcclosure(LPH_NO_VIRTUALIZE(function(func, ...)
	local traceback = debug.traceback()

	if func and type(func) == 'function' and traceback:find('InteractController') then
		if flags.InstantLastCode then
			for i, v in debug.getconstants(func) do
				if type(v) == 'number' and v == 0.4 then
					debug.setconstant(func, i, 0)
				end
			end
		end
	end

	if not func or type(func) ~= 'function' then
		return
	end

	return old_task_spawn(func, ...)
end))
setreadonly(getgenv().task, true)

local CheckCameraDistance = VFX.CheckCameraDistance;
VFX.CheckCameraDistance = LPH_NO_UPVALUES(function(...)
	--warn(debug.traceback());
	return false; -- 2dsboy07 was here :sob:
end);

local LastPredictionPos

local CreateProjectile = VFX.CreateProjectile
VFX.CreateProjectile = LPH_NO_UPVALUES(function(self, ...)
	local Args = {...}
	local IsWallbanged = false

	local Traceback = debug.traceback();
	if Traceback:find("ViewmodelController") and Args[1].StepFunction ~= "FakeStepFunc" and Args[1].HitFunction ~= "FakeHitFunc" and not tostring(Args[1].HitFunction):find("Ignore") then
		Globals.ShouldHit = ((math.floor(Random.new():NextNumber(0, 1) * 100) / 100) <= (flags.HitChance / 100))
		if debug.isvalidlevel and debug.isvalidlevel(3) or debug.validlevel and debug.validlevel(3) then
			LastPredictionPos = nil
			local HitFunction; HitFunction = Args[1].HitFunction;
			local startPos = Args[1].Position or Args[1].PositionFirst or Camera.CFrame.Position;
			local manipPos = EntityClass.ManipulatedPosition
			Args[1].HitFunction = function(...)
				local Arguments = {...};

				local HitPart = Arguments[1];
				local HitPos = Arguments[2];
				--local HitMaterial = Arguments[4];

				local targetchr = HitPart and HitPart.Parent;
				if flags.ForceHitpart and targetchr then
					local hitparts = flags.ForceHitpartParts;
					if hitparts and #hitparts > 0 then
						local hitpartName = hitparts[math.random(1, #hitparts)];
						local part = targetchr:FindFirstChild(hitpartName);
						if part then
							HitPos = part:GetClosestPointOnSurface(startPos);
							HitPart = part;
						end
					end
				end

				Arguments[1] = HitPart
				Arguments[2] = HitPos
				if flags.onlyOnHitHitEffect then
					if (HitPart and HitPart.Parent and HitPart.Parent and HitPart.Parent:FindFirstChild('Head')) then
						local gun = getGun(Globals.ClientCharacter)
						if gun and gun ~= 'None' then
							HitEffectEvent:Fire(HitPos)
						end
					end
				else
					if HitPart and HitPart.Parent and HitPart.Parent:FindFirstChildOfClass('Humanoid') then
						local gun = getGun(Globals.ClientCharacter)
						if gun and gun ~= 'None' then
							HitEffectEvent:Fire(HitPos)
						end
					end
				end
				TracerEvent:Fire(startPos, HitPos or IsWallbanged and manipPos)
				HitEvent:Fire(Arguments, startPos)
				if flags.ThirdPerson and flags["Third Person Activation"].Toggled and Arguments[8] and Globals.ClientCharacter and Globals.ClientCharacter:FindFirstChild('Head') then
					Arguments[8] = Globals.ClientCharacter.Head.CFrame
				end

				return HitFunction(unpack(Arguments));
			end;


			-- local Stack = debug.getstack(3);
			-- local Recoil = rawget(Stack, 25);

			-- if Recoil and typeof(Recoil) == "table" and rawget(Recoil, "FinishStart") and rawget(Recoil, "RecoilStart") and rawget(Recoil, "RecoilFinish") and flags.RecoilModifier then
			--     local RecoilStart = Recoil.RecoilStart
			--     local RecoilFinish = Recoil.RecoilFinish
			--     local RecoilPercent = flags.RecoilPercent / 100

			--     Recoil.RecoilStart = function(...)
			--         return 0, 0
			--     end

			--     Recoil.RecoilFinish = function(...)
			--         return 0, 0
			--     end

			--     Recoil.Shake.X = {0, 0}
			--     Recoil.Shake.Y = {0, 0}
			-- end;

			-- local CameraStack = rawget(Stack, 45);
			-- local FlashpartStack = rawget(Stack, 51);
			-- local HRPStack = rawget(Stack, 52);
			-- local MouseHitStack = rawget(Stack, 52)

			-- if CameraStack and FlashpartStack and HRPStack and MouseHitStack and
			if EntityClass.TargetPart and flags.AimbotMode == "Silent" and Globals.ShouldHit then
				if not (flags.ShootOnTP and flags["Teleport Activation"].Toggled and flags.DisableSilentWhileTP) then
					local HitPosition = EntityClass.TargetPart.CFrame.p;
					-- local CameraPosition = CameraStack.p;
					-- local IsThirdPerson = flags.ThirdPerson and flags["Third Person Activation"].Toggled

					if flags.InstantBullet then
						local Speed, Gravity = Args[1].Speed, Args[1].Gravity
						local Distance = (Camera.CFrame.Position - HitPosition).Magnitude
						local TimeToHit = Distance / Speed

						local G = Gravity * -196.2
						local Drop = -0.5 * G * TimeToHit * TimeToHit
						if tostring(Drop):find("nan") then Drop = 0 end

						LastPredictionPos = Vector3.new(0, Drop, 0)
					end

					if flags.HitScan and EntityClass.ScannedPosition then
						task.defer(HitFunction, EntityClass.TargetPart, EntityClass.ScannedPosition, Vector3.new(0, 0, 1), EntityClass.TargetPart.Material)
						return
					end

					if flags.ForceHit then
						task.defer(HitFunction, EntityClass.TargetPart, EntityClass.TargetPart:GetClosestPointOnSurface(LastPredictionPos), Vector3.new(0, 0, 1), EntityClass.TargetPart.Material)
						return
					end

					Args[1].MissFunction = Args[1].HitFunction;

					-- local FakeCameraCFrame = CFrame.new(CameraPosition, HitPosition)
					-- local FakeHRPCFrame = CFrame.new(HRPStack.p, HitPosition);

					-- local OriginalFlashOffset = FlashpartStack - CameraPosition
					-- local NewFlashpartPosition = CFrame.new(FlashpartStack, HitPosition).p

					-- if manipPos then
					-- 	IsWallbanged = EntityClass.Wallbanged;
					-- 	NewFlashpartPosition = CFrame.new(manipPos, HitPosition).p;

					-- 	local FlashpartOffsetCamera = CameraPosition - FlashpartStack;
					-- 	local FlashpartOffsetHRP = HRPStack.p - FlashpartStack;

					-- 	local NewCameraPos = NewFlashpartPosition + FlashpartOffsetCamera
					-- 	local NewHRPPos = NewFlashpartPosition + FlashpartOffsetHRP

					-- 	FakeCameraCFrame = CFrame.new(NewCameraPos, HitPosition);
					-- 	FakeHRPCFrame = CFrame.new(NewHRPPos, HitPosition);
					-- end;

					-- -- server_Time, v382.Name, camera_cframe, charf_crame:PointToObjectSpace(l_Position_0), char_cframe, spread_stuff, v431, mouse_raycast
					-- -- if flags.ThirdPerson and flags["Third Person Activation"].Toggled then
					-- --     local flash_point_pos = args[5]:PointToWorldSpace(args[4])
					-- --     local calculated_offset = args[3]:PointToObjectSpace(flash_point_pos)
					-- --     args[5] = CFrame.lookAt(character_pos, target_position)
					-- --     args[4] = calculated_offset
					-- -- end

					-- if flags.ThirdPerson and flags["Third Person Activation"].Toggled and Globals.ClientCharacter then
					-- 	local calculated_offset = CameraStack:PointToObjectSpace(FlashpartStack)
					-- 	NewFlashpartPosition = HRPStack:PointToWorldSpace(calculated_offset)
					-- 	FakeCameraCFrame = CFrame.new(Globals.ClientCharacter.Head.Position, HitPosition)
					-- 	print('nigger')
					-- end

					-- debug.setstack(3, 45, FakeCameraCFrame);
					-- debug.setstack(3, 54, HitPosition);
					-- debug.setstack(3, 52, FakeHRPCFrame)
					-- debug.setstack(3, 51, NewFlashpartPosition)
				end
			end;

			if flags.ShootOnTP and flags["Teleport Activation"].Toggled then
				Globals.ClientCharacter.HumanoidRootPart.CFrame = Mouse.Hit;
			end;

		end;

		if flags.InstantBullet then
			Args[1].Speed = 9e9;
		end;

		if (Args[1]['Terminate']) then
			Args[1]['Terminate'] = nil;
		end;

		if EntityClass.TargetPart and flags.AimbotMode == "Silent" and Globals.ShouldHit and not (flags.ShootOnTP and flags["Teleport Activation"].Toggled and flags.DisableSilentWhileTP) then
			local HitPosition = EntityClass.TargetPart.CFrame.p;
			local Origin = Args[1].Position;

			local Direction = (HitPosition - Origin).Unit
			local CorrectedPosition = CFrame.new(Origin, HitPosition).Position

			if EntityClass.ManipulatedPosition then
				Direction = (HitPosition - EntityClass.ManipulatedPosition).Unit;
				CorrectedPosition = CFrame.new(EntityClass.ManipulatedPosition, HitPosition).p;
			end;

			Args[1].Position = CorrectedPosition

			if Args[1].PositionFirst then
				Args[1].PositionFirst = CorrectedPosition
			end;

			Args[1].DirectionFirst = Direction
			Args[1].Direction = Direction

			-- Globals.BulletOrigin = CorrectedPosition;
			-- local origin = EntityClass.ManipulatedPosition or Args[1].Position

			-- local enemy_pos = EntityClass.TargetPart.Position
			-- local distance = (origin - enemy_pos).Magnitude
			-- local time_to_hit = distance / Args[1].Speed

			-- local G = Args[1].Gravity * -196.2
			-- local drop = -0.5 * G * (time_to_hit ^ 2)
			-- if drop ~= drop then
			--     drop = 0
			-- end

			-- last_prediction_pos = enemy_pos + Vector3.new(0, drop, 0)

			-- local silly = CFrame.lookAt(origin, enemy_pos).LookVector

			-- Args[1].Position = origin
			-- Args[1].PositionFirst = EntityClass.ManipulatedPosition or Args[1].PositionFirst
			-- Args[1].DirectionFirst = silly
			-- Args[1].Direction = silly

		end;
	end;

	return CreateProjectile(self, unpack(Args));
end);


local CreateExplosion = VFX.CreateExplosion
VFX.CreateExplosion = LPH_NO_UPVALUES(function(...)
	local Arguments = {...};

	local Type = tostring(Arguments[5]);
	local CFrame = Arguments[2];

	task.spawn(function() RaidEvent:Fire(Type, CFrame) end)

	return CreateExplosion(...)
end);

local OldRaycast = RaycastUtil.Raycast; -- whoever made this a replace function kys (keep yourself safe)
RaycastUtil.Raycast = LPH_NO_VIRTUALIZE(function(self, ...) -- 2dsboy07 was here
	local Arguments = {...};

	if (not checkcaller()) then
		local Traceback = debug.traceback();

		if (Traceback and Traceback:find('ViewmodelController') and flags.Reach) then
			Arguments[2] = Arguments[2] * 10
		end;

		if (flags.PerfectFarm or flags.ThickBullet) then
			local Output = {OldRaycast(self, ...)};
			local HitInstance  = Output[1];
			local HitPosition = Output[2];

			if (not HitInstance or typeof(HitInstance) ~= 'Instance') then
				return unpack(Output);
			end;

			if (not HitPosition or typeof(HitPosition) ~= 'Vector3') then
				return unpack(Output);
			end;

			local Model = HitInstance.Parent;
			if (not Model or (not Model:IsA('Model'))) then
				return unpack(Output);
			end;

			-- if (flags.ThickBullet) then
			-- 	if (EntityClass.TargetCharacter and EntityClass.TargetPart) then
			-- 		local dist = (HitPosition - EntityClass.TargetPart.Position).Magnitude;
			-- 		if (dist < flags.BulletSize and EntityClass.TargetData and EntityClass.TargetData.CoreInformation and EntityClass.TargetData.CoreInformation.Visible) then
			-- 			Output[1] = EntityClass.TargetPart;
			-- 			Output[2] = EntityClass.TargetPart.Position;
			-- 			return unpack(Output);
			-- 		end;
			-- 	end;
			-- end;

			if (flags.PerfectFarm) then
				local Folder = Model.Parent;
				if (Folder and (Folder.Name == 'Trees' or Folder.Name == 'Nodes') and Folder:IsA('Folder')) then
					local CriticalPart = Model:FindFirstChild('NodeSpark') or Model:FindFirstChild('TreeX')
					if (CriticalPart and typeof(CriticalPart) == 'Instance' and CriticalPart:IsA('Model') and CriticalPart.PrimaryPart) then
						Output[1] = CriticalPart.PrimaryPart;
						return unpack(Output);
					end;
				end;
			end;
		end;
	end;

	return OldRaycast(self, unpack(Arguments));
end);

local ToggleFootstep = SoundModule.ToggleFootstep
SoundModule.ToggleFootstep = LPH_NO_VIRTUALIZE(function(...)
	local Arguments = {...};

	if flags.SilentStep and Arguments[3] then
		return SoundModule:StopSound(Arguments[3])
	end;

	return ToggleFootstep(...);
end);

local PlaySound = SoundModule.PlaySound
SoundModule.PlaySound = LPH_NO_VIRTUALIZE(function(...)
	local Arguments = {...};
	if flags.SilentStep and Arguments[2] and Arguments[2].Name == "WalkWater" then
		return SoundModule:StopSound(Arguments[2]);
	end;

	return PlaySound(...)
end);

--
local function dickify(character)
	local limbClone = Instance.new('Model')
	limbClone.WorldPivot = CFrame.fromMatrix(
		Vector3.new(265.4991455078125, 98.10460662841797, 3384.52978515625),
		Vector3.new(1, 0.00032796093728393316, 0.0000427841478085611),
		Vector3.new(
			-0.00032792703132145107,
			0.9999996423721313,
			-0.0007900348282419145
		),
		Vector3.new(
			-0.00004304323374526575,
			0.0007900208584032953,
			0.9999997615814209
		)
	)
	limbClone.Name = 'Torso'
	limbClone.Parent = character

	local middle = Instance.new('Part')
	middle.Anchored = true
	middle.BottomSurface = Enum.SurfaceType.Smooth
	middle.BrickColor = BrickColor.new(
		0.06666667014360428,
		0.06666667014360428,
		0.06666667014360428
	)
	middle.CFrame = CFrame.fromMatrix(
		Vector3.new(265.38153076171875, 97.93524169921875, 3384.322021484375),
		Vector3.new(0.00004976811760570854, -0.000027142279577674344, -1),
		Vector3.new(0.000009414029591425788, 1, -0.00002714181027840823),
		Vector3.new(1, -0.000009412678991793655, 0.000049768372264225036)
	)
	middle.Color = Color3.new(0.0666667, 0.0666667, 0.0666667)
	middle.Material = Enum.Material.Fabric
	middle.Orientation = Vector3.new(
		0.0010000000474974513,
		89.99700164794922,
		-0.0020000000949949026
	)
	middle.Rotation = Vector3.new(-0.0020000000949949026, 90, 0)
	middle.Size = Vector3.new(2, 2, 1)
	middle.TopSurface = Enum.SurfaceType.Smooth
	middle.Name = 'Middle'
	middle.Parent = limbClone
	middle.Transparency = 1

	local mesh = Instance.new('SpecialMesh')
	mesh.MeshType = Enum.MeshType.FileMesh
	mesh.MeshId = 'http://www.roblox.com/asset/?id=95358536'
	mesh.Scale =
		Vector3.new(0.800000011920929, 0.800000011920929, 0.4000000059604645)
	mesh.Parent = middle

	local part = Instance.new('Part')
	part.Anchored = true
	part.BottomSurface = Enum.SurfaceType.Smooth
	part.BrickColor =
		BrickColor.new(0.9333333969116211, 0.7686275243759155, 0.7137255072593689)
	part.CFrame = CFrame.fromMatrix(
		Vector3.new(264.8040771484375, 97.02957916259766, 3384.590576171875),
		Vector3.new(
			-0.0026299632154405117,
			0.0035676411353051662,
			-0.9999902248382568
		),
		Vector3.new(0.01545577123761177, 0.9998743534088135, 0.0035265793558210135),
		Vector3.new(
			0.9998770952224731,
			-0.015446344390511513,
			-0.002684773411601782
		)
	)
	part.Color = Color3.new(0.929412, 0.745098, 0.705882)
	part.Material = Enum.Material.Sand
	part.Orientation =
		Vector3.new(0.8849999904632568, 90.15399932861328, 0.20399999618530273)
	part.Rotation =
		Vector3.new(99.86000061035156, 89.10199737548828, -99.65699768066406)
	part.Size =
		Vector3.new(0.29499998688697815, 0.31299999356269836, 0.2849999964237213)
	part.TopSurface = Enum.SurfaceType.Smooth
	part.Parent = limbClone

	local mesh_2 = Instance.new('SpecialMesh')
	mesh_2.MeshType = Enum.MeshType.Sphere
	mesh_2.Parent = part

	local part_2 = Instance.new('Part')
	part_2.Anchored = true
	part_2.BottomSurface = Enum.SurfaceType.Smooth
	part_2.BrickColor =
		BrickColor.new(0.9333333969116211, 0.7686275243759155, 0.7137255072593689)
	part_2.CFrame = CFrame.fromMatrix(
		Vector3.new(264.38238525390625, 97.16130828857422, 3384.350830078125),
		Vector3.new(
			-0.9998770952224731,
			0.015446364879608154,
			0.0026849580463021994
		),
		Vector3.new(0.015455801039934158, 0.9998742938041687, 0.003530096495524049),
		Vector3.new(
			-0.002630093367770314,
			0.0035711610689759254,
			-0.9999902248382568
		)
	)
	part_2.Color = Color3.new(0.921569, 0.72549, 0.686275)
	part_2.Material = Enum.Material.SmoothPlastic
	part_2.Orientation =
		Vector3.new(-0.20499999821186066, -179.8489990234375, 0.8849999904632568)
	part_2.Rotation =
		Vector3.new(-179.7949981689453, -0.1509999930858612, -179.11399841308594)
	part_2.Size =
		Vector3.new(1.678794503211975, 0.3999999761581421, 0.3523329198360443)
	part_2.TopSurface = Enum.SurfaceType.Smooth
	part_2.Parent = limbClone

	local mesh_3 = Instance.new('SpecialMesh')
	mesh_3.MeshType = Enum.MeshType.Sphere
	mesh_3.Parent = part_2

	local part_3 = Instance.new('Part')
	part_3.Anchored = true
	part_3.BottomSurface = Enum.SurfaceType.Smooth
	part_3.BrickColor =
		BrickColor.new(0.8823530077934265, 0.6431372761726379, 0.760784387588501)
	part_3.CFrame = CFrame.fromMatrix(
		Vector3.new(263.772705078125, 97.17327117919922, 3384.353759765625),
		Vector3.new(-0.9998770952224731, 0.01544656790792942, 0.0026858521159738302),
		Vector3.new(0.015456012450158596, 0.9998744130134583, 0.0035312999971210957),
		Vector3.new(
			-0.002630968112498522,
			0.0035723785404115915,
			-0.9999902248382568
		)
	)
	part_3.Color = Color3.new(0.847059, 0.631373, 0.8)
	part_3.Material = Enum.Material.SmoothPlastic
	part_3.Orientation =
		Vector3.new(-0.20499999821186066, -179.8489990234375, 0.8849999904632568)
	part_3.Rotation =
		Vector3.new(-179.7949981689453, -0.1509999930858612, -179.11399841308594)
	part_3.Size =
		Vector3.new(0.45977717638015747, 0.36190536618232727, 0.3523329198360443)
	part_3.TopSurface = Enum.SurfaceType.Smooth
	part_3.Parent = limbClone

	local mesh_4 = Instance.new('SpecialMesh')
	mesh_4.MeshType = Enum.MeshType.Sphere
	mesh_4.Parent = part_3

	local part_4 = Instance.new('Part')
	part_4.Shape = Enum.PartType.Ball
	part_4.Anchored = true
	part_4.BottomSurface = Enum.SurfaceType.Smooth
	part_4.BrickColor =
		BrickColor.new(0.9333333969116211, 0.7686275243759155, 0.7137255072593689)
	part_4.CFrame = CFrame.fromMatrix(
		Vector3.new(264.818115234375, 97.05770111083984, 3384.11083984375),
		Vector3.new(
			-0.0026299799792468548,
			0.0035676402039825916,
			-0.9999901652336121
		),
		Vector3.new(0.015455772168934345, 0.9998744130134583, 0.0035265786573290825),
		Vector3.new(
			0.9998770952224731,
			-0.015446344390511513,
			-0.002684790175408125
		)
	)
	part_4.Color = Color3.new(0.929412, 0.745098, 0.705882)
	part_4.Material = Enum.Material.Sand
	part_4.Orientation =
		Vector3.new(0.8849999904632568, 90.15399932861328, 0.20399999618530273)
	part_4.Rotation =
		Vector3.new(99.86000061035156, 89.10199737548828, -99.65699768066406)
	part_4.Size =
		Vector3.new(0.29485052824020386, 0.3126789629459381, 0.2848505675792694)
	part_4.TopSurface = Enum.SurfaceType.Smooth
	part_4.Parent = limbClone

	local part_5 = Instance.new('Part')
	part_5.Anchored = true
	part_5.BottomSurface = Enum.SurfaceType.Smooth
	part_5.BrickColor =
		BrickColor.new(0.572549045085907, 0.22352942824363708, 0.4705882668495178)
	part_5.CFrame = CFrame.fromMatrix(
		Vector3.new(263.545166015625, 97.18382263183594, 3384.36669921875),
		Vector3.new(0.9993907809257507, 0.034899502992630005, 4.133383391730056e-25),
		Vector3.new(
			-0.034899502992630005,
			0.9993907809257507,
			-1.4434096131619955e-26
		),
		Vector3.new(4.1359030627651384e-25, 0, 1)
	)
	part_5.Color = Color3.new(0.666667, 0.2, 0.415686)
	part_5.Material = Enum.Material.Granite
	part_5.Orientation = Vector3.new(0, 0, 2)
	part_5.Rotation = Vector3.new(0, 0, 2)
	part_5.Size = Vector3.new(
		0.0010000020265579224,
		0.09499998390674591,
		0.019999999552965164
	)
	part_5.TopSurface = Enum.SurfaceType.Smooth
	part_5.Parent = limbClone

	local mesh_5 = Instance.new('SpecialMesh')
	mesh_5.MeshType = Enum.MeshType.Sphere
	mesh_5.Parent = part_5

	local function createWeld(limb, part)
		local weld = Instance.new('Weld')
		weld.Part0 = limb.Middle
		weld.Part1 = part
		local CJ = CFrame.new(limb.Middle.Position)
		weld.C0 = limb.Middle.CFrame:Inverse() * CJ
		weld.C1 = part.CFrame:Inverse() * CJ
		weld.Parent = limb.Middle
		return weld
	end

	for _, part in next, limbClone:GetChildren() do
		if part:IsA('BasePart') then
			createWeld(limbClone, part)
		end
	end

	local torso = character:FindFirstChild('LowerTorso')
	if torso then
		local weld = Instance.new('Weld')
		weld.Part0 = torso
		weld.Part1 = limbClone.Middle
		weld.C0 = CFrame.new(0, 0.65, 0)
		weld.Parent = torso
	end

	local client_head = character:FindFirstChild('Head')
	for _, part in next, limbClone:GetChildren() do
		if part:IsA('BasePart') then
			part.Anchored = false
			part.CanCollide = false
			if client_head then
				part.Color = client_head.Color
			end
			if part.Name ~= 'Middle' then
				part.Transparency = flags.ClientDick and 0 or 1
			end
		end
	end
	Globals.MyDih = limbClone
end

local mainbar = Instance.new("Frame")
mainbar.AnchorPoint = Vector2.new(0.5, 0.5)
mainbar.BackgroundColor3 = Color3.new(0.07, 0.07, 0.07)
mainbar.BorderSizePixel = 0
mainbar.Position = UDim2.new(0.5, 0, 0.6, 0)
mainbar.Size = UDim2.new(0, 356, 0, 10)
mainbar.Visible = false
mainbar.Parent = gethui()

Instance.new("UICorner").Parent = mainbar

local reloadbar = Instance.new("Frame")
reloadbar.BackgroundColor3 = Color3.new(1,0,0)
reloadbar.BorderSizePixel = 0
reloadbar.Position = UDim2.new(0, 2, 0.2, 0)
reloadbar.Size = UDim2.new(0, 0, 0.6, 0)
reloadbar.Visible = true
reloadbar.Parent = mainbar

Instance.new("UICorner").Parent = reloadbar

local reloadConnection

local v1 = "#\250)\215\28\1U\143\237}\154\218\231Cl-\15H\1\147"
local ReloadBarEvent = Instance.new("BindableEvent", ClientSignals);
ReloadBarEvent.Event:Connect(LPH_JIT_MAX(function()
	-- print('d1 dtc')
	if reloadConnection then
		reloadConnection:Disconnect()
		reloadConnection = nil
		return
	end

	if not flags.ReloadBar then return end

	local mygun = getGun(Globals.ClientCharacter)
	if not mygun or mygun == "None" then return end

	local bleh = CheatTable.Locals.ToolInfo[mygun]
	-- local bleh = {
	-- 	Weapon = {
	-- 		ReloadDuration = 2
	-- 	}
	-- }

	if not bleh or not bleh.Weapon or not bleh.Weapon.ReloadDuration then return end

	local reloadtime = bleh.Weapon.ReloadDuration
	local elapsed = 0
	mainbar.Visible = true
	reloadbar.Size = UDim2.new(0, 0, 0.6, 0)
	reloadbar.BackgroundColor3 = flags.ReloadBarColorStart.Color

	reloadConnection = RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function(dt)
		elapsed += dt
		local progress = math.clamp(elapsed / reloadtime, 0, 1)
		reloadbar.Size = UDim2.new(progress, -4, 0.6, 0)
		reloadbar.BackgroundColor3 = flags.ReloadBarColorStart.Color:Lerp(flags.ReloadBarColorEnd.Color, progress)

		if progress >= 1 then
			reloadConnection:Disconnect()
			reloadConnection = nil
			mainbar.Visible = false
		end
	end))
end))

local HooksOnCharacterAdded = LPH_JIT_MAX(function()
	if not Library or Library.Unloaded then return end
	Globals.QuickStackFunctions = {};

	local character = Client.Character or Client.CharacterAdded:Wait()
	Globals.ClientCharacter = character
	local hum = character:FindFirstChildOfClass('Humanoid') or character:WaitForChild('Humanoid')
	local InventoryController = character:WaitForChild('InventoryController')
	local EquipArmor = InventoryController:WaitForChild('EquipArmor')
	local Fetch = InventoryController:WaitForChild("Fetch")
	
	for _, conn in getconnections(RunService.Heartbeat) do
		local func = conn.Function
		if not func then continue end
		local info = debug.getinfo(func)
		if not info.source:find('ViewmodelController') then continue end
		for _, upvalue in debug.getupvalues(func) do
			if type(upvalue) ~= 'function' then continue end
			for _, constant in debug.getconstants(upvalue) do
				if type(constant) ~= 'string' then continue end

				if constant:find('WheelController') then
					for _, network in debug.getupvalues(upvalue) do
						if type(network) ~= 'function' then continue end
						if debug.getinfo(network).source:find('AssetContainer') then
							Globals.VMNetworkPointer = network
							local old_fire_remote
							old_fire_remote = hookfunction(network, LPH_NO_UPVALUES(function(remote_type, remote, hash, ...)
								local args = {...}
								if hash == v1 then
									if not (rawlen(args) == 8) then
										return old_fire_remote(remote_type, remote, hash, unpack(args))
									end
									if Globals.Killauraing then
										Globals.Killauraing = false
										return old_fire_remote(remote_type, remote, hash, unpack(args))
									end
									-- server_Time, v382.Name, camera_cframe, char_cframe:PointToObjectSpace(l_Position_0), char_cframe, spread_stuff, v431, mouse_raycast
									if not EntityClass.TargetPart or not flags.AimbotMode == "Silent" or not Globals.ShouldHit then
										return old_fire_remote(remote_type, remote, hash, unpack(args))
									end

									local modified_pos = EntityClass.ManipulatedPosition
									local target_position = EntityClass.ScannedPosition or EntityClass.TargetPart.Position

									if LastPredictionPos then
										target_position = target_position + LastPredictionPos
									end

									local character_pos = args[5].Position
									local camera_pos = args[3].Position
									if modified_pos then
										print('using manip pos!')
										character_pos = modified_pos
										camera_pos = modified_pos
									end
									args[8] = target_position

									-- fix for viewmodel origin
									if flags.ThirdPerson and flags["Third Person Activation"].Toggled then
										local flash_point_pos = args[5]:PointToWorldSpace(args[4])
										local calculated_offset = args[3]:PointToObjectSpace(flash_point_pos)
										args[3] = CFrame.lookAt(character_pos, target_position)
										args[4] = calculated_offset
										-- print('fixed ts ugh')
									else
										args[3] = CFrame.lookAt(camera_pos, target_position)
									end

									local hawk = CFrame.lookAt(character_pos, target_position)
									local _, yaw, _ = hawk:ToEulerAnglesYXZ()

									-- root pos shouldn't have roll/pitch
									args[5] = CFrame.new(hawk.Position) * CFrame.fromEulerAnglesYXZ(0, yaw, 0)
									-- print('modifying')
								end

								return old_fire_remote(remote_type, remote, hash, unpack(args))
							end))

							for _, upvlau in debug.getupvalues(upvalue) do
								if type(upvlau) ~= 'function' then continue end
								local g = debug.getconstants(upvlau)
								if g[13] == 'Reload' then
									local oldplayanim; oldplayanim = hookfunction(upvlau, LPH_NO_UPVALUES(function(name, speed, v190, v191)
										if name == "Bolt" and flags.InstantBolt then
											return {
												Length = 0.015,
											}
										end

										if name:find('Reload') then
											ReloadBarEvent:Fire()
										end

										return oldplayanim(name, speed, v190, v191)
									end))
								end
							end
						end
					end
				end
			end
		end
	end

	for _, conn in getconnections(Client.PlayerGui.Main.Inventory.ActionMenu.SplitBar.MouseButton1Down) do
		local f = conn.Function
		if f then
			Globals.ToolbarFunc = f
			break
		end
	end

	for _, c in getconnections(hum.StateChanged) do
		local fn = c.Function
		if type(fn) == 'function' then
			local i = debug.getinfo(fn)
			if i and i.short_src and i.short_src:find('ViewmodelController') then
				local Old; Old = hookfunction(fn, LPH_NO_UPVALUES(function(oldState, newState, ...)
					if flags.AlwaysGrounded then
						oldState = Enum.HumanoidStateType.Running
						newState = Enum.HumanoidStateType.Running
					end
					return Old(oldState, newState, ...)
				end))
			end
		else
			c:Disconnect()
		end
	end
	task.wait(0.1)

	for _, conn in getconnections(EquipArmor.Event) do
		local f = conn.Function
		if not f then continue end
		for _, v in debug.getupvalues(f) do
			if type(v) ~= 'function' then continue end
			local Constants = debug.getconstants(v)
			if Constants[1] == "ArmorEquip" and Constants[5] == "GetAttribute" then
				if flags.InstantLoot then
					debug.setconstant(v, 19, 0)
					debug.setconstant(v, 20, 0)
					debug.setconstant(v, 21, 0)
				end;
				insert(Globals.QuickStackFunctions, v)
			end
		end
	end
	task.wait(0.1)

	for _, conn in getconnections(hum.AttributeChanged) do
		local f = conn.Function
		if not f then continue end
		for _, v in debug.getupvalues(f) do
			if type(v) ~= 'function' then continue end
			local Constants = debug.getconstants(v)

			if table.find(Constants, "Forward") then
				local Upvalues = debug.getupvalues(v)
				local DirectionTable = Upvalues[1]

				if type(DirectionTable) == "table" and type(DirectionTable.Forward) == 'boolean' then
					Globals.DirectionTable = DirectionTable
					break
				end
			end
		end
	end
	task.wait(0.1)

	local StateController = character:WaitForChild("StateController", 10);

	if StateController then
		StateController:GetAttributeChangedSignal("IsSprint"):Connect(function()
			if flags.Omnisprint and UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
				StateController:SetAttribute("IsSprint", true);
			end;
		end);

		StateController:GetAttributeChangedSignal("Direction"):Connect(function()
			if flags.Omnisprint and UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
				StateController:SetAttribute("Direction", "Forward");
			end;
		end);
	end;
	local ViewmodelController = character:WaitForChild('ViewmodelController', 10)
	if ViewmodelController then
		local ViewmodelControllerSenv = getsenv(ViewmodelController)
		if ViewmodelControllerSenv then
			local old = ViewmodelControllerSenv.ChooseRandom
			ViewmodelControllerSenv.ChooseRandom = function(...)
				if flags.InstantEoka then
					return 0
				end
				return old(...)
			end
		end

		ViewmodelController:SetAttribute('DebugDisableScriptAnims', flags.RemoveBobbing);
	end

	for _, f in getgc() do
		if type(f) == 'function' and islclosure(f) then
			local info = debug.getinfo(f)

			local c = debug.getconstants(f)
			if info.short_src:find('Build') then
				for _, v in c do
					if type(v) == 'string' and v:find('NM') then
						for _, v in debug.getupvalues(f) do
							if type(v) ~= 'function' then continue end

							local info = debug.getinfo(v)
							if info.short_src:find('AssetContainer') then
								Globals.BuildingNetworkPointer = v
							end
						end
					end
				end
			end
		end
	end

	if getcallbackvalue then
		local FetchFunc = getcallbackvalue(Fetch, "OnInvoke")

		if FetchFunc then
			local Old; Old = hookfunction(FetchFunc, LPH_NO_UPVALUES(function(...)
				local i, _, _2 = Old(...)
				local t = i.Toolbar;
				if t then
					for a, id in t do
						if type(id) ~= "table" then
							continue
						end;
						local inn = Globals.ItemsModule[id.ID].Name;
						local s = flags["EnableSkin_"..inn]
						if s then
							id.Skin = flags["Skin_"..inn];
						else
							continue
						end;
					end;
				end;
				return i, _, _2
			end));
			-- print('hookin')
		end
	end

	dickify(character)
end);

HooksOnCharacterAdded();
Client.CharacterAdded:Connect(HooksOnCharacterAdded);
